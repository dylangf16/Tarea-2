        -:    0:Source:/home/dylan16/Documents/Datos2/Proyecto01/Proyecto-01-CE-2103/Matriz/Source_Files/matriz_dinamica.cpp
        -:    0:Graph:/home/dylan16/Documents/Datos2/Tarea#2/Tarea#2/Tarea-2/cmake-build-debug-coverage/CMakeFiles/Tarea_2.dir/Server.cpp.gcno
        -:    0:Data:/home/dylan16/Documents/Datos2/Tarea#2/Tarea#2/Tarea-2/cmake-build-debug-coverage/CMakeFiles/Tarea_2.dir/Server.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <iostream>
        -:    2:#include <fstream>
        -:    3:#include <chrono>
        -:    4:#include <thread>
        -:    5:#include <string.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <unistd.h>
        -:    8://#include "/home/dylan16/Documents/Datos2/Proyecto01/Proyecto-01-CE-2103/Matriz/Source_Files/memoria_ncurses.cpp"
        -:    9:
        -:   10:using namespace std;
        -:   11:int **puntero_matriz;
        -:   12:string linea2;
        -:   13:
        -:   14://Muestra la matriz en memoria
        -:   15://Esto lo hace recorriendo los punteros de punteros en memoria, y los va imprimiendo en forma de matriz en terminal
function _Z13mostrarMatrizPPiii called 1 returned 100% blocks executed 100%
        1:   16:void mostrarMatriz(int **puntero_matriz, int nFilas, int nCol){
        1:   17:    cout << "Imprimiendo la matriz en memoria:" << endl;
        1:   17-block  0
call    0 returned 1
call    1 returned 1
        2:   18:    for (int i = 0; i < nFilas; i++){
        2:   18-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        3:   19:        for(int j = 0; j < nCol; j++){
        1:   19-block  0
        3:   19-block  1
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:   20:            cout << *(*(puntero_matriz+i)+j) << " ";
        2:   20-block  0
call    0 returned 2
call    1 returned 2
        -:   21:        }
        1:   22:        cout << "\n";
        1:   22-block  0
call    0 returned 1
        -:   23:    }
        1:   24:    cout << "\n";
        1:   24-block  0
call    0 returned 1
        1:   25:}
        -:   26:
        -:   27://Buscar el valor recibido por el servidor en la matriz dinamica de punteros
function _Z6buscarPPiiiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 71%
        1:   28:string buscar(int **puntero_matriz, int nFilas, int nCol, int num, string resul){
        2:   29:    for (int i = 0; i < nFilas; i++){
        1:   29-block  0
        2:   29-block  1
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   29-block  2
        3:   30:        for(int j = 0; j < nCol; j++){
        1:   30-block  0
        3:   30-block  1
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:   30-block  2
        2:   31:            int num_matrix = *(*(puntero_matriz+i)+j);
        2:   32:            if(num_matrix == num){
        2:   32-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:   33:                resul = "True";
    %%%%%:   33-block  0
call    0 never executed
    #####:   34:                cout << resul << endl;
call    0 never executed
call    1 never executed
    #####:   35:                return resul;
call    0 never executed
        -:   36:            }
        -:   37:        }
        -:   38:    }
        1:   39:    cout << resul << endl;
        1:   39-block  0
call    0 returned 1
call    1 returned 1
        1:   40:    return "False";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   40-block  0
call    4 returned 1
    $$$$$:   40-block  1
call    5 never executed
        -:   41:}
        -:   42:
        -:   43://Libera la memoria de la matriz y les da un nullptr
function _Z16eliminar_memoriaPPiii called 1 returned 100% blocks executed 100%
        1:   44:void eliminar_memoria(int **puntero_matriz, int nFilas, int nCol){
        -:   45:    //Liberar la memoria utilizada en la matriz
        2:   46:    for (int i = 0; i < nFilas; i++){
        1:   46-block  0
        2:   46-block  1
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   47:        free(puntero_matriz[i]);
        1:   48:        puntero_matriz[i] = nullptr;
        1:   48-block  0
        -:   49:    }
        1:   50:    free(puntero_matriz);
        1:   51:    puntero_matriz = nullptr;
        1:   52:}
        -:   53:
        -:   54://Crea la matriz dinamica de punteros
function _Z14rellenarMatriziiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 78%
        1:   55:string rellenarMatriz(int nFilas, int nCol, string num){
        2:   56:    ifstream archivo("/home/dylan16/Documents/Datos2/Proyecto01/Proyecto-01-CE-2103/Matriz/Source_Files/disco.txt");
        1:   56-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   56-block  1
call    3 returned 1
    $$$$$:   56-block  2
call    4 never executed
        -:   57:
        -:   58:    //Establece un valor a cada posición de la matris dinámica
        1:   59:    puntero_matriz = (int**) malloc(1024*100); 
        2:   60:    for (int i = 0; i < nFilas; i++){
        1:   60-block  0
        2:   60-block  1
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   61:        puntero_matriz[i] = (int*) malloc(1024*100);
        1:   61-block  0
        -:   62:    }
        2:   63:    for (int i = 0; i < nFilas; i++){
        1:   63-block  0
        2:   63-block  1
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   63-block  2
        3:   64:        for(int j = 0; j <nCol; j++){
        1:   64-block  0
        3:   64-block  1
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:   65:            getline(archivo,linea2);
        2:   65-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   66:            *(*(puntero_matriz+i)+j) = std::stoi(linea2);
        2:   66-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   66-block  1
        -:   67:        }
        -:   68:    }
        1:   69:    cout << "Memoria usada: " << (nFilas + nCol) * 8*2  << "k" << endl; //Cálculo de la memoria aproximada utilizada
        1:   69-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   69-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   69-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   69-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        -:   70:
        1:   71:    mostrarMatriz(puntero_matriz, nFilas, nCol);
        1:   71-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   72:    //std::this_thread::sleep_for(std::chrono::milliseconds(10000));
        2:   73:    std::string resul = buscar(puntero_matriz,nFilas,nCol,stoi(num),"False");
        1:   73-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   73-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   73-block  2
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 1
    $$$$$:   73-block  3
    $$$$$:   73-block  4
        1:   74:    eliminar_memoria(puntero_matriz,nFilas,nCol);
call    0 returned 1
        2:   75:    return resul;
        1:   75-block  0
        -:   76:}
        -:   77:
        -:   78:/*
        -:   79:int main(){
        -:   80:    rellenarMatriz(2,3,"5");
        -:   81:    cout << "Fin del programa de matriz_dinamica" << endl;
        -:   82:
        -:   83:    return 0;
        -:   84:}
        -:   85:*/
        -:   86:
