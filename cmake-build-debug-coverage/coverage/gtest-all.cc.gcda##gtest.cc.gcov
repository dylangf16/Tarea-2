        -:    0:Source:/home/dylan16/Documents/Datos2/Tarea#2/Tarea#2/Tarea-2/lib/googletest-main/googletest/src/gtest.cc
        -:    0:Graph:/home/dylan16/Documents/Datos2/Tarea#2/Tarea#2/Tarea-2/cmake-build-debug-coverage/lib/googletest-main/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcno
        -:    0:Data:/home/dylan16/Documents/Datos2/Tarea#2/Tarea#2/Tarea-2/cmake-build-debug-coverage/lib/googletest-main/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2005, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30://
        -:   31:// The Google C++ Testing and Mocking Framework (Google Test)
        -:   32:
        -:   33:#include "gtest/gtest.h"
        -:   34:
        -:   35:#include <ctype.h>
        -:   36:#include <stdarg.h>
        -:   37:#include <stdio.h>
        -:   38:#include <stdlib.h>
        -:   39:#include <time.h>
        -:   40:#include <wchar.h>
        -:   41:#include <wctype.h>
        -:   42:
        -:   43:#include <algorithm>
        -:   44:#include <chrono>  // NOLINT
        -:   45:#include <cmath>
        -:   46:#include <cstdint>
        -:   47:#include <iomanip>
        -:   48:#include <iterator>
        -:   49:#include <limits>
        -:   50:#include <list>
        -:   51:#include <map>
        -:   52:#include <ostream>  // NOLINT
        -:   53:#include <sstream>
        -:   54:#include <unordered_set>
        -:   55:#include <vector>
        -:   56:
        -:   57:#include "gtest/gtest-assertion-result.h"
        -:   58:#include "gtest/gtest-spi.h"
        -:   59:#include "gtest/internal/custom/gtest.h"
        -:   60:
        -:   61:#if GTEST_OS_LINUX
        -:   62:
        -:   63:#include <fcntl.h>   // NOLINT
        -:   64:#include <limits.h>  // NOLINT
        -:   65:#include <sched.h>   // NOLINT
        -:   66:// Declares vsnprintf().  This header is not available on Windows.
        -:   67:#include <strings.h>   // NOLINT
        -:   68:#include <sys/mman.h>  // NOLINT
        -:   69:#include <sys/time.h>  // NOLINT
        -:   70:#include <unistd.h>    // NOLINT
        -:   71:
        -:   72:#include <string>
        -:   73:
        -:   74:#elif GTEST_OS_ZOS
        -:   75:#include <sys/time.h>  // NOLINT
        -:   76:
        -:   77:// On z/OS we additionally need strings.h for strcasecmp.
        -:   78:#include <strings.h>   // NOLINT
        -:   79:
        -:   80:#elif GTEST_OS_WINDOWS_MOBILE  // We are on Windows CE.
        -:   81:
        -:   82:#include <windows.h>  // NOLINT
        -:   83:#undef min
        -:   84:
        -:   85:#elif GTEST_OS_WINDOWS  // We are on Windows proper.
        -:   86:
        -:   87:#include <windows.h>  // NOLINT
        -:   88:#undef min
        -:   89:
        -:   90:#ifdef _MSC_VER
        -:   91:#include <crtdbg.h>  // NOLINT
        -:   92:#endif
        -:   93:
        -:   94:#include <io.h>         // NOLINT
        -:   95:#include <sys/stat.h>   // NOLINT
        -:   96:#include <sys/timeb.h>  // NOLINT
        -:   97:#include <sys/types.h>  // NOLINT
        -:   98:
        -:   99:#if GTEST_OS_WINDOWS_MINGW
        -:  100:#include <sys/time.h>  // NOLINT
        -:  101:#endif                 // GTEST_OS_WINDOWS_MINGW
        -:  102:
        -:  103:#else
        -:  104:
        -:  105:// cpplint thinks that the header is already included, so we want to
        -:  106:// silence it.
        -:  107:#include <sys/time.h>  // NOLINT
        -:  108:#include <unistd.h>    // NOLINT
        -:  109:
        -:  110:#endif  // GTEST_OS_LINUX
        -:  111:
        -:  112:#if GTEST_HAS_EXCEPTIONS
        -:  113:#include <stdexcept>
        -:  114:#endif
        -:  115:
        -:  116:#if GTEST_CAN_STREAM_RESULTS_
        -:  117:#include <arpa/inet.h>   // NOLINT
        -:  118:#include <netdb.h>       // NOLINT
        -:  119:#include <sys/socket.h>  // NOLINT
        -:  120:#include <sys/types.h>   // NOLINT
        -:  121:#endif
        -:  122:
        -:  123:#include "src/gtest-internal-inl.h"
        -:  124:
        -:  125:#if GTEST_OS_WINDOWS
        -:  126:#define vsnprintf _vsnprintf
        -:  127:#endif  // GTEST_OS_WINDOWS
        -:  128:
        -:  129:#if GTEST_OS_MAC
        -:  130:#ifndef GTEST_OS_IOS
        -:  131:#include <crt_externs.h>
        -:  132:#endif
        -:  133:#endif
        -:  134:
        -:  135:#if GTEST_HAS_ABSL
        -:  136:#include "absl/debugging/failure_signal_handler.h"
        -:  137:#include "absl/debugging/stacktrace.h"
        -:  138:#include "absl/debugging/symbolize.h"
        -:  139:#include "absl/flags/parse.h"
        -:  140:#include "absl/flags/usage.h"
        -:  141:#include "absl/strings/str_cat.h"
        -:  142:#include "absl/strings/str_replace.h"
        -:  143:#endif  // GTEST_HAS_ABSL
        -:  144:
        -:  145:namespace testing {
        -:  146:
        -:  147:using internal::CountIf;
        -:  148:using internal::ForEach;
        -:  149:using internal::GetElementOr;
        -:  150:using internal::Shuffle;
        -:  151:
        -:  152:// Constants.
        -:  153:
        -:  154:// A test whose test suite name or test name matches this filter is
        -:  155:// disabled and not run.
        -:  156:static const char kDisableTestFilter[] = "DISABLED_*:*/DISABLED_*";
        -:  157:
        -:  158:// A test suite whose name matches this filter is considered a death
        -:  159:// test suite and will be run before test suites whose name doesn't
        -:  160:// match this filter.
        -:  161:static const char kDeathTestSuiteFilter[] = "*DeathTest:*DeathTest/*";
        -:  162:
        -:  163:// A test filter that matches everything.
        -:  164:static const char kUniversalFilter[] = "*";
        -:  165:
        -:  166:// The default output format.
        -:  167:static const char kDefaultOutputFormat[] = "xml";
        -:  168:// The default output file.
        -:  169:static const char kDefaultOutputFile[] = "test_detail";
        -:  170:
        -:  171:// The environment variable name for the test shard index.
        -:  172:static const char kTestShardIndex[] = "GTEST_SHARD_INDEX";
        -:  173:// The environment variable name for the total number of test shards.
        -:  174:static const char kTestTotalShards[] = "GTEST_TOTAL_SHARDS";
        -:  175:// The environment variable name for the test shard status file.
        -:  176:static const char kTestShardStatusFile[] = "GTEST_SHARD_STATUS_FILE";
        -:  177:
        -:  178:namespace internal {
        -:  179:
        -:  180:// The text used in failure messages to indicate the start of the
        -:  181:// stack trace.
        -:  182:const char kStackTraceMarker[] = "\nStack trace:\n";
        -:  183:
        -:  184:// g_help_flag is true if and only if the --help flag or an equivalent form
        -:  185:// is specified on the command line.
        -:  186:bool g_help_flag = false;
        -:  187:
        -:  188:// Utility function to Open File for Writing
function _ZN7testing8internalL18OpenFileForWritingERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  189:static FILE* OpenFileForWriting(const std::string& output_file) {
    #####:  190:  FILE* fileout = nullptr;
    #####:  191:  FilePath output_file_path(output_file);
    %%%%%:  191-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  191-block  1
call    4 never executed
    #####:  192:  FilePath output_dir(output_file_path.RemoveFileName());
    %%%%%:  192-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  192-block  1
call    3 never executed
        -:  193:
    #####:  194:  if (output_dir.CreateDirectoriesRecursively()) {
    %%%%%:  194-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  194-block  1
branch  3 never executed
branch  4 never executed
    #####:  195:    fileout = posix::FOpen(output_file.c_str(), "w");
    %%%%%:  195-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  195-block  1
        -:  196:  }
    #####:  197:  if (fileout == nullptr) {
    %%%%%:  197-block  0
branch  0 never executed
branch  1 never executed
    #####:  198:    GTEST_LOG_(FATAL) << "Unable to open file \"" << output_file << "\"";
    %%%%%:  198-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  198-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  198-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  198-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  198-block  4
call   13 never executed
    $$$$$:  198-block  5
call   14 never executed
    $$$$$:  198-block  6
        -:  199:  }
    #####:  200:  return fileout;
    %%%%%:  200-block  0
call    0 never executed
    %%%%%:  200-block  1
        -:  201:}
        -:  202:
        -:  203:}  // namespace internal
        -:  204:
        -:  205:// Bazel passes in the argument to '--test_filter' via the TESTBRIDGE_TEST_ONLY
        -:  206:// environment variable.
function _ZN7testingL16GetDefaultFilterEv called 1 returned 100% blocks executed 80%
        1:  207:static const char* GetDefaultFilter() {
        -:  208:  const char* const testbridge_test_only =
        1:  209:      internal::posix::GetEnv("TESTBRIDGE_TEST_ONLY");
        1:  209-block  0
call    0 returned 1
        1:  210:  if (testbridge_test_only != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  211:    return testbridge_test_only;
    %%%%%:  211-block  0
        -:  212:  }
        1:  213:  return kUniversalFilter;
        1:  213-block  0
        -:  214:}
        -:  215:
        -:  216:// Bazel passes in the argument to '--test_runner_fail_fast' via the
        -:  217:// TESTBRIDGE_TEST_RUNNER_FAIL_FAST environment variable.
function _ZN7testingL18GetDefaultFailFastEv called 1 returned 100% blocks executed 80%
        1:  218:static bool GetDefaultFailFast() {
        -:  219:  const char* const testbridge_test_runner_fail_fast =
        1:  220:      internal::posix::GetEnv("TESTBRIDGE_TEST_RUNNER_FAIL_FAST");
        1:  220-block  0
call    0 returned 1
        1:  221:  if (testbridge_test_runner_fail_fast != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  222:    return strcmp(testbridge_test_runner_fail_fast, "1") == 0;
    %%%%%:  222-block  0
        -:  223:  }
        1:  224:  return false;
        1:  224-block  0
        -:  225:}
        -:  226:
        -:  227:}  // namespace testing
        -:  228:
        -:  229:GTEST_DEFINE_bool_(
        -:  230:    fail_fast,
        -:  231:    testing::internal::BoolFromGTestEnv("fail_fast",
        -:  232:                                        testing::GetDefaultFailFast()),
        -:  233:    "True if and only if a test failure should stop further test execution.");
        -:  234:
        -:  235:GTEST_DEFINE_bool_(
        -:  236:    also_run_disabled_tests,
        -:  237:    testing::internal::BoolFromGTestEnv("also_run_disabled_tests", false),
        -:  238:    "Run disabled tests too, in addition to the tests normally being run.");
        -:  239:
        -:  240:GTEST_DEFINE_bool_(
        -:  241:    break_on_failure,
        -:  242:    testing::internal::BoolFromGTestEnv("break_on_failure", false),
        -:  243:    "True if and only if a failed assertion should be a debugger "
        -:  244:    "break-point.");
        -:  245:
        -:  246:GTEST_DEFINE_bool_(catch_exceptions,
        -:  247:                   testing::internal::BoolFromGTestEnv("catch_exceptions",
        -:  248:                                                       true),
        -:  249:                   "True if and only if " GTEST_NAME_
        -:  250:                   " should catch exceptions and treat them as test failures.");
        -:  251:
        -:  252:GTEST_DEFINE_string_(
        -:  253:    color, testing::internal::StringFromGTestEnv("color", "auto"),
        -:  254:    "Whether to use colors in the output.  Valid values: yes, no, "
        -:  255:    "and auto.  'auto' means to use colors if the output is "
        -:  256:    "being sent to a terminal and the TERM environment variable "
        -:  257:    "is set to a terminal type that supports colors.");
        -:  258:
        -:  259:GTEST_DEFINE_string_(
        -:  260:    filter,
        -:  261:    testing::internal::StringFromGTestEnv("filter",
        -:  262:                                          testing::GetDefaultFilter()),
        -:  263:    "A colon-separated list of glob (not regex) patterns "
        -:  264:    "for filtering the tests to run, optionally followed by a "
        -:  265:    "'-' and a : separated list of negative patterns (tests to "
        -:  266:    "exclude).  A test is run if it matches one of the positive "
        -:  267:    "patterns and does not match any of the negative patterns.");
        -:  268:
        -:  269:GTEST_DEFINE_bool_(
        -:  270:    install_failure_signal_handler,
        -:  271:    testing::internal::BoolFromGTestEnv("install_failure_signal_handler",
        -:  272:                                        false),
        -:  273:    "If true and supported on the current platform, " GTEST_NAME_
        -:  274:    " should "
        -:  275:    "install a signal handler that dumps debugging information when fatal "
        -:  276:    "signals are raised.");
        -:  277:
        -:  278:GTEST_DEFINE_bool_(list_tests, false, "List all tests without running them.");
        -:  279:
        -:  280:// The net priority order after flag processing is thus:
        -:  281://   --gtest_output command line flag
        -:  282://   GTEST_OUTPUT environment variable
        -:  283://   XML_OUTPUT_FILE environment variable
        -:  284://   ''
        -:  285:GTEST_DEFINE_string_(
        -:  286:    output,
        -:  287:    testing::internal::StringFromGTestEnv(
        -:  288:        "output", testing::internal::OutputFlagAlsoCheckEnvVar().c_str()),
        -:  289:    "A format (defaults to \"xml\" but can be specified to be \"json\"), "
        -:  290:    "optionally followed by a colon and an output file name or directory. "
        -:  291:    "A directory is indicated by a trailing pathname separator. "
        -:  292:    "Examples: \"xml:filename.xml\", \"xml::directoryname/\". "
        -:  293:    "If a directory is specified, output files will be created "
        -:  294:    "within that directory, with file-names based on the test "
        -:  295:    "executable's name and, if necessary, made unique by adding "
        -:  296:    "digits.");
        -:  297:
        -:  298:GTEST_DEFINE_bool_(
        -:  299:    brief, testing::internal::BoolFromGTestEnv("brief", false),
        -:  300:    "True if only test failures should be displayed in text output.");
        -:  301:
        -:  302:GTEST_DEFINE_bool_(print_time,
        -:  303:                   testing::internal::BoolFromGTestEnv("print_time", true),
        -:  304:                   "True if and only if " GTEST_NAME_
        -:  305:                   " should display elapsed time in text output.");
        -:  306:
        -:  307:GTEST_DEFINE_bool_(print_utf8,
        -:  308:                   testing::internal::BoolFromGTestEnv("print_utf8", true),
        -:  309:                   "True if and only if " GTEST_NAME_
        -:  310:                   " prints UTF8 characters as text.");
        -:  311:
        -:  312:GTEST_DEFINE_int32_(
        -:  313:    random_seed, testing::internal::Int32FromGTestEnv("random_seed", 0),
        -:  314:    "Random number seed to use when shuffling test orders.  Must be in range "
        -:  315:    "[1, 99999], or 0 to use a seed based on the current time.");
        -:  316:
        -:  317:GTEST_DEFINE_int32_(
        -:  318:    repeat, testing::internal::Int32FromGTestEnv("repeat", 1),
        -:  319:    "How many times to repeat each test.  Specify a negative number "
        -:  320:    "for repeating forever.  Useful for shaking out flaky tests.");
        -:  321:
        -:  322:GTEST_DEFINE_bool_(
        -:  323:    recreate_environments_when_repeating,
        -:  324:    testing::internal::BoolFromGTestEnv("recreate_environments_when_repeating",
        -:  325:                                        false),
        -:  326:    "Controls whether global test environments are recreated for each repeat "
        -:  327:    "of the tests. If set to false the global test environments are only set "
        -:  328:    "up once, for the first iteration, and only torn down once, for the last. "
        -:  329:    "Useful for shaking out flaky tests with stable, expensive test "
        -:  330:    "environments. If --gtest_repeat is set to a negative number, meaning "
        -:  331:    "there is no last run, the environments will always be recreated to avoid "
        -:  332:    "leaks.");
        -:  333:
        -:  334:GTEST_DEFINE_bool_(show_internal_stack_frames, false,
        -:  335:                   "True if and only if " GTEST_NAME_
        -:  336:                   " should include internal stack frames when "
        -:  337:                   "printing test failure stack traces.");
        -:  338:
        -:  339:GTEST_DEFINE_bool_(shuffle,
        -:  340:                   testing::internal::BoolFromGTestEnv("shuffle", false),
        -:  341:                   "True if and only if " GTEST_NAME_
        -:  342:                   " should randomize tests' order on every run.");
        -:  343:
        -:  344:GTEST_DEFINE_int32_(
        -:  345:    stack_trace_depth,
        -:  346:    testing::internal::Int32FromGTestEnv("stack_trace_depth",
        -:  347:                                         testing::kMaxStackTraceDepth),
        -:  348:    "The maximum number of stack frames to print when an "
        -:  349:    "assertion fails.  The valid range is 0 through 100, inclusive.");
        -:  350:
        -:  351:GTEST_DEFINE_string_(
        -:  352:    stream_result_to,
        -:  353:    testing::internal::StringFromGTestEnv("stream_result_to", ""),
        -:  354:    "This flag specifies the host name and the port number on which to stream "
        -:  355:    "test results. Example: \"localhost:555\". The flag is effective only on "
        -:  356:    "Linux.");
        -:  357:
        -:  358:GTEST_DEFINE_bool_(
        -:  359:    throw_on_failure,
        -:  360:    testing::internal::BoolFromGTestEnv("throw_on_failure", false),
        -:  361:    "When this flag is specified, a failed assertion will throw an exception "
        -:  362:    "if exceptions are enabled or exit the program with a non-zero code "
        -:  363:    "otherwise. For use with an external test framework.");
        -:  364:
        -:  365:#if GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  366:GTEST_DEFINE_string_(
        -:  367:    flagfile, testing::internal::StringFromGTestEnv("flagfile", ""),
        -:  368:    "This flag specifies the flagfile to read command-line flags from.");
        -:  369:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  370:
        -:  371:namespace testing {
        -:  372:namespace internal {
        -:  373:
        -:  374:// Generates a random number from [0, range), using a Linear
        -:  375:// Congruential Generator (LCG).  Crashes if 'range' is 0 or greater
        -:  376:// than kMaxRange.
function _ZN7testing8internal6Random8GenerateEj called 0 returned 0% blocks executed 0%
    #####:  377:uint32_t Random::Generate(uint32_t range) {
        -:  378:  // These constants are the same as are used in glibc's rand(3).
        -:  379:  // Use wider types than necessary to prevent unsigned overflow diagnostics.
    #####:  380:  state_ = static_cast<uint32_t>(1103515245ULL * state_ + 12345U) % kMaxRange;
        -:  381:
    #####:  382:  GTEST_CHECK_(range > 0) << "Cannot generate a number in the range [0, 0).";
    %%%%%:  382-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  382-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  382-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:  382-block  3
call   11 never executed
    $$$$$:  382-block  4
call   12 never executed
    $$$$$:  382-block  5
call   13 never executed
    #####:  383:  GTEST_CHECK_(range <= kMaxRange)
    %%%%%:  383-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  383-block  1
call    3 never executed
call    4 never executed
    %%%%%:  383-block  2
call    5 never executed
    $$$$$:  383-block  3
call    6 never executed
    #####:  384:      << "Generation of a number in [0, " << range << ") was requested, "
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  384-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  384-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  385:      << "but this can only generate numbers in [0, " << kMaxRange << ").";
    %%%%%:  385-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  385-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  385-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  385-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -:  386:
        -:  387:  // Converting via modulus introduces a bit of downward bias, but
        -:  388:  // it's simple, and a linear congruential generator isn't too good
        -:  389:  // to begin with.
    #####:  390:  return state_ % range;
    %%%%%:  390-block  0
    %%%%%:  390-block  1
        -:  391:}
        -:  392:
        -:  393:// GTestIsInitialized() returns true if and only if the user has initialized
        -:  394:// Google Test.  Useful for catching the user mistake of not initializing
        -:  395:// Google Test before calling RUN_ALL_TESTS().
function _ZN7testing8internalL18GTestIsInitializedEv called 2 returned 100% blocks executed 100%
        2:  396:static bool GTestIsInitialized() { return GetArgvs().size() > 0; }
        2:  396-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
        -:  397:
        -:  398:// Iterates over a vector of TestSuites, keeping a running sum of the
        -:  399:// results of calling a given int-returning method on each.
        -:  400:// Returns the sum.
function _ZN7testing8internalL20SumOverTestSuiteListERKSt6vectorIPNS_9TestSuiteESaIS3_EEMS2_KFivE called 5 returned 100% blocks executed 91%
        5:  401:static int SumOverTestSuiteList(const std::vector<TestSuite*>& case_list,
        -:  402:                                int (TestSuite::*method)() const) {
        5:  403:  int sum = 0;
       10:  404:  for (size_t i = 0; i < case_list.size(); i++) {
        5:  404-block  0
       10:  404-block  1
call    0 returned 10
branch  1 taken 5 (fallthrough)
branch  2 taken 5
       5*:  405:    sum += (case_list[i]->*method)();
        5:  405-block  0
call    0 returned 5
branch  1 taken 0 (fallthrough)
branch  2 taken 5
    %%%%%:  405-block  1
        5:  405-block  2
        5:  405-block  3
call    3 returned 5
        -:  406:  }
        5:  407:  return sum;
        5:  407-block  0
        -:  408:}
        -:  409:
        -:  410:// Returns true if and only if the test suite passed.
function _ZN7testing8internalL15TestSuitePassedEPKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####:  411:static bool TestSuitePassed(const TestSuite* test_suite) {
    #####:  412:  return test_suite->should_run() && test_suite->Passed();
    %%%%%:  412-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  412-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  412-block  2
    %%%%%:  412-block  3
    %%%%%:  412-block  4
        -:  413:}
        -:  414:
        -:  415:// Returns true if and only if the test suite failed.
function _ZN7testing8internalL15TestSuiteFailedEPKNS_9TestSuiteE called 2 returned 100% blocks executed 88%
        2:  416:static bool TestSuiteFailed(const TestSuite* test_suite) {
       2*:  417:  return test_suite->should_run() && test_suite->Failed();
        2:  417-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
        2:  417-block  1
call    3 returned 2
branch  4 taken 0 (fallthrough)
branch  5 taken 2
    %%%%%:  417-block  2
        2:  417-block  3
        2:  417-block  4
        -:  418:}
        -:  419:
        -:  420:// Returns true if and only if test_suite contains at least one test that
        -:  421:// should run.
function _ZN7testing8internalL18ShouldRunTestSuiteEPKNS_9TestSuiteE called 2 returned 100% blocks executed 100%
        2:  422:static bool ShouldRunTestSuite(const TestSuite* test_suite) {
        2:  423:  return test_suite->should_run();
        2:  423-block  0
call    0 returned 2
        -:  424:}
        -:  425:
        -:  426:// AssertHelper constructor.
function _ZN7testing8internal12AssertHelperC2ENS_14TestPartResult4TypeEPKciS5_ called 0 returned 0% blocks executed 0%
    #####:  427:AssertHelper::AssertHelper(TestPartResult::Type type, const char* file,
    #####:  428:                           int line, const char* message)
    #####:  429:    : data_(new AssertHelperData(type, file, line, message)) {}
    %%%%%:  429-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  429-block  1
    $$$$$:  429-block  2
call    4 never executed
        -:  430:
function _ZN7testing8internal12AssertHelperD2Ev called 0 returned 0% blocks executed 0%
    #####:  431:AssertHelper::~AssertHelper() { delete data_; }
    %%%%%:  431-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  431-block  1
call    2 never executed
call    3 never executed
        -:  432:
        -:  433:// Message assignment, for assertion streaming support.
function _ZNK7testing8internal12AssertHelperaSERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####:  434:void AssertHelper::operator=(const Message& message) const {
    #####:  435:  UnitTest::GetInstance()->AddTestPartResult(
    %%%%%:  435-block  0
call    0 never executed
    #####:  436:      data_->type, data_->file, data_->line,
    %%%%%:  436-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  437:      AppendUserMessage(data_->message, message),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  437-block  0
call    3 never executed
    $$$$$:  437-block  1
call    4 never executed
    $$$$$:  437-block  2
    #####:  438:      UnitTest::GetInstance()->impl()->CurrentOsStackTraceExceptTop(1)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    $$$$$:  438-block  0
call    4 never executed
        -:  439:      // Skips the stack frame for this function itself.
        -:  440:  );  // NOLINT
    #####:  441:}
        -:  442:
        -:  443:namespace {
        -:  444:
        -:  445:// When TEST_P is found without a matching INSTANTIATE_TEST_SUITE_P
        -:  446:// to creates test cases for it, a synthetic test case is
        -:  447:// inserted to report ether an error or a log message.
        -:  448://
        -:  449:// This configuration bit will likely be removed at some point.
        -:  450:constexpr bool kErrorOnUninstantiatedParameterizedTest = true;
        -:  451:constexpr bool kErrorOnUninstantiatedTypeParameterizedTest = true;
        -:  452:
        -:  453:// A test that fails at a given file/line location with a given message.
        -:  454:class FailureTest : public Test {
        -:  455: public:
function _ZN7testing8internal12_GLOBAL__N_111FailureTestC2ERKNS0_12CodeLocationENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####:  456:  explicit FailureTest(const CodeLocation& loc, std::string error_message,
        -:  457:                       bool as_error)
    #####:  458:      : loc_(loc),
    #####:  459:        error_message_(std::move(error_message)),
    #####:  460:        as_error_(as_error) {}
    %%%%%:  460-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  460-block  1
call    4 never executed
call    5 never executed
    $$$$$:  460-block  2
call    6 never executed
        -:  461:
function _ZN7testing8internal12_GLOBAL__N_111FailureTest8TestBodyEv called 0 returned 0% blocks executed 0%
    #####:  462:  void TestBody() override {
    #####:  463:    if (as_error_) {
    %%%%%:  463-block  0
branch  0 never executed
branch  1 never executed
    #####:  464:      AssertHelper(TestPartResult::kNonFatalFailure, loc_.file.c_str(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  464-block  0
call    3 never executed
    $$$$$:  464-block  1
call    4 never executed
    $$$$$:  464-block  2
    #####:  465:                   loc_.line, "") = Message() << error_message_;
    %%%%%:  465-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  465-block  1
call    4 never executed
    %%%%%:  465-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    $$$$$:  465-block  3
call    9 never executed
        -:  466:    } else {
    #####:  467:      std::cout << error_message_ << std::endl;
    %%%%%:  467-block  0
call    0 never executed
call    1 never executed
        -:  468:    }
    #####:  469:  }
    %%%%%:  469-block  0
        -:  470:
        -:  471: private:
        -:  472:  const CodeLocation loc_;
        -:  473:  const std::string error_message_;
        -:  474:  const bool as_error_;
        -:  475:};
        -:  476:
        -:  477:}  // namespace
        -:  478:
function _ZN7testing8internal33GetIgnoredParameterizedTestSuitesB5cxx11Ev called 1 returned 100% blocks executed 100%
        1:  479:std::set<std::string>* GetIgnoredParameterizedTestSuites() {
        1:  480:  return UnitTest::GetInstance()->impl()->ignored_parameterized_test_suites();
        1:  480-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        -:  481:}
        -:  482:
        -:  483:// Add a given test_suit to the list of them allow to go un-instantiated.
function _ZN7testing8internal13MarkAsIgnoredC2EPKc called 0 returned 0% blocks executed 0%
    #####:  484:MarkAsIgnored::MarkAsIgnored(const char* test_suite) {
    #####:  485:  GetIgnoredParameterizedTestSuites()->insert(test_suite);
    %%%%%:  485-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  485-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  485-block  2
call    8 never executed
call    9 never executed
    $$$$$:  485-block  3
call   10 never executed
    $$$$$:  485-block  4
    $$$$$:  485-block  5
call   11 never executed
    #####:  486:}
        -:  487:
        -:  488:// If this parameterized test suite has no instantiations (and that
        -:  489:// has not been marked as okay), emit a test case reporting that.
function _ZN7testing8internal23InsertSyntheticTestCaseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_12CodeLocationEb called 0 returned 0% blocks executed 0%
    #####:  490:void InsertSyntheticTestCase(const std::string& name, CodeLocation location,
        -:  491:                             bool has_test_p) {
    #####:  492:  const auto& ignored = *GetIgnoredParameterizedTestSuites();
    %%%%%:  492-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  493:  if (ignored.find(name) != ignored.end()) return;
    %%%%%:  493-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  493-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  493-block  2
    $$$$$:  493-block  3
        -:  494:
    #####:  495:  const char kMissingInstantiation[] =  //
        -:  496:      " is defined via TEST_P, but never instantiated. None of the test cases "
        -:  497:      "will run. Either no INSTANTIATE_TEST_SUITE_P is provided or the only "
        -:  498:      "ones provided expand to nothing."
        -:  499:      "\n\n"
        -:  500:      "Ideally, TEST_P definitions should only ever be included as part of "
        -:  501:      "binaries that intend to use them. (As opposed to, for example, being "
        -:  502:      "placed in a library that may be linked in to get other utilities.)";
        -:  503:
    #####:  504:  const char kMissingTestCase[] =  //
        -:  505:      " is instantiated via INSTANTIATE_TEST_SUITE_P, but no tests are "
        -:  506:      "defined via TEST_P . No test cases will run."
        -:  507:      "\n\n"
        -:  508:      "Ideally, INSTANTIATE_TEST_SUITE_P should only ever be invoked from "
        -:  509:      "code that always depend on code that provides TEST_P. Failing to do "
        -:  510:      "so is often an indication of dead code, e.g. the last TEST_P was "
        -:  511:      "removed but the rest got left behind.";
        -:  512:
        -:  513:  std::string message =
    #####:  514:      "Parameterized test suite " + name +
    %%%%%:  514-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  514-block  1
    %%%%%:  514-block  2
    %%%%%:  514-block  3
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  514-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    $$$$$:  514-block  5
    $$$$$:  514-block  6
    #####:  515:      (has_test_p ? kMissingInstantiation : kMissingTestCase) +
    %%%%%:  515-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  515-block  1
        -:  516:      "\n\n"
        -:  517:      "To suppress this error for this test suite, insert the following line "
        -:  518:      "(in a non-header) in the namespace it is defined in:"
        -:  519:      "\n\n"
    #####:  520:      "GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(" +
    %%%%%:  520-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  520-block  1
    #####:  521:      name + ");";
    %%%%%:  521-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  521-block  1
call    4 never executed
        -:  522:
    #####:  523:  std::string full_name = "UninstantiatedParameterizedTestSuite<" + name + ">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  523-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  523-block  1
    $$$$$:  523-block  2
call    6 never executed
    #####:  524:  RegisterTest(  //
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  524-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  524-block  1
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:  524-block  2
call   11 never executed
call   12 never executed
    $$$$$:  524-block  3
call   13 never executed
    $$$$$:  524-block  4
        -:  525:      "GoogleTestVerification", full_name.c_str(),
        -:  526:      nullptr,  // No type parameter.
        -:  527:      nullptr,  // No value parameter.
function _ZZN7testing8internal23InsertSyntheticTestCaseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_12CodeLocationEbENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:  528:      location.file.c_str(), location.line, [message, location] {
    #####:  529:        return new FailureTest(location, message,
    #####:  530:                               kErrorOnUninstantiatedParameterizedTest);
    %%%%%:  530-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  530-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  530-block  2
call    7 never executed
    %%%%%:  530-block  3
    $$$$$:  530-block  4
call    8 never executed
    $$$$$:  530-block  5
call    9 never executed
        -:  531:      });
        -:  532:}
        -:  533:
function _ZN7testing8internal34RegisterTypeParameterizedTestSuiteEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####:  534:void RegisterTypeParameterizedTestSuite(const char* test_suite_name,
        -:  535:                                        CodeLocation code_location) {
    #####:  536:  GetUnitTestImpl()->type_parameterized_test_registry().RegisterTestSuite(
    %%%%%:  536-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  536-block  1
call    6 never executed
    $$$$$:  536-block  2
call    7 never executed
        -:  537:      test_suite_name, code_location);
    #####:  538:}
        -:  539:
function _ZN7testing8internal47RegisterTypeParameterizedTestSuiteInstantiationEPKc called 0 returned 0% blocks executed 0%
    #####:  540:void RegisterTypeParameterizedTestSuiteInstantiation(const char* case_name) {
    #####:  541:  GetUnitTestImpl()->type_parameterized_test_registry().RegisterInstantiation(
    %%%%%:  541-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:  542:      case_name);
    #####:  543:}
        -:  544:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry17RegisterTestSuiteEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####:  545:void TypeParameterizedTestSuiteRegistry::RegisterTestSuite(
        -:  546:    const char* test_suite_name, CodeLocation code_location) {
    #####:  547:  suites_.emplace(std::string(test_suite_name),
    %%%%%:  547-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  547-block  1
call    4 never executed
call    5 never executed
    $$$$$:  547-block  2
call    6 never executed
    $$$$$:  547-block  3
    $$$$$:  547-block  4
call    7 never executed
    $$$$$:  547-block  5
    #####:  548:                  TypeParameterizedTestSuiteInfo(code_location));
    %%%%%:  548-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  548-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    $$$$$:  548-block  2
call    9 never executed
    $$$$$:  548-block  3
    $$$$$:  548-block  4
call   10 never executed
    #####:  549:}
        -:  550:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry21RegisterInstantiationEPKc called 0 returned 0% blocks executed 0%
    #####:  551:void TypeParameterizedTestSuiteRegistry::RegisterInstantiation(
        -:  552:    const char* test_suite_name) {
    #####:  553:  auto it = suites_.find(std::string(test_suite_name));
    %%%%%:  553-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  553-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  553-block  2
call    7 never executed
call    8 never executed
    $$$$$:  553-block  3
call    9 never executed
    $$$$$:  553-block  4
    $$$$$:  553-block  5
call   10 never executed
    $$$$$:  553-block  6
    #####:  554:  if (it != suites_.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  555:    it->second.instantiated = true;
    %%%%%:  555-block  0
call    0 never executed
        -:  556:  } else {
    #####:  557:    GTEST_LOG_(ERROR) << "Unknown type parameterized test suit '"
    %%%%%:  557-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  557-block  1
call    3 never executed
    %%%%%:  557-block  2
call    4 never executed
    $$$$$:  557-block  3
call    5 never executed
    $$$$$:  557-block  4
    #####:  558:                      << test_suite_name << "'";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  558-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  558-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  559:  }
    #####:  560:}
    %%%%%:  560-block  0
        -:  561:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry22CheckForInstantiationsEv called 1 returned 100% blocks executed 12%
        1:  562:void TypeParameterizedTestSuiteRegistry::CheckForInstantiations() {
        1:  563:  const auto& ignored = *GetIgnoredParameterizedTestSuites();
        1:  563-block  0
call    0 returned 1
       1*:  564:  for (const auto& testcase : suites_) {
call    0 returned 1
call    1 returned 1
        1:  564-block  0
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  564-block  1
call    5 never executed
    %%%%%:  564-block  2
call    6 never executed
    #####:  565:    if (testcase.second.instantiated) continue;
branch  0 never executed
branch  1 never executed
    %%%%%:  565-block  0
    %%%%%:  565-block  1
    #####:  566:    if (ignored.find(testcase.first) != ignored.end()) continue;
    %%%%%:  566-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  566-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  566-block  2
    $$$$$:  566-block  3
        -:  567:
        -:  568:    std::string message =
    #####:  569:        "Type parameterized test suite " + testcase.first +
    %%%%%:  569-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  569-block  1
    $$$$$:  569-block  2
        -:  570:        " is defined via REGISTER_TYPED_TEST_SUITE_P, but never instantiated "
        -:  571:        "via INSTANTIATE_TYPED_TEST_SUITE_P. None of the test cases will run."
        -:  572:        "\n\n"
        -:  573:        "Ideally, TYPED_TEST_P definitions should only ever be included as "
        -:  574:        "part of binaries that intend to use them. (As opposed to, for "
        -:  575:        "example, being placed in a library that may be linked in to get other "
        -:  576:        "utilities.)"
        -:  577:        "\n\n"
        -:  578:        "To suppress this error for this test suite, insert the following line "
        -:  579:        "(in a non-header) in the namespace it is defined in:"
        -:  580:        "\n\n"
    #####:  581:        "GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(" +
    %%%%%:  581-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  581-block  1
    #####:  582:        testcase.first + ");";
    %%%%%:  582-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  582-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$:  582-block  2
call    7 never executed
        -:  583:
        -:  584:    std::string full_name =
    #####:  585:        "UninstantiatedTypeParameterizedTestSuite<" + testcase.first + ">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  585-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  585-block  1
    $$$$$:  585-block  2
call    6 never executed
    #####:  586:    RegisterTest(  //
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  586-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  586-block  1
call   10 never executed
call   11 never executed
    $$$$$:  586-block  2
call   12 never executed
    $$$$$:  586-block  3
        -:  587:        "GoogleTestVerification", full_name.c_str(),
        -:  588:        nullptr,  // No type parameter.
        -:  589:        nullptr,  // No value parameter.
        -:  590:        testcase.second.code_location.file.c_str(),
function _ZZN7testing8internal34TypeParameterizedTestSuiteRegistry22CheckForInstantiationsEvENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:  591:        testcase.second.code_location.line, [message, testcase] {
    %%%%%:  591-block  0
call    0 never executed
    #####:  592:          return new FailureTest(testcase.second.code_location, message,
    #####:  593:                                 kErrorOnUninstantiatedTypeParameterizedTest);
    %%%%%:  593-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  593-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  593-block  2
call    7 never executed
    %%%%%:  593-block  3
    $$$$$:  593-block  4
call    8 never executed
    $$$$$:  593-block  5
call    9 never executed
        -:  594:        });
        -:  595:  }
        1:  596:}
        1:  596-block  0
        -:  597:
        -:  598:// A copy of all command line arguments.  Set by InitGoogleTest().
        -:  599:static ::std::vector<std::string> g_argvs;
        -:  600:
function _ZN7testing8internal8GetArgvsB5cxx11Ev called 2 returned 100% blocks executed 100%
        2:  601:::std::vector<std::string> GetArgvs() {
        -:  602:#if defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  603:  // GTEST_CUSTOM_GET_ARGVS_() may return a container of std::string or
        -:  604:  // ::string. This code converts it to the appropriate type.
        -:  605:  const auto& custom = GTEST_CUSTOM_GET_ARGVS_();
        -:  606:  return ::std::vector<std::string>(custom.begin(), custom.end());
        -:  607:#else   // defined(GTEST_CUSTOM_GET_ARGVS_)
        2:  608:  return g_argvs;
        2:  608-block  0
call    0 returned 2
        -:  609:#endif  // defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  610:}
        -:  611:
        -:  612:// Returns the current application's name, removing directory path if that
        -:  613:// is present.
function _ZN7testing8internal24GetCurrentExecutableNameEv called 0 returned 0% blocks executed 0%
    #####:  614:FilePath GetCurrentExecutableName() {
    #####:  615:  FilePath result;
    %%%%%:  615-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  615-block  1
call    3 never executed
    $$$$$:  615-block  2
call    4 never executed
        -:  616:
        -:  617:#if GTEST_OS_WINDOWS || GTEST_OS_OS2
        -:  618:  result.Set(FilePath(GetArgvs()[0]).RemoveExtension("exe"));
        -:  619:#else
    #####:  620:  result.Set(FilePath(GetArgvs()[0]));
    %%%%%:  620-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  620-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  620-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  620-block  3
call   10 never executed
call   11 never executed
    $$$$$:  620-block  4
call   12 never executed
    $$$$$:  620-block  5
    $$$$$:  620-block  6
call   13 never executed
    $$$$$:  620-block  7
        -:  621:#endif  // GTEST_OS_WINDOWS
        -:  622:
    #####:  623:  return result.RemoveDirectoryName();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  623-block  0
        -:  624:}
        -:  625:
        -:  626:// Functions for processing the gtest_output flag.
        -:  627:
        -:  628:// Returns the output format, or "" for normal printed output.
function _ZN7testing8internal15UnitTestOptions15GetOutputFormatB5cxx11Ev called 1 returned 100% blocks executed 48%
        1:  629:std::string UnitTestOptions::GetOutputFormat() {
        1:  630:  std::string s = GTEST_FLAG_GET(output);
        1:  630-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:  630-block  1
call    3 never executed
        1:  631:  const char* const gtest_output_flag = s.c_str();
        1:  631-block  0
call    0 returned 1
        1:  632:  const char* const colon = strchr(gtest_output_flag, ':');
        -:  633:  return (colon == nullptr)
        -:  634:             ? std::string(gtest_output_flag)
        -:  635:             : std::string(gtest_output_flag,
       2*:  636:                           static_cast<size_t>(colon - gtest_output_flag));
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  636-block  0
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    %%%%%:  636-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        1:  636-block  2
branch 10 taken 0 (fallthrough)
branch 11 taken 1
    %%%%%:  636-block  3
call   12 never executed
        1:  636-block  4
branch 13 taken 1 (fallthrough)
branch 14 taken 0
        1:  636-block  5
call   15 returned 1
        1:  636-block  6
call   16 returned 1
        1:  636-block  7
    $$$$$:  636-block  8
branch 17 never executed
branch 18 never executed
    $$$$$:  636-block  9
call   19 never executed
    $$$$$:  636-block 10
    $$$$$:  636-block 11
branch 20 never executed
branch 21 never executed
    $$$$$:  636-block 12
call   22 never executed
    $$$$$:  636-block 13
        -:  637:}
        -:  638:
        -:  639:// Returns the name of the requested output file, or the default if none
        -:  640:// was explicitly specified.
function _ZN7testing8internal15UnitTestOptions27GetAbsolutePathToOutputFileB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  641:std::string UnitTestOptions::GetAbsolutePathToOutputFile() {
    #####:  642:  std::string s = GTEST_FLAG_GET(output);
    %%%%%:  642-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  642-block  1
call    4 never executed
    #####:  643:  const char* const gtest_output_flag = s.c_str();
    %%%%%:  643-block  0
call    0 never executed
        -:  644:
    #####:  645:  std::string format = GetOutputFormat();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  645-block  0
call    3 never executed
    $$$$$:  645-block  1
call    4 never executed
    #####:  646:  if (format.empty()) format = std::string(kDefaultOutputFormat);
    %%%%%:  646-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  646-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  646-block  2
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  646-block  3
call   10 never executed
    $$$$$:  646-block  4
        -:  647:
    #####:  648:  const char* const colon = strchr(gtest_output_flag, ':');
    #####:  649:  if (colon == nullptr)
    %%%%%:  649-block  0
branch  0 never executed
branch  1 never executed
    #####:  650:    return internal::FilePath::MakeFileName(
    %%%%%:  650-block  0
call    0 never executed
    %%%%%:  650-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  650-block  2
call    4 never executed
    $$$$$:  650-block  3
call    5 never executed
    $$$$$:  650-block  4
    #####:  651:               internal::FilePath(
    %%%%%:  651-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  651-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  651-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$:  651-block  3
call   14 never executed
    $$$$$:  651-block  4
    $$$$$:  651-block  5
call   15 never executed
    $$$$$:  651-block  6
    $$$$$:  651-block  7
call   16 never executed
    $$$$$:  651-block  8
        -:  652:                   UnitTest::GetInstance()->original_working_dir()),
    #####:  653:               internal::FilePath(kDefaultOutputFile), 0, format.c_str())
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  653-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  653-block  1
call   10 never executed
    $$$$$:  653-block  2
    $$$$$:  653-block  3
call   11 never executed
    $$$$$:  653-block  4
    $$$$$:  653-block  5
call   12 never executed
    $$$$$:  653-block  6
    #####:  654:        .string();
    %%%%%:  654-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  655:
    #####:  656:  internal::FilePath output_name(colon + 1);
    %%%%%:  656-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  656-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    %%%%%:  656-block  2
call    8 never executed
    $$$$$:  656-block  3
    $$$$$:  656-block  4
    $$$$$:  656-block  5
call    9 never executed
    #####:  657:  if (!output_name.IsAbsolutePath())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  658:    output_name = internal::FilePath::ConcatPaths(
    %%%%%:  658-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  658-block  1
call    3 never executed
    $$$$$:  658-block  2
call    4 never executed
    $$$$$:  658-block  3
    #####:  659:        internal::FilePath(UnitTest::GetInstance()->original_working_dir()),
    %%%%%:  659-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  659-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  659-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$:  659-block  3
call   14 never executed
    $$$$$:  659-block  4
    $$$$$:  659-block  5
call   15 never executed
    $$$$$:  659-block  6
    $$$$$:  659-block  7
call   16 never executed
    $$$$$:  659-block  8
    #####:  660:        internal::FilePath(colon + 1));
    %%%%%:  660-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  660-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  660-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:  660-block  3
call   13 never executed
    $$$$$:  660-block  4
    $$$$$:  660-block  5
call   14 never executed
    $$$$$:  660-block  6
    $$$$$:  660-block  7
call   15 never executed
    $$$$$:  660-block  8
        -:  661:
    #####:  662:  if (!output_name.IsDirectory()) return output_name.string();
    %%%%%:  662-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  662-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -:  663:
        -:  664:  internal::FilePath result(internal::FilePath::GenerateUniqueFileName(
    #####:  665:      output_name, internal::GetCurrentExecutableName(),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  665-block  0
    #####:  666:      GetOutputFormat().c_str()));
    %%%%%:  666-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  666-block  1
call    3 never executed
    %%%%%:  666-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  666-block  3
call    7 never executed
    $$$$$:  666-block  4
    $$$$$:  666-block  5
call    8 never executed
    #####:  667:  return result.string();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  668:}
        -:  669:
        -:  670:// Returns true if and only if the wildcard pattern matches the string. Each
        -:  671:// pattern consists of regular characters, single-character wildcards (?), and
        -:  672:// multi-character wildcards (*).
        -:  673://
        -:  674:// This function implements a linear-time string globbing algorithm based on
        -:  675:// https://research.swtch.com/glob.
function _ZN7testing8internalL20PatternMatchesStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcSA_ called 27 returned 100% blocks executed 87%
       27:  676:static bool PatternMatchesString(const std::string& name_str,
        -:  677:                                 const char* pattern, const char* pattern_end) {
       27:  678:  const char* name = name_str.c_str();
       27:  678-block  0
call    0 returned 27
       27:  679:  const char* const name_begin = name;
       27:  680:  const char* const name_end = name + name_str.size();
call    0 returned 27
        -:  681:
       27:  682:  const char* pattern_next = pattern;
       27:  683:  const char* name_next = name;
        -:  684:
      643:  685:  while (pattern < pattern_end || name < name_end) {
      643:  685-block  0
branch  0 taken 144 (fallthrough)
branch  1 taken 499
      144:  685-block  1
branch  2 taken 139 (fallthrough)
branch  3 taken 5
      616:  685-block  2
      638:  686:    if (pattern < pattern_end) {
      638:  686-block  0
branch  0 taken 499 (fallthrough)
branch  1 taken 139
      499:  687:      switch (*pattern) {
      499:  687-block  0
branch  0 taken 183
branch  1 taken 0
branch  2 taken 316
      183:  688:        default:  // Match an ordinary character.
      183:  689:          if (name < name_end && *name == *pattern) {
      183:  689-block  0
branch  0 taken 171 (fallthrough)
branch  1 taken 12
      171:  689-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 170
        1:  690:            ++pattern;
        1:  691:            ++name;
        1:  692:            continue;
        1:  692-block  0
        -:  693:          }
      182:  694:          break;
      182:  694-block  0
    #####:  695:        case '?':  // Match any single character.
    #####:  696:          if (name < name_end) {
    %%%%%:  696-block  0
branch  0 never executed
branch  1 never executed
    #####:  697:            ++pattern;
    #####:  698:            ++name;
    #####:  699:            continue;
    %%%%%:  699-block  0
        -:  700:          }
    #####:  701:          break;
    %%%%%:  701-block  0
      316:  702:        case '*':
        -:  703:          // Match zero or more characters. Start by skipping over the wildcard
        -:  704:          // and matching zero characters from name. If that fails, restart and
        -:  705:          // match one more character than the last attempt.
      316:  706:          pattern_next = pattern;
      316:  707:          name_next = name + 1;
      316:  708:          ++pattern;
      316:  709:          continue;
      316:  709-block  0
        -:  710:      }
        -:  711:    }
        -:  712:    // Failed to match a character. Restart if possible.
      321:  713:    if (name_begin < name_next && name_next <= name_end) {
      321:  713-block  0
branch  0 taken 311 (fallthrough)
branch  1 taken 10
      311:  713-block  1
branch  2 taken 299 (fallthrough)
branch  3 taken 12
      299:  714:      pattern = pattern_next;
      299:  715:      name = name_next;
      299:  716:      continue;
      299:  716-block  0
        -:  717:    }
       22:  718:    return false;
       22:  718-block  0
        -:  719:  }
        5:  720:  return true;
        5:  720-block  0
        -:  721:}
        -:  722:
        -:  723:namespace {
        -:  724:
function _ZN7testing8internal12_GLOBAL__N_113IsGlobPatternERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 5 returned 100% blocks executed 100%
        5:  725:bool IsGlobPattern(const std::string& pattern) {
       10:  726:  return std::any_of(pattern.begin(), pattern.end(),
        5:  726-block  0
call    0 returned 5
call    1 returned 5
call    2 returned 5
branch  3 taken 5 (fallthrough)
branch  4 taken 0 (throw)
        5:  726-block  1
function _ZZN7testing8internal12_GLOBAL__N_113IsGlobPatternERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlcE_clEc called 14 returned 100% blocks executed 100%
       24:  727:                     [](const char c) { return c == '?' || c == '*'; });
        5:  727-block  0
        5:  727-block  1
       14:  727-block  2
branch  0 taken 14 (fallthrough)
branch  1 taken 0
       14:  727-block  3
branch  2 taken 5 (fallthrough)
branch  3 taken 9
        5:  727-block  4
        9:  727-block  5
       14:  727-block  6
        -:  728:}
        -:  729:
        -:  730:class UnitTestFilter {
        -:  731: public:
function _ZN7testing8internal12_GLOBAL__N_114UnitTestFilterC2Ev called 2 returned 100% blocks executed 100%
        2:  732:  UnitTestFilter() = default;
        2:  732-block  0
call    0 returned 2
call    1 returned 2
        -:  733:
        -:  734:  // Constructs a filter from a string of patterns separated by `:`.
function _ZN7testing8internal12_GLOBAL__N_114UnitTestFilterC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 3 returned 100% blocks executed 78%
        3:  735:  explicit UnitTestFilter(const std::string& filter) {
        3:  735-block  0
call    0 returned 3
call    1 returned 3
    $$$$$:  735-block  1
call    2 never executed
    $$$$$:  735-block  2
call    3 never executed
        -:  736:    // By design "" filter matches "" string.
        6:  737:    std::vector<std::string> all_patterns;
call    0 returned 3
        3:  737-block  0
call    1 returned 3
    $$$$$:  737-block  1
call    2 never executed
        3:  738:    SplitString(filter, ':', &all_patterns);
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -:  739:    const auto exact_match_patterns_begin = std::partition(
        3:  740:        all_patterns.begin(), all_patterns.end(), &IsGlobPattern);
        3:  740-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
branch  3 taken 3 (fallthrough)
branch  4 taken 0 (throw)
        -:  741:
        6:  742:    glob_patterns_.reserve(static_cast<size_t>(
        3:  743:        std::distance(all_patterns.begin(), exact_match_patterns_begin)));
        3:  743-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:  743-block  1
call    4 returned 3
branch  5 taken 3 (fallthrough)
branch  6 taken 0 (throw)
        -:  744:    std::move(all_patterns.begin(), exact_match_patterns_begin,
        3:  745:              std::inserter(glob_patterns_, glob_patterns_.begin()));
        3:  745-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:  745-block  1
call    4 returned 3
call    5 returned 3
branch  6 taken 3 (fallthrough)
branch  7 taken 0 (throw)
        -:  746:    std::move(
        -:  747:        exact_match_patterns_begin, all_patterns.end(),
        3:  748:        std::inserter(exact_match_patterns_, exact_match_patterns_.begin()));
        3:  748-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:  748-block  1
call    4 returned 3
call    5 returned 3
branch  6 taken 3 (fallthrough)
branch  7 taken 0 (throw)
        3:  749:  }
        -:  750:
        -:  751:  // Returns true if and only if name matches at least one of the patterns in
        -:  752:  // the filter.
function _ZNK7testing8internal12_GLOBAL__N_114UnitTestFilter11MatchesNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 21 returned 100% blocks executed 100%
       21:  753:  bool MatchesName(const std::string& name) const {
       42:  754:    return exact_match_patterns_.count(name) > 0 ||
       21:  754-block  0
call    0 returned 21
branch  1 taken 21 (fallthrough)
branch  2 taken 0
        5:  754-block  1
       16:  754-block  2
       21:  755:           std::any_of(glob_patterns_.begin(), glob_patterns_.end(),
       21:  755-block  0
call    0 returned 21
call    1 returned 21
call    2 returned 21
branch  3 taken 5 (fallthrough)
branch  4 taken 16
function _ZZNK7testing8internal12_GLOBAL__N_114UnitTestFilter11MatchesNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlSA_E_clESA_ called 27 returned 100% blocks executed 100%
       54:  756:                       [&name](const std::string& pattern) {
       27:  757:                         return PatternMatchesString(
call    0 returned 27
call    1 returned 27
        -:  758:                             name, pattern.c_str(),
       54:  759:                             pattern.c_str() + pattern.size());
       27:  759-block  0
call    0 returned 27
call    1 returned 27
       21:  760:                       });
       21:  760-block  0
        -:  761:  }
        -:  762:
        -:  763: private:
        -:  764:  std::vector<std::string> glob_patterns_;
        -:  765:  std::unordered_set<std::string> exact_match_patterns_;
        -:  766:};
        -:  767:
        -:  768:class PositiveAndNegativeUnitTestFilter {
        -:  769: public:
        -:  770:  // Constructs a positive and a negative filter from a string. The string
        -:  771:  // contains a positive filter optionally followed by a '-' character and a
        -:  772:  // negative filter. In case only a negative filter is provided the positive
        -:  773:  // filter will be assumed "*".
        -:  774:  // A filter is a list of patterns separated by ':'.
function _ZN7testing8internal12_GLOBAL__N_133PositiveAndNegativeUnitTestFilterC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 23%
        1:  775:  explicit PositiveAndNegativeUnitTestFilter(const std::string& filter) {
        1:  775-block  0
call    0 returned 1
call    1 returned 1
    $$$$$:  775-block  1
call    2 never executed
    $$$$$:  775-block  2
call    3 never executed
        2:  776:    std::vector<std::string> positive_and_negative_filters;
call    0 returned 1
        1:  776-block  0
call    1 returned 1
    $$$$$:  776-block  1
call    2 never executed
        -:  777:
        -:  778:    // NOTE: `SplitString` always returns a non-empty container.
        1:  779:    SplitString(filter, '-', &positive_and_negative_filters);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  780:    const auto& positive_filter = positive_and_negative_filters.front();
        1:  780-block  0
call    0 returned 1
        -:  781:
        1:  782:    if (positive_and_negative_filters.size() > 1) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  783:      positive_filter_ = UnitTestFilter(
    %%%%%:  783-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####:  784:          positive_filter.empty() ? kUniversalFilter : positive_filter);
    %%%%%:  784-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  784-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  784-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  784-block  3
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:  784-block  4
call   14 never executed
    $$$$$:  784-block  5
call   15 never executed
    $$$$$:  784-block  6
    $$$$$:  784-block  7
branch 16 never executed
branch 17 never executed
    $$$$$:  784-block  8
call   18 never executed
    $$$$$:  784-block  9
        -:  785:
        -:  786:      // TODO(b/214626361): Fail on multiple '-' characters
        -:  787:      // For the moment to preserve old behavior we concatenate the rest of the
        -:  788:      // string parts with `-` as separator to generate the negative filter.
    #####:  789:      auto negative_filter_string = positive_and_negative_filters[1];
    %%%%%:  789-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  789-block  1
call    4 never executed
    #####:  790:      for (std::size_t i = 2; i < positive_and_negative_filters.size(); i++)
    %%%%%:  790-block  0
    %%%%%:  790-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  791:        negative_filter_string =
    #####:  792:            negative_filter_string + '-' + positive_and_negative_filters[i];
    %%%%%:  792-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  792-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  792-block  2
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  792-block  3
call   10 never executed
    $$$$$:  792-block  4
    #####:  793:      negative_filter_ = UnitTestFilter(negative_filter_string);
    %%%%%:  793-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  793-block  1
call    3 never executed
call    4 never executed
call    5 never executed
        -:  794:    } else {
        -:  795:      // In case we don't have a negative filter and positive filter is ""
        -:  796:      // we do not use kUniversalFilter by design as opposed to when we have a
        -:  797:      // negative filter.
        1:  798:      positive_filter_ = UnitTestFilter(positive_filter);
        1:  798-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  798-block  1
call    3 returned 1
call    4 returned 1
        -:  799:    }
        1:  800:  }
        -:  801:
        -:  802:  // Returns true if and only if test name (this is generated by appending test
        -:  803:  // suit name and test name via a '.' character) matches the positive filter
        -:  804:  // and does not match the negative filter.
function _ZNK7testing8internal12_GLOBAL__N_133PositiveAndNegativeUnitTestFilter11MatchesTestERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ called 5 returned 100% blocks executed 64%
        5:  805:  bool MatchesTest(const std::string& test_suite_name,
        -:  806:                   const std::string& test_name) const {
        5:  807:    return MatchesName(test_suite_name + "." + test_name);
        5:  807-block  0
call    0 returned 5
call    1 returned 5
branch  2 taken 5 (fallthrough)
branch  3 taken 0 (throw)
        5:  807-block  1
call    4 returned 5
branch  5 taken 5 (fallthrough)
branch  6 taken 0 (throw)
        5:  807-block  2
        5:  807-block  3
call    7 returned 5
call    8 returned 5
        5:  807-block  4
    $$$$$:  807-block  5
call    9 never executed
    $$$$$:  807-block  6
    $$$$$:  807-block  7
call   10 never executed
        -:  808:  }
        -:  809:
        -:  810:  // Returns true if and only if name matches the positive filter and does not
        -:  811:  // match the negative filter.
function _ZNK7testing8internal12_GLOBAL__N_133PositiveAndNegativeUnitTestFilter11MatchesNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 5 returned 100% blocks executed 88%
        5:  812:  bool MatchesName(const std::string& name) const {
      10*:  813:    return positive_filter_.MatchesName(name) &&
        5:  813-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0
        5:  813-block  1
    %%%%%:  813-block  2
       10:  814:           !negative_filter_.MatchesName(name);
        5:  814-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0
        5:  814-block  1
        -:  815:  }
        -:  816:
        -:  817: private:
        -:  818:  UnitTestFilter positive_filter_;
        -:  819:  UnitTestFilter negative_filter_;
        -:  820:};
        -:  821:}  // namespace
        -:  822:
function _ZN7testing8internal15UnitTestOptions13MatchesFilterERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKc called 0 returned 0% blocks executed 0%
    #####:  823:bool UnitTestOptions::MatchesFilter(const std::string& name_str,
        -:  824:                                    const char* filter) {
    #####:  825:  return UnitTestFilter(filter).MatchesName(name_str);
    %%%%%:  825-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  825-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  825-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  825-block  3
    %%%%%:  825-block  4
call   10 never executed
call   11 never executed
call   12 never executed
    %%%%%:  825-block  5
    $$$$$:  825-block  6
call   13 never executed
    $$$$$:  825-block  7
    $$$$$:  825-block  8
call   14 never executed
    $$$$$:  825-block  9
    $$$$$:  825-block 10
call   15 never executed
        -:  826:}
        -:  827:
        -:  828:// Returns true if and only if the user-specified filter matches the test
        -:  829:// suite name and the test name.
function _ZN7testing8internal15UnitTestOptions17FilterMatchesTestERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####:  830:bool UnitTestOptions::FilterMatchesTest(const std::string& test_suite_name,
        -:  831:                                        const std::string& test_name) {
        -:  832:  // Split --gtest_filter at '-', if there is one, to separate into
        -:  833:  // positive filter and negative filter portions
    #####:  834:  return PositiveAndNegativeUnitTestFilter(GTEST_FLAG_GET(filter))
    %%%%%:  834-block  0
call    0 never executed
    %%%%%:  834-block  1
call    1 never executed
    $$$$$:  834-block  2
call    2 never executed
    #####:  835:      .MatchesTest(test_suite_name, test_name);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  835-block  0
    %%%%%:  835-block  1
        -:  836:}
        -:  837:
        -:  838:#if GTEST_HAS_SEH
        -:  839:// Returns EXCEPTION_EXECUTE_HANDLER if Google Test should handle the
        -:  840:// given SEH exception, or EXCEPTION_CONTINUE_SEARCH otherwise.
        -:  841:// This function is useful as an __except condition.
        -:  842:int UnitTestOptions::GTestShouldProcessSEH(DWORD exception_code) {
        -:  843:  // Google Test should handle a SEH exception if:
        -:  844:  //   1. the user wants it to, AND
        -:  845:  //   2. this is not a breakpoint exception, AND
        -:  846:  //   3. this is not a C++ exception (VC++ implements them via SEH,
        -:  847:  //      apparently).
        -:  848:  //
        -:  849:  // SEH exception code for C++ exceptions.
        -:  850:  // (see http://support.microsoft.com/kb/185294 for more information).
        -:  851:  const DWORD kCxxExceptionCode = 0xe06d7363;
        -:  852:
        -:  853:  bool should_handle = true;
        -:  854:
        -:  855:  if (!GTEST_FLAG_GET(catch_exceptions))
        -:  856:    should_handle = false;
        -:  857:  else if (exception_code == EXCEPTION_BREAKPOINT)
        -:  858:    should_handle = false;
        -:  859:  else if (exception_code == kCxxExceptionCode)
        -:  860:    should_handle = false;
        -:  861:
        -:  862:  return should_handle ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH;
        -:  863:}
        -:  864:#endif  // GTEST_HAS_SEH
        -:  865:
        -:  866:}  // namespace internal
        -:  867:
        -:  868:// The c'tor sets this object as the test part result reporter used by
        -:  869:// Google Test.  The 'result' parameter specifies where to report the
        -:  870:// results. Intercepts only failures from the current thread.
function _ZN7testing32ScopedFakeTestPartResultReporterC2EPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  871:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  872:    TestPartResultArray* result)
    #####:  873:    : intercept_mode_(INTERCEPT_ONLY_CURRENT_THREAD), result_(result) {
    %%%%%:  873-block  0
call    0 never executed
    $$$$$:  873-block  1
call    1 never executed
    #####:  874:  Init();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  875:}
    %%%%%:  875-block  0
        -:  876:
        -:  877:// The c'tor sets this object as the test part result reporter used by
        -:  878:// Google Test.  The 'result' parameter specifies where to report the
        -:  879:// results.
function _ZN7testing32ScopedFakeTestPartResultReporterC2ENS0_13InterceptModeEPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  880:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  881:    InterceptMode intercept_mode, TestPartResultArray* result)
    #####:  882:    : intercept_mode_(intercept_mode), result_(result) {
    %%%%%:  882-block  0
call    0 never executed
    $$$$$:  882-block  1
call    1 never executed
    #####:  883:  Init();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  884:}
    %%%%%:  884-block  0
        -:  885:
function _ZN7testing32ScopedFakeTestPartResultReporter4InitEv called 0 returned 0% blocks executed 0%
    #####:  886:void ScopedFakeTestPartResultReporter::Init() {
    #####:  887:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%:  887-block  0
call    0 never executed
    #####:  888:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed
branch  1 never executed
    #####:  889:    old_reporter_ = impl->GetGlobalTestPartResultReporter();
    %%%%%:  889-block  0
call    0 never executed
    #####:  890:    impl->SetGlobalTestPartResultReporter(this);
call    0 never executed
        -:  891:  } else {
    #####:  892:    old_reporter_ = impl->GetTestPartResultReporterForCurrentThread();
    %%%%%:  892-block  0
call    0 never executed
    #####:  893:    impl->SetTestPartResultReporterForCurrentThread(this);
call    0 never executed
        -:  894:  }
    #####:  895:}
        -:  896:
        -:  897:// The d'tor restores the test part result reporter used by Google Test
        -:  898:// before.
    #####:  899:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    #####:  900:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    #####:  901:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
    #####:  902:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -:  903:  } else {
    #####:  904:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -:  905:  }
    #####:  906:}
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD0Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD0Ev called 0 returned 0% blocks executed 0%
    #####:  899:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
        -:  900:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        -:  901:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
        -:  902:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -:  903:  } else {
        -:  904:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -:  905:  }
    #####:  906:}
    %%%%%:  906-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD2Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD2Ev called 0 returned 0% blocks executed 0%
    #####:  899:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    %%%%%:  899-block  0
call    0 never executed
    #####:  900:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%:  900-block  0
call    0 never executed
    #####:  901:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed
branch  1 never executed
    #####:  902:    impl->SetGlobalTestPartResultReporter(old_reporter_);
    %%%%%:  902-block  0
call    0 never executed
        -:  903:  } else {
    #####:  904:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
    %%%%%:  904-block  0
call    0 never executed
        -:  905:  }
    #####:  906:}
------------------
        -:  907:
        -:  908:// Increments the test part result count and remembers the result.
        -:  909:// This method is from the TestPartResultReporterInterface interface.
function _ZN7testing32ScopedFakeTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:  910:void ScopedFakeTestPartResultReporter::ReportTestPartResult(
        -:  911:    const TestPartResult& result) {
    #####:  912:  result_->Append(result);
    %%%%%:  912-block  0
call    0 never executed
    #####:  913:}
        -:  914:
        -:  915:namespace internal {
        -:  916:
        -:  917:// Returns the type ID of ::testing::Test.  We should always call this
        -:  918:// instead of GetTypeId< ::testing::Test>() to get the type ID of
        -:  919:// testing::Test.  This is to work around a suspected linker bug when
        -:  920:// using Google Test as a framework on Mac OS X.  The bug causes
        -:  921:// GetTypeId< ::testing::Test>() to return different values depending
        -:  922:// on whether the call is from the Google Test framework itself or
        -:  923:// from user test code.  GetTestTypeId() is guaranteed to always
        -:  924:// return the same value, as it always calls GetTypeId<>() from the
        -:  925:// gtest.cc, which is within the Google Test framework.
function _ZN7testing8internal13GetTestTypeIdEv called 6 returned 100% blocks executed 100%
        6:  926:TypeId GetTestTypeId() { return GetTypeId<Test>(); }
        6:  926-block  0
call    0 returned 6
        -:  927:
        -:  928:// The value of GetTestTypeId() as seen from within the Google Test
        -:  929:// library.  This is solely for testing GetTestTypeId().
        -:  930:extern const TypeId kTestTypeIdInGoogleTest = GetTestTypeId();
        -:  931:
        -:  932:// This predicate-formatter checks that 'results' contains a test part
        -:  933:// failure of the given type and that the failure message contains the
        -:  934:// given substring.
function _ZN7testing8internalL13HasOneFailureEPKcS2_S2_RKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  935:static AssertionResult HasOneFailure(const char* /* results_expr */,
        -:  936:                                     const char* /* type_expr */,
        -:  937:                                     const char* /* substr_expr */,
        -:  938:                                     const TestPartResultArray& results,
        -:  939:                                     TestPartResult::Type type,
        -:  940:                                     const std::string& substr) {
        -:  941:  const std::string expected(type == TestPartResult::kFatalFailure
        -:  942:                                 ? "1 fatal failure"
    #####:  943:                                 : "1 non-fatal failure");
    %%%%%:  943-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  943-block  1
    %%%%%:  943-block  2
    %%%%%:  943-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$:  943-block  4
    $$$$$:  943-block  5
call    7 never executed
    #####:  944:  Message msg;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  944-block  0
call    3 never executed
    $$$$$:  944-block  1
call    4 never executed
    #####:  945:  if (results.size() != 1) {
    %%%%%:  945-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  946:    msg << "Expected: " << expected << "\n"
    %%%%%:  946-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  946-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  946-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  947:        << "  Actual: " << results.size() << " failures";
    %%%%%:  947-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  947-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  947-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$:  947-block  3
    #####:  948:    for (int i = 0; i < results.size(); i++) {
    %%%%%:  948-block  0
    %%%%%:  948-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  948-block  2
    #####:  949:      msg << "\n" << results.GetTestPartResult(i);
    %%%%%:  949-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  949-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  949-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  950:    }
    #####:  951:    return AssertionFailure() << msg;
    %%%%%:  951-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  951-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  951-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  951-block  3
call    9 never executed
    $$$$$:  951-block  4
call   10 never executed
    $$$$$:  951-block  5
        -:  952:  }
        -:  953:
    #####:  954:  const TestPartResult& r = results.GetTestPartResult(0);
    %%%%%:  954-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  955:  if (r.type() != type) {
    %%%%%:  955-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  956:    return AssertionFailure() << "Expected: " << expected << "\n"
    %%%%%:  956-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  956-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  956-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  956-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  956-block  4
call   12 never executed
    $$$$$:  956-block  5
call   13 never executed
    $$$$$:  956-block  6
    #####:  957:                              << "  Actual:\n"
    %%%%%:  957-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  958:                              << r;
    %%%%%:  958-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  958-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  959:  }
        -:  960:
    #####:  961:  if (strstr(r.message(), substr.c_str()) == nullptr) {
    %%%%%:  961-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  962:    return AssertionFailure()
    %%%%%:  962-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  962-block  1
call    3 never executed
    $$$$$:  962-block  2
call    4 never executed
    $$$$$:  962-block  3
    #####:  963:           << "Expected: " << expected << " containing \"" << substr << "\"\n"
    %%%%%:  963-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  963-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  963-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  963-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  963-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####:  964:           << "  Actual:\n"
    %%%%%:  964-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  965:           << r;
    %%%%%:  965-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  965-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  966:  }
        -:  967:
    #####:  968:  return AssertionSuccess();
    %%%%%:  968-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  969:}
        -:  970:
        -:  971:// The constructor of SingleFailureChecker remembers where to look up
        -:  972:// test part results, what type of failure we expect, and what
        -:  973:// substring the failure message should contain.
function _ZN7testing8internal20SingleFailureCheckerC2EPKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  974:SingleFailureChecker::SingleFailureChecker(const TestPartResultArray* results,
        -:  975:                                           TestPartResult::Type type,
    #####:  976:                                           const std::string& substr)
    #####:  977:    : results_(results), type_(type), substr_(substr) {}
    %%%%%:  977-block  0
call    0 never executed
        -:  978:
        -:  979:// The destructor of SingleFailureChecker verifies that the given
        -:  980:// TestPartResultArray contains exactly one failure that has the given
        -:  981:// type and contains the given substring.  If that's not the case, a
        -:  982:// non-fatal failure will be generated.
function _ZN7testing8internal20SingleFailureCheckerD2Ev called 0 returned 0% blocks executed 0%
    #####:  983:SingleFailureChecker::~SingleFailureChecker() {
call    0 never executed
    #####:  984:  EXPECT_PRED_FORMAT3(HasOneFailure, *results_, type_, substr_);
    %%%%%:  984-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  984-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    %%%%%:  984-block  2
call   10 never executed
    #####:  985:}
        -:  986:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporterC2EPNS0_12UnitTestImplE called 1 returned 100% blocks executed 100%
        1:  987:DefaultGlobalTestPartResultReporter::DefaultGlobalTestPartResultReporter(
        1:  988:    UnitTestImpl* unit_test)
        1:  989:    : unit_test_(unit_test) {}
        1:  989-block  0
call    0 returned 1
        -:  990:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:  991:void DefaultGlobalTestPartResultReporter::ReportTestPartResult(
        -:  992:    const TestPartResult& result) {
    #####:  993:  unit_test_->current_test_result()->AddTestPartResult(result);
    %%%%%:  993-block  0
call    0 never executed
call    1 never executed
    #####:  994:  unit_test_->listeners()->repeater()->OnTestPartResult(result);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  995:}
        -:  996:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporterC2EPNS0_12UnitTestImplE called 1 returned 100% blocks executed 100%
        1:  997:DefaultPerThreadTestPartResultReporter::DefaultPerThreadTestPartResultReporter(
        1:  998:    UnitTestImpl* unit_test)
        1:  999:    : unit_test_(unit_test) {}
        1:  999-block  0
call    0 returned 1
        -: 1000:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 1001:void DefaultPerThreadTestPartResultReporter::ReportTestPartResult(
        -: 1002:    const TestPartResult& result) {
    #####: 1003:  unit_test_->GetGlobalTestPartResultReporter()->ReportTestPartResult(result);
    %%%%%: 1003-block  0
call    0 never executed
call    1 never executed
    #####: 1004:}
        -: 1005:
        -: 1006:// Returns the global test part result reporter.
        -: 1007:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl31GetGlobalTestPartResultReporterEv called 0 returned 0% blocks executed 0%
    #####: 1008:UnitTestImpl::GetGlobalTestPartResultReporter() {
    #####: 1009:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    %%%%%: 1009-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1010:  return global_test_part_result_repoter_;
    %%%%%: 1010-block  0
call    0 never executed
    %%%%%: 1010-block  1
        -: 1011:}
        -: 1012:
        -: 1013:// Sets the global test part result reporter.
function _ZN7testing8internal12UnitTestImpl31SetGlobalTestPartResultReporterEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 1014:void UnitTestImpl::SetGlobalTestPartResultReporter(
        -: 1015:    TestPartResultReporterInterface* reporter) {
    #####: 1016:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    %%%%%: 1016-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1017:  global_test_part_result_repoter_ = reporter;
    %%%%%: 1017-block  0
call    0 never executed
    #####: 1018:}
        -: 1019:
        -: 1020:// Returns the test part result reporter for the current thread.
        -: 1021:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl41GetTestPartResultReporterForCurrentThreadEv called 0 returned 0% blocks executed 0%
    #####: 1022:UnitTestImpl::GetTestPartResultReporterForCurrentThread() {
    #####: 1023:  return per_thread_test_part_result_reporter_.get();
    %%%%%: 1023-block  0
call    0 never executed
        -: 1024:}
        -: 1025:
        -: 1026:// Sets the test part result reporter for the current thread.
function _ZN7testing8internal12UnitTestImpl41SetTestPartResultReporterForCurrentThreadEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 1027:void UnitTestImpl::SetTestPartResultReporterForCurrentThread(
        -: 1028:    TestPartResultReporterInterface* reporter) {
    #####: 1029:  per_thread_test_part_result_reporter_.set(reporter);
    %%%%%: 1029-block  0
call    0 never executed
    #####: 1030:}
        -: 1031:
        -: 1032:// Gets the number of successful test suites.
function _ZNK7testing8internal12UnitTestImpl27successful_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 1033:int UnitTestImpl::successful_test_suite_count() const {
    #####: 1034:  return CountIf(test_suites_, TestSuitePassed);
    %%%%%: 1034-block  0
call    0 never executed
        -: 1035:}
        -: 1036:
        -: 1037:// Gets the number of failed test suites.
function _ZNK7testing8internal12UnitTestImpl23failed_test_suite_countEv called 2 returned 100% blocks executed 100%
        2: 1038:int UnitTestImpl::failed_test_suite_count() const {
        2: 1039:  return CountIf(test_suites_, TestSuiteFailed);
        2: 1039-block  0
call    0 returned 2
        -: 1040:}
        -: 1041:
        -: 1042:// Gets the number of all test suites.
function _ZNK7testing8internal12UnitTestImpl22total_test_suite_countEv called 2 returned 100% blocks executed 100%
        2: 1043:int UnitTestImpl::total_test_suite_count() const {
        2: 1044:  return static_cast<int>(test_suites_.size());
        2: 1044-block  0
call    0 returned 2
        -: 1045:}
        -: 1046:
        -: 1047:// Gets the number of all test suites that contain at least one test
        -: 1048:// that should run.
function _ZNK7testing8internal12UnitTestImpl23test_suite_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 1049:int UnitTestImpl::test_suite_to_run_count() const {
        2: 1050:  return CountIf(test_suites_, ShouldRunTestSuite);
        2: 1050-block  0
call    0 returned 2
        -: 1051:}
        -: 1052:
        -: 1053:// Gets the number of successful tests.
function _ZNK7testing8internal12UnitTestImpl21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 1054:int UnitTestImpl::successful_test_count() const {
        1: 1055:  return SumOverTestSuiteList(test_suites_, &TestSuite::successful_test_count);
        1: 1055-block  0
call    0 returned 1
        -: 1056:}
        -: 1057:
        -: 1058:// Gets the number of skipped tests.
function _ZNK7testing8internal12UnitTestImpl18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1: 1059:int UnitTestImpl::skipped_test_count() const {
        1: 1060:  return SumOverTestSuiteList(test_suites_, &TestSuite::skipped_test_count);
        1: 1060-block  0
call    0 returned 1
        -: 1061:}
        -: 1062:
        -: 1063:// Gets the number of failed tests.
function _ZNK7testing8internal12UnitTestImpl17failed_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1064:int UnitTestImpl::failed_test_count() const {
    #####: 1065:  return SumOverTestSuiteList(test_suites_, &TestSuite::failed_test_count);
    %%%%%: 1065-block  0
call    0 never executed
        -: 1066:}
        -: 1067:
        -: 1068:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8internal12UnitTestImpl30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 1069:int UnitTestImpl::reportable_disabled_test_count() const {
        1: 1070:  return SumOverTestSuiteList(test_suites_,
        1: 1070-block  0
call    0 returned 1
        1: 1071:                              &TestSuite::reportable_disabled_test_count);
        -: 1072:}
        -: 1073:
        -: 1074:// Gets the number of disabled tests.
function _ZNK7testing8internal12UnitTestImpl19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1075:int UnitTestImpl::disabled_test_count() const {
    #####: 1076:  return SumOverTestSuiteList(test_suites_, &TestSuite::disabled_test_count);
    %%%%%: 1076-block  0
call    0 never executed
        -: 1077:}
        -: 1078:
        -: 1079:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8internal12UnitTestImpl21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1080:int UnitTestImpl::reportable_test_count() const {
    #####: 1081:  return SumOverTestSuiteList(test_suites_, &TestSuite::reportable_test_count);
    %%%%%: 1081-block  0
call    0 never executed
        -: 1082:}
        -: 1083:
        -: 1084:// Gets the number of all tests.
function _ZNK7testing8internal12UnitTestImpl16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1085:int UnitTestImpl::total_test_count() const {
    #####: 1086:  return SumOverTestSuiteList(test_suites_, &TestSuite::total_test_count);
    %%%%%: 1086-block  0
call    0 never executed
        -: 1087:}
        -: 1088:
        -: 1089:// Gets the number of tests that should run.
function _ZNK7testing8internal12UnitTestImpl17test_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 1090:int UnitTestImpl::test_to_run_count() const {
        2: 1091:  return SumOverTestSuiteList(test_suites_, &TestSuite::test_to_run_count);
        2: 1091-block  0
call    0 returned 2
        -: 1092:}
        -: 1093:
        -: 1094:// Returns the current OS stack trace as an std::string.
        -: 1095://
        -: 1096:// The maximum number of stack frames to be included is specified by
        -: 1097:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 1098:// specifies the number of top frames to be skipped, which doesn't
        -: 1099:// count against the number of frames to be included.
        -: 1100://
        -: 1101:// For example, if Foo() calls Bar(), which in turn calls
        -: 1102:// CurrentOsStackTraceExceptTop(1), Foo() will be included in the
        -: 1103:// trace but Bar() and CurrentOsStackTraceExceptTop() won't.
function _ZN7testing8internal12UnitTestImpl28CurrentOsStackTraceExceptTopB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 1104:std::string UnitTestImpl::CurrentOsStackTraceExceptTop(int skip_count) {
    #####: 1105:  return os_stack_trace_getter()->CurrentStackTrace(
    %%%%%: 1105-block  0
call    0 never executed
        -: 1106:      static_cast<int>(GTEST_FLAG_GET(stack_trace_depth)), skip_count + 1
        -: 1107:      // Skips the user-specified number of frames plus this function
        -: 1108:      // itself.
    #####: 1109:  );  // NOLINT
call    0 never executed
        -: 1110:}
        -: 1111:
        -: 1112:// A helper class for measuring elapsed times.
        -: 1113:class Timer {
        -: 1114: public:
function _ZN7testing8internal5TimerC2Ev called 7 returned 100% blocks executed 100%
        7: 1115:  Timer() : start_(std::chrono::steady_clock::now()) {}
        7: 1115-block  0
call    0 returned 7
        -: 1116:
        -: 1117:  // Return time elapsed in milliseconds since the timer was created.
function _ZN7testing8internal5Timer7ElapsedEv called 7 returned 100% blocks executed 88%
        7: 1118:  TimeInMillis Elapsed() {
        7: 1119:    return std::chrono::duration_cast<std::chrono::milliseconds>(
       14: 1120:               std::chrono::steady_clock::now() - start_)
        7: 1120-block  0
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0 (throw)
        7: 1120-block  1
call    4 returned 7
branch  5 taken 7 (fallthrough)
branch  6 taken 0 (throw)
    $$$$$: 1120-block  2
       14: 1121:        .count();
        7: 1121-block  0
call    0 returned 7
        7: 1121-block  1
        -: 1122:  }
        -: 1123:
        -: 1124: private:
        -: 1125:  std::chrono::steady_clock::time_point start_;
        -: 1126:};
        -: 1127:
        -: 1128:// Returns a timestamp as milliseconds since the epoch. Note this time may jump
        -: 1129:// around subject to adjustments by the system, to measure elapsed time use
        -: 1130:// Timer instead.
function _ZN7testing8internal15GetTimeInMillisEv called 8 returned 100% blocks executed 80%
        8: 1131:TimeInMillis GetTimeInMillis() {
        8: 1132:  return std::chrono::duration_cast<std::chrono::milliseconds>(
        8: 1133:             std::chrono::system_clock::now() -
call    0 returned 8
    $$$$$: 1133-block  0
    $$$$$: 1133-block  1
       24: 1134:             std::chrono::system_clock::from_time_t(0))
        8: 1134-block  0
call    0 returned 8
call    1 returned 8
branch  2 taken 8 (fallthrough)
branch  3 taken 0 (throw)
        8: 1134-block  1
call    4 returned 8
branch  5 taken 8 (fallthrough)
branch  6 taken 0 (throw)
       16: 1135:      .count();
        8: 1135-block  0
call    0 returned 8
        8: 1135-block  1
        -: 1136:}
        -: 1137:
        -: 1138:// Utilities
        -: 1139:
        -: 1140:// class String.
        -: 1141:
        -: 1142:#if GTEST_OS_WINDOWS_MOBILE
        -: 1143:// Creates a UTF-16 wide string from the given ANSI string, allocating
        -: 1144:// memory using new. The caller is responsible for deleting the return
        -: 1145:// value using delete[]. Returns the wide string, or NULL if the
        -: 1146:// input is NULL.
        -: 1147:LPCWSTR String::AnsiToUtf16(const char* ansi) {
        -: 1148:  if (!ansi) return nullptr;
        -: 1149:  const int length = strlen(ansi);
        -: 1150:  const int unicode_length =
        -: 1151:      MultiByteToWideChar(CP_ACP, 0, ansi, length, nullptr, 0);
        -: 1152:  WCHAR* unicode = new WCHAR[unicode_length + 1];
        -: 1153:  MultiByteToWideChar(CP_ACP, 0, ansi, length, unicode, unicode_length);
        -: 1154:  unicode[unicode_length] = 0;
        -: 1155:  return unicode;
        -: 1156:}
        -: 1157:
        -: 1158:// Creates an ANSI string from the given wide string, allocating
        -: 1159:// memory using new. The caller is responsible for deleting the return
        -: 1160:// value using delete[]. Returns the ANSI string, or NULL if the
        -: 1161:// input is NULL.
        -: 1162:const char* String::Utf16ToAnsi(LPCWSTR utf16_str) {
        -: 1163:  if (!utf16_str) return nullptr;
        -: 1164:  const int ansi_length = WideCharToMultiByte(CP_ACP, 0, utf16_str, -1, nullptr,
        -: 1165:                                              0, nullptr, nullptr);
        -: 1166:  char* ansi = new char[ansi_length + 1];
        -: 1167:  WideCharToMultiByte(CP_ACP, 0, utf16_str, -1, ansi, ansi_length, nullptr,
        -: 1168:                      nullptr);
        -: 1169:  ansi[ansi_length] = 0;
        -: 1170:  return ansi;
        -: 1171:}
        -: 1172:
        -: 1173:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1174:
        -: 1175:// Compares two C strings.  Returns true if and only if they have the same
        -: 1176:// content.
        -: 1177://
        -: 1178:// Unlike strcmp(), this function can handle NULL argument(s).  A NULL
        -: 1179:// C string is considered different to any non-NULL C string,
        -: 1180:// including the empty string.
function _ZN7testing8internal6String13CStringEqualsEPKcS3_ called 4 returned 100% blocks executed 67%
        4: 1181:bool String::CStringEquals(const char* lhs, const char* rhs) {
       4*: 1182:  if (lhs == nullptr) return rhs == nullptr;
        4: 1182-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 1182-block  1
        -: 1183:
       4*: 1184:  if (rhs == nullptr) return false;
        4: 1184-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 1184-block  1
        -: 1185:
        4: 1186:  return strcmp(lhs, rhs) == 0;
        4: 1186-block  0
        -: 1187:}
        -: 1188:
        -: 1189:#if GTEST_HAS_STD_WSTRING
        -: 1190:
        -: 1191:// Converts an array of wide chars to a narrow string using the UTF-8
        -: 1192:// encoding, and streams the result to the given Message object.
function _ZN7testing8internalL24StreamWideCharsToMessageEPKwmPNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 1193:static void StreamWideCharsToMessage(const wchar_t* wstr, size_t length,
        -: 1194:                                     Message* msg) {
    #####: 1195:  for (size_t i = 0; i != length;) {  // NOLINT
    %%%%%: 1195-block  0
    %%%%%: 1195-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 1195-block  2
    #####: 1196:    if (wstr[i] != L'\0') {
    %%%%%: 1196-block  0
branch  0 never executed
branch  1 never executed
    #####: 1197:      *msg << WideStringToUtf8(wstr + i, static_cast<int>(length - i));
    %%%%%: 1197-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1197-block  1
call    4 never executed
    $$$$$: 1197-block  2
call    5 never executed
    $$$$$: 1197-block  3
call    6 never executed
    #####: 1198:      while (i != length && wstr[i] != L'\0') i++;
    %%%%%: 1198-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1198-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1198-block  2
        -: 1199:    } else {
    #####: 1200:      *msg << '\0';
    %%%%%: 1200-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1201:      i++;
    %%%%%: 1201-block  0
        -: 1202:    }
        -: 1203:  }
    #####: 1204:}
    %%%%%: 1204-block  0
        -: 1205:
        -: 1206:#endif  // GTEST_HAS_STD_WSTRING
        -: 1207:
function _ZN7testing8internal11SplitStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcPSt6vectorIS6_SaIS6_EE called 4 returned 100% blocks executed 69%
        4: 1208:void SplitString(const ::std::string& str, char delimiter,
        -: 1209:                 ::std::vector< ::std::string>* dest) {
        8: 1210:  ::std::vector< ::std::string> parsed;
        4: 1210-block  0
call    0 returned 4
call    1 returned 4
    $$$$$: 1210-block  1
call    2 never executed
        4: 1211:  ::std::string::size_type pos = 0;
        6: 1212:  while (::testing::internal::AlwaysTrue()) {
        6: 1212-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6: 1212-block  1
branch  3 taken 6 (fallthrough)
branch  4 taken 0
        6: 1213:    const ::std::string::size_type colon = str.find(delimiter, pos);
        6: 1213-block  0
call    0 returned 6
        6: 1214:    if (colon == ::std::string::npos) {
branch  0 taken 4 (fallthrough)
branch  1 taken 2
        4: 1215:      parsed.push_back(str.substr(pos));
        4: 1215-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 1215-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4: 1215-block  2
call    6 returned 4
    $$$$$: 1215-block  3
call    7 never executed
    $$$$$: 1215-block  4
        4: 1216:      break;
        -: 1217:    } else {
        2: 1218:      parsed.push_back(str.substr(pos, colon - pos));
        2: 1218-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 1218-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2: 1218-block  2
call    6 returned 2
    $$$$$: 1218-block  3
call    7 never executed
    $$$$$: 1218-block  4
        2: 1219:      pos = colon + 1;
        -: 1220:    }
        -: 1221:  }
        4: 1222:  dest->swap(parsed);
        4: 1222-block  0
call    0 returned 4
        4: 1223:}
        -: 1224:
        -: 1225:}  // namespace internal
        -: 1226:
        -: 1227:// Constructs an empty Message.
        -: 1228:// We allocate the stringstream separately because otherwise each use of
        -: 1229:// ASSERT/EXPECT in a procedure adds over 200 bytes to the procedure's
        -: 1230:// stack frame leading to huge stack frames in some cases; gcc does not reuse
        -: 1231:// the stack space.
function _ZN7testing7MessageC2Ev called 57 returned 100% blocks executed 73%
       57: 1232:Message::Message() : ss_(new ::std::stringstream) {
       57: 1232-block  0
call    0 returned 57
call    1 returned 57
branch  2 taken 57 (fallthrough)
branch  3 taken 0 (throw)
       57: 1232-block  1
call    4 returned 57
    $$$$$: 1232-block  2
call    5 never executed
    $$$$$: 1232-block  3
call    6 never executed
        -: 1233:  // By default, we want there to be enough precision when printing
        -: 1234:  // a double to a Message.
       57: 1235:  *ss_ << std::setprecision(std::numeric_limits<double>::digits10 + 2);
call    0 returned 57
call    1 returned 57
call    2 returned 57
branch  3 taken 57 (fallthrough)
branch  4 taken 0 (throw)
       57: 1236:}
       57: 1236-block  0
        -: 1237:
        -: 1238:// These two overloads allow streaming a wide C string to a Message
        -: 1239:// using the UTF-8 encoding.
function _ZN7testing7MessagelsEPKw called 0 returned 0% blocks executed 0%
    #####: 1240:Message& Message::operator<<(const wchar_t* wide_c_str) {
    #####: 1241:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%: 1241-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1241-block  1
call    4 never executed
    %%%%%: 1241-block  2
    $$$$$: 1241-block  3
call    5 never executed
        -: 1242:}
function _ZN7testing7MessagelsEPw called 0 returned 0% blocks executed 0%
    #####: 1243:Message& Message::operator<<(wchar_t* wide_c_str) {
    #####: 1244:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%: 1244-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1244-block  1
call    4 never executed
    %%%%%: 1244-block  2
    $$$$$: 1244-block  3
call    5 never executed
        -: 1245:}
        -: 1246:
        -: 1247:#if GTEST_HAS_STD_WSTRING
        -: 1248:// Converts the given wide string to a narrow string using the UTF-8
        -: 1249:// encoding, and streams the result to this Message object.
function _ZN7testing7MessagelsERKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE called 0 returned 0% blocks executed 0%
    #####: 1250:Message& Message::operator<<(const ::std::wstring& wstr) {
    #####: 1251:  internal::StreamWideCharsToMessage(wstr.c_str(), wstr.length(), this);
    %%%%%: 1251-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1252:  return *this;
        -: 1253:}
        -: 1254:#endif  // GTEST_HAS_STD_WSTRING
        -: 1255:
        -: 1256:// Gets the text streamed to this object so far as an std::string.
        -: 1257:// Each '\0' character in the buffer is replaced with "\\0".
function _ZNK7testing7Message9GetStringB5cxx11Ev called 57 returned 100% blocks executed 100%
       57: 1258:std::string Message::GetString() const {
       57: 1259:  return internal::StringStreamToString(ss_.get());
       57: 1259-block  0
call    0 returned 57
call    1 returned 57
        -: 1260:}
        -: 1261:
        -: 1262:namespace internal {
        -: 1263:
        -: 1264:namespace edit_distance {
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorImSaImEES6_ called 0 returned 0% blocks executed 0%
    #####: 1265:std::vector<EditType> CalculateOptimalEdits(const std::vector<size_t>& left,
        -: 1266:                                            const std::vector<size_t>& right) {
        -: 1267:  std::vector<std::vector<double> > costs(
    #####: 1268:      left.size() + 1, std::vector<double>(right.size() + 1));
    %%%%%: 1268-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1268-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$: 1268-block  2
    $$$$$: 1268-block  3
    $$$$$: 1268-block  4
    $$$$$: 1268-block  5
call   13 never executed
        -: 1269:  std::vector<std::vector<EditType> > best_move(
    #####: 1270:      left.size() + 1, std::vector<EditType>(right.size() + 1));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1270-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
    %%%%%: 1270-block  1
call   12 never executed
    $$$$$: 1270-block  2
    $$$$$: 1270-block  3
    $$$$$: 1270-block  4
    $$$$$: 1270-block  5
call   13 never executed
        -: 1271:
        -: 1272:  // Populate for empty right.
    #####: 1273:  for (size_t l_i = 0; l_i < costs.size(); ++l_i) {
    %%%%%: 1273-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1274:    costs[l_i][0] = static_cast<double>(l_i);
    %%%%%: 1274-block  0
call    0 never executed
call    1 never executed
    #####: 1275:    best_move[l_i][0] = kRemove;
call    0 never executed
call    1 never executed
        -: 1276:  }
        -: 1277:  // Populate for empty left.
    #####: 1278:  for (size_t r_i = 1; r_i < costs[0].size(); ++r_i) {
    %%%%%: 1278-block  0
    %%%%%: 1278-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1279:    costs[0][r_i] = static_cast<double>(r_i);
    %%%%%: 1279-block  0
call    0 never executed
call    1 never executed
    #####: 1280:    best_move[0][r_i] = kAdd;
call    0 never executed
call    1 never executed
        -: 1281:  }
        -: 1282:
    #####: 1283:  for (size_t l_i = 0; l_i < left.size(); ++l_i) {
    %%%%%: 1283-block  0
    %%%%%: 1283-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1283-block  2
    #####: 1284:    for (size_t r_i = 0; r_i < right.size(); ++r_i) {
    %%%%%: 1284-block  0
    %%%%%: 1284-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1284-block  2
    #####: 1285:      if (left[l_i] == right[r_i]) {
    %%%%%: 1285-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1286:        // Found a match. Consume it.
    #####: 1287:        costs[l_i + 1][r_i + 1] = costs[l_i][r_i];
    %%%%%: 1287-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1288:        best_move[l_i + 1][r_i + 1] = kMatch;
call    0 never executed
call    1 never executed
    #####: 1289:        continue;
        -: 1290:      }
        -: 1291:
    #####: 1292:      const double add = costs[l_i + 1][r_i];
    %%%%%: 1292-block  0
call    0 never executed
call    1 never executed
    #####: 1293:      const double remove = costs[l_i][r_i + 1];
call    0 never executed
call    1 never executed
    #####: 1294:      const double replace = costs[l_i][r_i];
call    0 never executed
call    1 never executed
    #####: 1295:      if (add < remove && add < replace) {
branch  0 never executed
branch  1 never executed
    %%%%%: 1295-block  0
branch  2 never executed
branch  3 never executed
    #####: 1296:        costs[l_i + 1][r_i + 1] = add + 1;
    %%%%%: 1296-block  0
call    0 never executed
call    1 never executed
    #####: 1297:        best_move[l_i + 1][r_i + 1] = kAdd;
call    0 never executed
call    1 never executed
    #####: 1298:      } else if (remove < add && remove < replace) {
    %%%%%: 1298-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1298-block  1
branch  2 never executed
branch  3 never executed
    #####: 1299:        costs[l_i + 1][r_i + 1] = remove + 1;
    %%%%%: 1299-block  0
call    0 never executed
call    1 never executed
    #####: 1300:        best_move[l_i + 1][r_i + 1] = kRemove;
call    0 never executed
call    1 never executed
        -: 1301:      } else {
        -: 1302:        // We make replace a little more expensive than add/remove to lower
        -: 1303:        // their priority.
    #####: 1304:        costs[l_i + 1][r_i + 1] = replace + 1.00001;
    %%%%%: 1304-block  0
call    0 never executed
call    1 never executed
    #####: 1305:        best_move[l_i + 1][r_i + 1] = kReplace;
call    0 never executed
call    1 never executed
        -: 1306:      }
        -: 1307:    }
        -: 1308:  }
        -: 1309:
        -: 1310:  // Reconstruct the best path. We do it in reverse order.
    #####: 1311:  std::vector<EditType> best_path;
    %%%%%: 1311-block  0
call    0 never executed
    #####: 1312:  for (size_t l_i = left.size(), r_i = right.size(); l_i > 0 || r_i > 0;) {
call    0 never executed
call    1 never executed
    %%%%%: 1312-block  0
branch  2 never executed
branch  3 never executed
    %%%%%: 1312-block  1
branch  4 never executed
branch  5 never executed
    #####: 1313:    EditType move = best_move[l_i][r_i];
    %%%%%: 1313-block  0
call    0 never executed
call    1 never executed
    #####: 1314:    best_path.push_back(move);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1315:    l_i -= move != kAdd;
    #####: 1316:    r_i -= move != kRemove;
    %%%%%: 1316-block  0
        -: 1317:  }
    #####: 1318:  std::reverse(best_path.begin(), best_path.end());
    %%%%%: 1318-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1319:  return best_path;
    %%%%%: 1319-block  0
    %%%%%: 1319-block  1
        -: 1320:}
        -: 1321:
        -: 1322:namespace {
        -: 1323:
        -: 1324:// Helper class to convert string into ids with deduplication.
        -: 1325:class InternalStrings {
        -: 1326: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_115InternalStrings5GetIdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1327:  size_t GetId(const std::string& str) {
    #####: 1328:    IdMap::iterator it = ids_.find(str);
    %%%%%: 1328-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1329:    if (it != ids_.end()) return it->second;
    %%%%%: 1329-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1329-block  1
call    4 never executed
    #####: 1330:    size_t id = ids_.size();
    %%%%%: 1330-block  0
call    0 never executed
    #####: 1331:    return ids_[str] = id;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1331-block  0
        -: 1332:  }
        -: 1333:
        -: 1334: private:
        -: 1335:  typedef std::map<std::string, size_t> IdMap;
        -: 1336:  IdMap ids_;
        -: 1337:};
        -: 1338:
        -: 1339:}  // namespace
        -: 1340:
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_ called 0 returned 0% blocks executed 0%
    #####: 1341:std::vector<EditType> CalculateOptimalEdits(
        -: 1342:    const std::vector<std::string>& left,
        -: 1343:    const std::vector<std::string>& right) {
    #####: 1344:  std::vector<size_t> left_ids, right_ids;
    %%%%%: 1344-block  0
call    0 never executed
call    1 never executed
    %%%%%: 1344-block  1
call    2 never executed
call    3 never executed
    $$$$$: 1344-block  2
call    4 never executed
    $$$$$: 1344-block  3
call    5 never executed
        -: 1345:  {
    #####: 1346:    InternalStrings intern_table;
call    0 never executed
    %%%%%: 1346-block  0
call    1 never executed
    $$$$$: 1346-block  1
call    2 never executed
    #####: 1347:    for (size_t i = 0; i < left.size(); ++i) {
    %%%%%: 1347-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1348:      left_ids.push_back(intern_table.GetId(left[i]));
    %%%%%: 1348-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1348-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1348-block  2
    $$$$$: 1348-block  3
        -: 1349:    }
    #####: 1350:    for (size_t i = 0; i < right.size(); ++i) {
    %%%%%: 1350-block  0
    %%%%%: 1350-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1351:      right_ids.push_back(intern_table.GetId(right[i]));
    %%%%%: 1351-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1351-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1351-block  2
    $$$$$: 1351-block  3
        -: 1352:    }
        -: 1353:  }
    #####: 1354:  return CalculateOptimalEdits(left_ids, right_ids);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1354-block  0
        -: 1355:}
        -: 1356:
        -: 1357:namespace {
        -: 1358:
        -: 1359:// Helper class that holds the state for one hunk and prints it out to the
        -: 1360:// stream.
        -: 1361:// It reorders adds/removes when possible to group all removes before all
        -: 1362:// adds. It also adds the hunk header before printint into the stream.
        -: 1363:class Hunk {
        -: 1364: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14HunkC2Emm called 0 returned 0% blocks executed 0%
    #####: 1365:  Hunk(size_t left_start, size_t right_start)
    #####: 1366:      : left_start_(left_start),
        -: 1367:        right_start_(right_start),
        -: 1368:        adds_(),
        -: 1369:        removes_(),
    #####: 1370:        common_() {}
    %%%%%: 1370-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1371:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk8PushLineEcPKc called 0 returned 0% blocks executed 0%
    #####: 1372:  void PushLine(char edit, const char* line) {
    #####: 1373:    switch (edit) {
    %%%%%: 1373-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1374:      case ' ':
    #####: 1375:        ++common_;
    #####: 1376:        FlushEdits();
    %%%%%: 1376-block  0
call    0 never executed
    #####: 1377:        hunk_.push_back(std::make_pair(' ', line));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1377-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1377-block  1
    $$$$$: 1377-block  2
call    6 never executed
    #####: 1378:        break;
    %%%%%: 1378-block  0
    #####: 1379:      case '-':
    #####: 1380:        ++removes_;
    #####: 1381:        hunk_removes_.push_back(std::make_pair('-', line));
    %%%%%: 1381-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1381-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1381-block  2
    $$$$$: 1381-block  3
call    6 never executed
    #####: 1382:        break;
    %%%%%: 1382-block  0
    #####: 1383:      case '+':
    #####: 1384:        ++adds_;
    #####: 1385:        hunk_adds_.push_back(std::make_pair('+', line));
    %%%%%: 1385-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1385-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1385-block  2
    #####: 1386:        break;
    %%%%%: 1386-block  0
        -: 1387:    }
    #####: 1388:  }
    %%%%%: 1388-block  0
        -: 1389:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk7PrintToEPSo called 0 returned 0% blocks executed 0%
    #####: 1390:  void PrintTo(std::ostream* os) {
    #####: 1391:    PrintHeader(os);
    %%%%%: 1391-block  0
call    0 never executed
    #####: 1392:    FlushEdits();
call    0 never executed
    #####: 1393:    for (std::list<std::pair<char, const char*> >::const_iterator it =
    #####: 1394:             hunk_.begin();
call    0 never executed
call    1 never executed
    #####: 1395:         it != hunk_.end(); ++it) {
    %%%%%: 1395-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1395-block  1
call    5 never executed
    #####: 1396:      *os << it->first << it->second << "\n";
    %%%%%: 1396-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1396-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1396-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
        -: 1397:    }
    #####: 1398:  }
    %%%%%: 1398-block  0
        -: 1399:
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk9has_editsEv called 0 returned 0% blocks executed 0%
    #####: 1400:  bool has_edits() const { return adds_ || removes_; }
    %%%%%: 1400-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1400-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1400-block  2
    %%%%%: 1400-block  3
    %%%%%: 1400-block  4
        -: 1401:
        -: 1402: private:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk10FlushEditsEv called 0 returned 0% blocks executed 0%
    #####: 1403:  void FlushEdits() {
    #####: 1404:    hunk_.splice(hunk_.end(), hunk_removes_);
    %%%%%: 1404-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1405:    hunk_.splice(hunk_.end(), hunk_adds_);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1406:  }
        -: 1407:
        -: 1408:  // Print a unified diff header for one hunk.
        -: 1409:  // The format is
        -: 1410:  //   "@@ -<left_start>,<left_length> +<right_start>,<right_length> @@"
        -: 1411:  // where the left/right parts are omitted if unnecessary.
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk11PrintHeaderEPSo called 0 returned 0% blocks executed 0%
    #####: 1412:  void PrintHeader(std::ostream* ss) const {
    #####: 1413:    *ss << "@@ ";
    %%%%%: 1413-block  0
call    0 never executed
    #####: 1414:    if (removes_) {
branch  0 never executed
branch  1 never executed
    #####: 1415:      *ss << "-" << left_start_ << "," << (removes_ + common_);
    %%%%%: 1415-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1416:    }
    #####: 1417:    if (removes_ && adds_) {
    %%%%%: 1417-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1417-block  1
branch  2 never executed
branch  3 never executed
    #####: 1418:      *ss << " ";
    %%%%%: 1418-block  0
call    0 never executed
        -: 1419:    }
    #####: 1420:    if (adds_) {
    %%%%%: 1420-block  0
branch  0 never executed
branch  1 never executed
    #####: 1421:      *ss << "+" << right_start_ << "," << (adds_ + common_);
    %%%%%: 1421-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1422:    }
    #####: 1423:    *ss << " @@\n";
    %%%%%: 1423-block  0
call    0 never executed
    #####: 1424:  }
        -: 1425:
        -: 1426:  size_t left_start_, right_start_;
        -: 1427:  size_t adds_, removes_, common_;
        -: 1428:  std::list<std::pair<char, const char*> > hunk_, hunk_adds_, hunk_removes_;
        -: 1429:};
        -: 1430:
        -: 1431:}  // namespace
        -: 1432:
        -: 1433:// Create a list of diff hunks in Unified diff format.
        -: 1434:// Each hunk has a header generated by PrintHeader above plus a body with
        -: 1435:// lines prefixed with ' ' for no change, '-' for deletion and '+' for
        -: 1436:// addition.
        -: 1437:// 'context' represents the desired unchanged prefix/suffix around the diff.
        -: 1438:// If two hunks are close enough that their contexts overlap, then they are
        -: 1439:// joined into one hunk.
function _ZN7testing8internal13edit_distance17CreateUnifiedDiffERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_m called 0 returned 0% blocks executed 0%
    #####: 1440:std::string CreateUnifiedDiff(const std::vector<std::string>& left,
        -: 1441:                              const std::vector<std::string>& right,
        -: 1442:                              size_t context) {
    #####: 1443:  const std::vector<EditType> edits = CalculateOptimalEdits(left, right);
    %%%%%: 1443-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 1443-block  1
call    4 never executed
        -: 1444:
    #####: 1445:  size_t l_i = 0, r_i = 0, edit_i = 0;
    #####: 1446:  std::stringstream ss;
    %%%%%: 1446-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1446-block  1
call    3 never executed
    $$$$$: 1446-block  2
call    4 never executed
    #####: 1447:  while (edit_i < edits.size()) {
    %%%%%: 1447-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1447-block  1
        -: 1448:    // Find first edit.
    #####: 1449:    while (edit_i < edits.size() && edits[edit_i] == kMatch) {
    %%%%%: 1449-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1449-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1449-block  2
    %%%%%: 1449-block  3
    %%%%%: 1449-block  4
branch  6 never executed
branch  7 never executed
    #####: 1450:      ++l_i;
    #####: 1451:      ++r_i;
    #####: 1452:      ++edit_i;
    %%%%%: 1452-block  0
        -: 1453:    }
        -: 1454:
        -: 1455:    // Find the first line to include in the hunk.
    #####: 1456:    const size_t prefix_context = std::min(l_i, context);
    %%%%%: 1456-block  0
call    0 never executed
    #####: 1457:    Hunk hunk(l_i - prefix_context + 1, r_i - prefix_context + 1);
call    0 never executed
    $$$$$: 1457-block  0
call    1 never executed
    #####: 1458:    for (size_t i = prefix_context; i > 0; --i) {
    %%%%%: 1458-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1458-block  1
    #####: 1459:      hunk.PushLine(' ', left[l_i - i].c_str());
    %%%%%: 1459-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1460:    }
        -: 1461:
        -: 1462:    // Iterate the edits until we found enough suffix for the hunk or the input
        -: 1463:    // is over.
    #####: 1464:    size_t n_suffix = 0;
    %%%%%: 1464-block  0
    #####: 1465:    for (; edit_i < edits.size(); ++edit_i) {
    %%%%%: 1465-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1466:      if (n_suffix >= context) {
    %%%%%: 1466-block  0
branch  0 never executed
branch  1 never executed
        -: 1467:        // Continue only if the next hunk is very close.
    #####: 1468:        auto it = edits.begin() + static_cast<int>(edit_i);
    %%%%%: 1468-block  0
call    0 never executed
call    1 never executed
    #####: 1469:        while (it != edits.end() && *it == kMatch) ++it;
    %%%%%: 1469-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1469-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1469-block  2
    %%%%%: 1469-block  3
    %%%%%: 1469-block  4
branch  7 never executed
branch  8 never executed
    %%%%%: 1469-block  5
call    9 never executed
    #####: 1470:        if (it == edits.end() ||
    %%%%%: 1470-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1470-block  1
    %%%%%: 1470-block  2
    #####: 1471:            static_cast<size_t>(it - edits.begin()) - edit_i >= context) {
    %%%%%: 1471-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1471-block  1
branch  4 never executed
branch  5 never executed
        -: 1472:          // There is no next edit or it is too far away.
    #####: 1473:          break;
    %%%%%: 1473-block  0
        -: 1474:        }
        -: 1475:      }
        -: 1476:
    #####: 1477:      EditType edit = edits[edit_i];
    %%%%%: 1477-block  0
call    0 never executed
        -: 1478:      // Reset count when a non match is found.
    #####: 1479:      n_suffix = edit == kMatch ? n_suffix + 1 : 0;
branch  0 never executed
branch  1 never executed
    %%%%%: 1479-block  0
    %%%%%: 1479-block  1
        -: 1480:
    #####: 1481:      if (edit == kMatch || edit == kRemove || edit == kReplace) {
    %%%%%: 1481-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1481-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1481-block  2
branch  4 never executed
branch  5 never executed
    #####: 1482:        hunk.PushLine(edit == kMatch ? ' ' : '-', left[l_i].c_str());
    %%%%%: 1482-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1482-block  1
    %%%%%: 1482-block  2
    %%%%%: 1482-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 1483:      }
    #####: 1484:      if (edit == kAdd || edit == kReplace) {
    %%%%%: 1484-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1484-block  1
branch  2 never executed
branch  3 never executed
    #####: 1485:        hunk.PushLine('+', right[r_i].c_str());
    %%%%%: 1485-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1486:      }
        -: 1487:
        -: 1488:      // Advance indices, depending on edit type.
    #####: 1489:      l_i += edit != kAdd;
    #####: 1490:      r_i += edit != kRemove;
    %%%%%: 1490-block  0
        -: 1491:    }
        -: 1492:
    #####: 1493:    if (!hunk.has_edits()) {
    %%%%%: 1493-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1494:      // We are done. We don't want this hunk.
    #####: 1495:      break;
    %%%%%: 1495-block  0
        -: 1496:    }
        -: 1497:
    #####: 1498:    hunk.PrintTo(&ss);
    %%%%%: 1498-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1499:  }
    #####: 1500:  return ss.str();
    %%%%%: 1500-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1500-block  1
        -: 1501:}
        -: 1502:
        -: 1503:}  // namespace edit_distance
        -: 1504:
        -: 1505:namespace {
        -: 1506:
        -: 1507:// The string representation of the values received in EqFailure() are already
        -: 1508:// escaped. Split them on escaped '\n' boundaries. Leave all other escaped
        -: 1509:// characters the same.
function _ZN7testing8internal12_GLOBAL__N_118SplitEscapedStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1510:std::vector<std::string> SplitEscapedString(const std::string& str) {
    #####: 1511:  std::vector<std::string> lines;
    %%%%%: 1511-block  0
call    0 never executed
    #####: 1512:  size_t start = 0, end = str.size();
call    0 never executed
    #####: 1513:  if (end > 2 && str[0] == '"' && str[end - 1] == '"') {
branch  0 never executed
branch  1 never executed
    %%%%%: 1513-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1513-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1513-block  2
    %%%%%: 1513-block  3
    %%%%%: 1513-block  4
branch  8 never executed
branch  9 never executed
    #####: 1514:    ++start;
    #####: 1515:    --end;
    %%%%%: 1515-block  0
        -: 1516:  }
    #####: 1517:  bool escaped = false;
    #####: 1518:  for (size_t i = start; i + 1 < end; ++i) {
    %%%%%: 1518-block  0
    %%%%%: 1518-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 1518-block  2
    #####: 1519:    if (escaped) {
    %%%%%: 1519-block  0
branch  0 never executed
branch  1 never executed
    #####: 1520:      escaped = false;
    #####: 1521:      if (str[i] == 'n') {
    %%%%%: 1521-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1522:        lines.push_back(str.substr(start, i - start - 1));
    %%%%%: 1522-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1522-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1522-block  2
call    6 never executed
    $$$$$: 1522-block  3
call    7 never executed
    $$$$$: 1522-block  4
    #####: 1523:        start = i + 1;
        -: 1524:      }
        -: 1525:    } else {
    #####: 1526:      escaped = str[i] == '\\';
    %%%%%: 1526-block  0
call    0 never executed
        -: 1527:    }
        -: 1528:  }
    #####: 1529:  lines.push_back(str.substr(start, end - start));
    %%%%%: 1529-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1529-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1529-block  2
call    6 never executed
    $$$$$: 1529-block  3
call    7 never executed
    $$$$$: 1529-block  4
    #####: 1530:  return lines;
    %%%%%: 1530-block  0
        -: 1531:}
        -: 1532:
        -: 1533:}  // namespace
        -: 1534:
        -: 1535:// Constructs and returns the message for an equality assertion
        -: 1536:// (e.g. ASSERT_EQ, EXPECT_STREQ, etc) failure.
        -: 1537://
        -: 1538:// The first four parameters are the expressions used in the assertion
        -: 1539:// and their values, as strings.  For example, for ASSERT_EQ(foo, bar)
        -: 1540:// where foo is 5 and bar is 6, we have:
        -: 1541://
        -: 1542://   lhs_expression: "foo"
        -: 1543://   rhs_expression: "bar"
        -: 1544://   lhs_value:      "5"
        -: 1545://   rhs_value:      "6"
        -: 1546://
        -: 1547:// The ignoring_case parameter is true if and only if the assertion is a
        -: 1548:// *_STRCASEEQ*.  When it's true, the string "Ignoring case" will
        -: 1549:// be inserted into the message.
function _ZN7testing8internal9EqFailureEPKcS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_b called 0 returned 0% blocks executed 0%
    #####: 1550:AssertionResult EqFailure(const char* lhs_expression,
        -: 1551:                          const char* rhs_expression,
        -: 1552:                          const std::string& lhs_value,
        -: 1553:                          const std::string& rhs_value, bool ignoring_case) {
    #####: 1554:  Message msg;
    %%%%%: 1554-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1554-block  1
call    3 never executed
    #####: 1555:  msg << "Expected equality of these values:";
    %%%%%: 1555-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1556:  msg << "\n  " << lhs_expression;
    %%%%%: 1556-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1556-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1557:  if (lhs_value != lhs_expression) {
    %%%%%: 1557-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1558:    msg << "\n    Which is: " << lhs_value;
    %%%%%: 1558-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1558-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1559:  }
    #####: 1560:  msg << "\n  " << rhs_expression;
    %%%%%: 1560-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1560-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1561:  if (rhs_value != rhs_expression) {
    %%%%%: 1561-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1562:    msg << "\n    Which is: " << rhs_value;
    %%%%%: 1562-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1562-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1563:  }
        -: 1564:
    #####: 1565:  if (ignoring_case) {
    %%%%%: 1565-block  0
branch  0 never executed
branch  1 never executed
    #####: 1566:    msg << "\nIgnoring case";
    %%%%%: 1566-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1567:  }
        -: 1568:
    #####: 1569:  if (!lhs_value.empty() && !rhs_value.empty()) {
    %%%%%: 1569-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1569-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1569-block  2
    %%%%%: 1569-block  3
    %%%%%: 1569-block  4
branch  6 never executed
branch  7 never executed
    #####: 1570:    const std::vector<std::string> lhs_lines = SplitEscapedString(lhs_value);
    %%%%%: 1570-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 1570-block  1
call    4 never executed
    #####: 1571:    const std::vector<std::string> rhs_lines = SplitEscapedString(rhs_value);
    %%%%%: 1571-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1571-block  1
call    3 never executed
    $$$$$: 1571-block  2
call    4 never executed
    #####: 1572:    if (lhs_lines.size() > 1 || rhs_lines.size() > 1) {
    %%%%%: 1572-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1572-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1572-block  2
    %%%%%: 1572-block  3
    %%%%%: 1572-block  4
branch  6 never executed
branch  7 never executed
    #####: 1573:      msg << "\nWith diff:\n"
    %%%%%: 1573-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1574:          << edit_distance::CreateUnifiedDiff(lhs_lines, rhs_lines);
    %%%%%: 1574-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1574-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1574-block  2
call    6 never executed
    $$$$$: 1574-block  3
call    7 never executed
    $$$$$: 1574-block  4
        -: 1575:    }
        -: 1576:  }
        -: 1577:
    #####: 1578:  return AssertionFailure() << msg;
    %%%%%: 1578-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1578-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1578-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1578-block  3
call    9 never executed
call   10 never executed
    %%%%%: 1578-block  4
    $$$$$: 1578-block  5
call   11 never executed
    $$$$$: 1578-block  6
        -: 1579:}
        -: 1580:
        -: 1581:// Constructs a failure message for Boolean assertions such as EXPECT_TRUE.
function _ZN7testing8internal30GetBoolAssertionFailureMessageB5cxx11ERKNS_15AssertionResultEPKcS5_S5_ called 0 returned 0% blocks executed 0%
    #####: 1582:std::string GetBoolAssertionFailureMessage(
        -: 1583:    const AssertionResult& assertion_result, const char* expression_text,
        -: 1584:    const char* actual_predicate_value, const char* expected_predicate_value) {
    #####: 1585:  const char* actual_message = assertion_result.message();
    %%%%%: 1585-block  0
call    0 never executed
    #####: 1586:  Message msg;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1586-block  0
call    3 never executed
    $$$$$: 1586-block  1
call    4 never executed
    #####: 1587:  msg << "Value of: " << expression_text
    %%%%%: 1587-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1587-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1588:      << "\n  Actual: " << actual_predicate_value;
    %%%%%: 1588-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1588-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1589:  if (actual_message[0] != '\0') msg << " (" << actual_message << ")";
    %%%%%: 1589-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1589-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1589-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1589-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 1590:  msg << "\nExpected: " << expected_predicate_value;
    %%%%%: 1590-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1590-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1591:  return msg.GetString();
    %%%%%: 1591-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1591-block  1
        -: 1592:}
        -: 1593:
        -: 1594:// Helper function for implementing ASSERT_NEAR.
function _ZN7testing8internal20DoubleNearPredFormatEPKcS2_S2_ddd called 0 returned 0% blocks executed 0%
    #####: 1595:AssertionResult DoubleNearPredFormat(const char* expr1, const char* expr2,
        -: 1596:                                     const char* abs_error_expr, double val1,
        -: 1597:                                     double val2, double abs_error) {
    #####: 1598:  const double diff = fabs(val1 - val2);
    #####: 1599:  if (diff <= abs_error) return AssertionSuccess();
    %%%%%: 1599-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1599-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1600:
        -: 1601:  // Find the value which is closest to zero.
    #####: 1602:  const double min_abs = std::min(fabs(val1), fabs(val2));
    %%%%%: 1602-block  0
call    0 never executed
        -: 1603:  // Find the distance to the next double from that value.
        -: 1604:  const double epsilon =
    #####: 1605:      nextafter(min_abs, std::numeric_limits<double>::infinity()) - min_abs;
call    0 never executed
        -: 1606:  // Detect the case where abs_error is so small that EXPECT_NEAR is
        -: 1607:  // effectively the same as EXPECT_EQUAL, and give an informative error
        -: 1608:  // message so that the situation can be more easily understood without
        -: 1609:  // requiring exotic floating-point knowledge.
        -: 1610:  // Don't do an epsilon check if abs_error is zero because that implies
        -: 1611:  // that an equality check was actually intended.
    #####: 1612:  if (!(std::isnan)(val1) && !(std::isnan)(val2) && abs_error > 0 &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1612-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1612-block  1
branch  6 never executed
branch  7 never executed
    %%%%%: 1612-block  2
    %%%%%: 1612-block  3
    %%%%%: 1612-block  4
branch  8 never executed
branch  9 never executed
    #####: 1613:      abs_error < epsilon) {
    %%%%%: 1613-block  0
branch  0 never executed
branch  1 never executed
    #####: 1614:    return AssertionFailure()
    %%%%%: 1614-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1614-block  1
call    3 never executed
    $$$$$: 1614-block  2
call    4 never executed
    $$$$$: 1614-block  3
    #####: 1615:           << "The difference between " << expr1 << " and " << expr2 << " is "
    %%%%%: 1615-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1615-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1615-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1615-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1615-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1616:           << diff << ", where\n"
    %%%%%: 1616-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1616-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1617:           << expr1 << " evaluates to " << val1 << ",\n"
    %%%%%: 1617-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1617-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1617-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1617-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1618:           << expr2 << " evaluates to " << val2 << ".\nThe abs_error parameter "
    %%%%%: 1618-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1618-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1618-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1618-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1619:           << abs_error_expr << " evaluates to " << abs_error
    %%%%%: 1619-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1619-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1619-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 1620:           << " which is smaller than the minimum distance between doubles for "
    #####: 1621:              "numbers of this magnitude which is "
    %%%%%: 1621-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1622:           << epsilon
    %%%%%: 1622-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1623:           << ", thus making this EXPECT_NEAR check equivalent to "
    #####: 1624:              "EXPECT_EQUAL. Consider using EXPECT_DOUBLE_EQ instead.";
    %%%%%: 1624-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1624-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1625:  }
    #####: 1626:  return AssertionFailure()
    %%%%%: 1626-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1626-block  1
call    3 never executed
    $$$$$: 1626-block  2
call    4 never executed
    $$$$$: 1626-block  3
    #####: 1627:         << "The difference between " << expr1 << " and " << expr2 << " is "
    %%%%%: 1627-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1627-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1627-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1627-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1627-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1628:         << diff << ", which exceeds " << abs_error_expr << ", where\n"
    %%%%%: 1628-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1628-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1628-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1628-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1629:         << expr1 << " evaluates to " << val1 << ",\n"
    %%%%%: 1629-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1629-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1629-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1629-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1630:         << expr2 << " evaluates to " << val2 << ", and\n"
    %%%%%: 1630-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1630-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1630-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1630-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1631:         << abs_error_expr << " evaluates to " << abs_error << ".";
    %%%%%: 1631-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1631-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1631-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1631-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1631-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1632:}
        -: 1633:
        -: 1634:// Helper template for implementing FloatLE() and DoubleLE().
        -: 1635:template <typename RawType>
    #####: 1636:AssertionResult FloatingPointLE(const char* expr1, const char* expr2,
        -: 1637:                                RawType val1, RawType val2) {
        -: 1638:  // Returns success if val1 is less than val2,
    #####: 1639:  if (val1 < val2) {
    #####: 1640:    return AssertionSuccess();
        -: 1641:  }
        -: 1642:
        -: 1643:  // or if val1 is almost equal to val2.
    #####: 1644:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    #####: 1645:  if (lhs.AlmostEquals(rhs)) {
    #####: 1646:    return AssertionSuccess();
        -: 1647:  }
        -: 1648:
        -: 1649:  // Note that the above two checks will both fail if either val1 or
        -: 1650:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1651:  // any predicate involving a NaN must return false.
        -: 1652:
    #####: 1653:  ::std::stringstream val1_ss;
    #####: 1654:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 1655:          << val1;
        -: 1656:
    #####: 1657:  ::std::stringstream val2_ss;
    #####: 1658:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 1659:          << val2;
        -: 1660:
        -: 1661:  return AssertionFailure()
    #####: 1662:         << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    #####: 1663:         << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    #####: 1664:         << StringStreamToString(&val2_ss);
        -: 1665:}
------------------
_ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_:
function _ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 1636:AssertionResult FloatingPointLE(const char* expr1, const char* expr2,
        -: 1637:                                RawType val1, RawType val2) {
        -: 1638:  // Returns success if val1 is less than val2,
    #####: 1639:  if (val1 < val2) {
    %%%%%: 1639-block  0
branch  0 never executed
branch  1 never executed
    #####: 1640:    return AssertionSuccess();
    %%%%%: 1640-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1641:  }
        -: 1642:
        -: 1643:  // or if val1 is almost equal to val2.
    #####: 1644:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 1644-block  0
call    0 never executed
call    1 never executed
    #####: 1645:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1645-block  0
branch  3 never executed
branch  4 never executed
    #####: 1646:    return AssertionSuccess();
    %%%%%: 1646-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1647:  }
        -: 1648:
        -: 1649:  // Note that the above two checks will both fail if either val1 or
        -: 1650:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1651:  // any predicate involving a NaN must return false.
        -: 1652:
    #####: 1653:  ::std::stringstream val1_ss;
    %%%%%: 1653-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 1653-block  1
call    4 never executed
    #####: 1654:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1654-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1655:          << val1;
    %%%%%: 1655-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1656:
    #####: 1657:  ::std::stringstream val2_ss;
    %%%%%: 1657-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1657-block  1
call    3 never executed
    #####: 1658:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1658-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1659:          << val2;
    %%%%%: 1659-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1660:
        -: 1661:  return AssertionFailure()
    #####: 1662:         << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 1662-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1662-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1662-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1662-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1662-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1662-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
    $$$$$: 1662-block  6
call   19 never executed
    $$$$$: 1662-block  7
    #####: 1663:         << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 1663-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1663-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1663-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1663-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    $$$$$: 1663-block  4
call   13 never executed
    $$$$$: 1663-block  5
    #####: 1664:         << StringStreamToString(&val2_ss);
    %%%%%: 1664-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1664-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1664-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1664-block  3
call    9 never executed
call   10 never executed
    $$$$$: 1664-block  4
call   11 never executed
    $$$$$: 1664-block  5
        -: 1665:}
------------------
_ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_:
function _ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 1636:AssertionResult FloatingPointLE(const char* expr1, const char* expr2,
        -: 1637:                                RawType val1, RawType val2) {
        -: 1638:  // Returns success if val1 is less than val2,
    #####: 1639:  if (val1 < val2) {
    %%%%%: 1639-block  0
branch  0 never executed
branch  1 never executed
    #####: 1640:    return AssertionSuccess();
    %%%%%: 1640-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1641:  }
        -: 1642:
        -: 1643:  // or if val1 is almost equal to val2.
    #####: 1644:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 1644-block  0
call    0 never executed
call    1 never executed
    #####: 1645:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1645-block  0
branch  3 never executed
branch  4 never executed
    #####: 1646:    return AssertionSuccess();
    %%%%%: 1646-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1647:  }
        -: 1648:
        -: 1649:  // Note that the above two checks will both fail if either val1 or
        -: 1650:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1651:  // any predicate involving a NaN must return false.
        -: 1652:
    #####: 1653:  ::std::stringstream val1_ss;
    %%%%%: 1653-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 1653-block  1
call    4 never executed
    #####: 1654:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1654-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1655:          << val1;
    %%%%%: 1655-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1656:
    #####: 1657:  ::std::stringstream val2_ss;
    %%%%%: 1657-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1657-block  1
call    3 never executed
    #####: 1658:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1658-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1659:          << val2;
    %%%%%: 1659-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1660:
        -: 1661:  return AssertionFailure()
    #####: 1662:         << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 1662-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1662-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1662-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1662-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1662-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1662-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
    $$$$$: 1662-block  6
call   19 never executed
    $$$$$: 1662-block  7
    #####: 1663:         << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 1663-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1663-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1663-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1663-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    $$$$$: 1663-block  4
call   13 never executed
    $$$$$: 1663-block  5
    #####: 1664:         << StringStreamToString(&val2_ss);
    %%%%%: 1664-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1664-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1664-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1664-block  3
call    9 never executed
call   10 never executed
    $$$$$: 1664-block  4
call   11 never executed
    $$$$$: 1664-block  5
        -: 1665:}
------------------
        -: 1666:
        -: 1667:}  // namespace internal
        -: 1668:
        -: 1669:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1670:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing7FloatLEEPKcS1_ff called 0 returned 0% blocks executed 0%
    #####: 1671:AssertionResult FloatLE(const char* expr1, const char* expr2, float val1,
        -: 1672:                        float val2) {
    #####: 1673:  return internal::FloatingPointLE<float>(expr1, expr2, val1, val2);
    %%%%%: 1673-block  0
call    0 never executed
        -: 1674:}
        -: 1675:
        -: 1676:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1677:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing8DoubleLEEPKcS1_dd called 0 returned 0% blocks executed 0%
    #####: 1678:AssertionResult DoubleLE(const char* expr1, const char* expr2, double val1,
        -: 1679:                         double val2) {
    #####: 1680:  return internal::FloatingPointLE<double>(expr1, expr2, val1, val2);
    %%%%%: 1680-block  0
call    0 never executed
        -: 1681:}
        -: 1682:
        -: 1683:namespace internal {
        -: 1684:
        -: 1685:// The helper function for {ASSERT|EXPECT}_STREQ.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1686:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 1687:                               const char* rhs_expression, const char* lhs,
        -: 1688:                               const char* rhs) {
    #####: 1689:  if (String::CStringEquals(lhs, rhs)) {
    %%%%%: 1689-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1690:    return AssertionSuccess();
    %%%%%: 1690-block  0
call    0 never executed
        -: 1691:  }
        -: 1692:
    #####: 1693:  return EqFailure(lhs_expression, rhs_expression, PrintToString(lhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1693-block  0
call    3 never executed
    $$$$$: 1693-block  1
call    4 never executed
    $$$$$: 1693-block  2
    #####: 1694:                   PrintToString(rhs), false);
    %%%%%: 1694-block  0
call    0 never executed
    %%%%%: 1694-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 1694-block  2
call    5 never executed
        -: 1695:}
        -: 1696:
        -: 1697:// The helper function for {ASSERT|EXPECT}_STRCASEEQ.
function _ZN7testing8internal18CmpHelperSTRCASEEQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1698:AssertionResult CmpHelperSTRCASEEQ(const char* lhs_expression,
        -: 1699:                                   const char* rhs_expression, const char* lhs,
        -: 1700:                                   const char* rhs) {
    #####: 1701:  if (String::CaseInsensitiveCStringEquals(lhs, rhs)) {
    %%%%%: 1701-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1702:    return AssertionSuccess();
    %%%%%: 1702-block  0
call    0 never executed
        -: 1703:  }
        -: 1704:
    #####: 1705:  return EqFailure(lhs_expression, rhs_expression, PrintToString(lhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1705-block  0
call    3 never executed
    $$$$$: 1705-block  1
call    4 never executed
    $$$$$: 1705-block  2
    #####: 1706:                   PrintToString(rhs), true);
    %%%%%: 1706-block  0
call    0 never executed
    %%%%%: 1706-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 1706-block  2
call    5 never executed
        -: 1707:}
        -: 1708:
        -: 1709:// The helper function for {ASSERT|EXPECT}_STRNE.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1710:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 1711:                               const char* s2_expression, const char* s1,
        -: 1712:                               const char* s2) {
    #####: 1713:  if (!String::CStringEquals(s1, s2)) {
    %%%%%: 1713-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1714:    return AssertionSuccess();
    %%%%%: 1714-block  0
call    0 never executed
        -: 1715:  } else {
    #####: 1716:    return AssertionFailure()
    %%%%%: 1716-block  0
call    0 never executed
    %%%%%: 1716-block  1
call    1 never executed
    $$$$$: 1716-block  2
call    2 never executed
    #####: 1717:           << "Expected: (" << s1_expression << ") != (" << s2_expression
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1717-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1717-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1717-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1718:           << "), actual: \"" << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 1718-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1718-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1718-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1718-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1718-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1718-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 1719:  }
        -: 1720:}
        -: 1721:
        -: 1722:// The helper function for {ASSERT|EXPECT}_STRCASENE.
function _ZN7testing8internal18CmpHelperSTRCASENEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1723:AssertionResult CmpHelperSTRCASENE(const char* s1_expression,
        -: 1724:                                   const char* s2_expression, const char* s1,
        -: 1725:                                   const char* s2) {
    #####: 1726:  if (!String::CaseInsensitiveCStringEquals(s1, s2)) {
    %%%%%: 1726-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1727:    return AssertionSuccess();
    %%%%%: 1727-block  0
call    0 never executed
        -: 1728:  } else {
    #####: 1729:    return AssertionFailure()
    %%%%%: 1729-block  0
call    0 never executed
    %%%%%: 1729-block  1
call    1 never executed
    $$$$$: 1729-block  2
call    2 never executed
    #####: 1730:           << "Expected: (" << s1_expression << ") != (" << s2_expression
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1730-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1730-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1730-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1731:           << ") (ignoring case), actual: \"" << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 1731-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1731-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1731-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1731-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1731-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1731-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 1732:  }
        -: 1733:}
        -: 1734:
        -: 1735:}  // namespace internal
        -: 1736:
        -: 1737:namespace {
        -: 1738:
        -: 1739:// Helper functions for implementing IsSubString() and IsNotSubstring().
        -: 1740:
        -: 1741:// This group of overloaded functions return true if and only if needle
        -: 1742:// is a substring of haystack.  NULL is considered a substring of
        -: 1743:// itself only.
        -: 1744:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 1745:bool IsSubstringPred(const char* needle, const char* haystack) {
    #####: 1746:  if (needle == nullptr || haystack == nullptr) return needle == haystack;
    %%%%%: 1746-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1746-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1746-block  2
        -: 1747:
    #####: 1748:  return strstr(haystack, needle) != nullptr;
    %%%%%: 1748-block  0
        -: 1749:}
        -: 1750:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKwS2_ called 0 returned 0% blocks executed 0%
    #####: 1751:bool IsSubstringPred(const wchar_t* needle, const wchar_t* haystack) {
    #####: 1752:  if (needle == nullptr || haystack == nullptr) return needle == haystack;
    %%%%%: 1752-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1752-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1752-block  2
        -: 1753:
    #####: 1754:  return wcsstr(haystack, needle) != nullptr;
    %%%%%: 1754-block  0
        -: 1755:}
        -: 1756:
        -: 1757:// StringType here can be either ::std::string or ::std::wstring.
        -: 1758:template <typename StringType>
    #####: 1759:bool IsSubstringPred(const StringType& needle, const StringType& haystack) {
    #####: 1760:  return haystack.find(needle) != StringType::npos;
        -: 1761:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 1759:bool IsSubstringPred(const StringType& needle, const StringType& haystack) {
    #####: 1760:  return haystack.find(needle) != StringType::npos;
    %%%%%: 1760-block  0
call    0 never executed
        -: 1761:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 1759:bool IsSubstringPred(const StringType& needle, const StringType& haystack) {
    #####: 1760:  return haystack.find(needle) != StringType::npos;
    %%%%%: 1760-block  0
call    0 never executed
        -: 1761:}
------------------
        -: 1762:
        -: 1763:// This function implements either IsSubstring() or IsNotSubstring(),
        -: 1764:// depending on the value of the expected_to_be_substring parameter.
        -: 1765:// StringType here can be const char*, const wchar_t*, ::std::string,
        -: 1766:// or ::std::wstring.
        -: 1767:template <typename StringType>
    #####: 1768:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1769:                                const char* needle_expr,
        -: 1770:                                const char* haystack_expr,
        -: 1771:                                const StringType& needle,
        -: 1772:                                const StringType& haystack) {
    #####: 1773:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    #####: 1774:    return AssertionSuccess();
        -: 1775:
    #####: 1776:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1777:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1778:  return AssertionFailure()
    #####: 1779:         << "Value of: " << needle_expr << "\n"
    #####: 1780:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    #####: 1781:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    #####: 1782:         << "a substring of " << haystack_expr << "\n"
    #####: 1783:         << "Which is: " << begin_string_quote << haystack << "\"";
        -: 1784:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
    #####: 1768:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1769:                                const char* needle_expr,
        -: 1770:                                const char* haystack_expr,
        -: 1771:                                const StringType& needle,
        -: 1772:                                const StringType& haystack) {
    #####: 1773:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1773-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1774:    return AssertionSuccess();
    %%%%%: 1774-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1775:
    #####: 1776:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1777:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1778:  return AssertionFailure()
    #####: 1779:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1779-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1779-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1779-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1779-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1779-block  4
call   12 never executed
    $$$$$: 1779-block  5
    #####: 1780:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1780-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1780-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1780-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1780-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1781:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1781-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1781-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1781-block  2
    %%%%%: 1781-block  3
    %%%%%: 1781-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1781-block  5
call    8 never executed
    $$$$$: 1781-block  6
    #####: 1782:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1782-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1782-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1782-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1783:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1783-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1783-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1783-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1783-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1783-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1784:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
    #####: 1768:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1769:                                const char* needle_expr,
        -: 1770:                                const char* haystack_expr,
        -: 1771:                                const StringType& needle,
        -: 1772:                                const StringType& haystack) {
    #####: 1773:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1773-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1774:    return AssertionSuccess();
    %%%%%: 1774-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1775:
    #####: 1776:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1777:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1778:  return AssertionFailure()
    #####: 1779:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1779-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1779-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1779-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1779-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1779-block  4
call   12 never executed
    $$$$$: 1779-block  5
    #####: 1780:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1780-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1780-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1780-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1780-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1781:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1781-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1781-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1781-block  2
    %%%%%: 1781-block  3
    %%%%%: 1781-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1781-block  5
call    8 never executed
    $$$$$: 1781-block  6
    #####: 1782:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1782-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1782-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1782-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1783:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1783-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1783-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1783-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1783-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1783-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1784:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_ called 0 returned 0% blocks executed 0%
    #####: 1768:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1769:                                const char* needle_expr,
        -: 1770:                                const char* haystack_expr,
        -: 1771:                                const StringType& needle,
        -: 1772:                                const StringType& haystack) {
    #####: 1773:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1773-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1774:    return AssertionSuccess();
    %%%%%: 1774-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1775:
    #####: 1776:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1777:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1778:  return AssertionFailure()
    #####: 1779:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1779-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1779-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1779-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1779-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1779-block  4
call   12 never executed
    $$$$$: 1779-block  5
    #####: 1780:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1780-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1780-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1780-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1780-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1781:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1781-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1781-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1781-block  2
    %%%%%: 1781-block  3
    %%%%%: 1781-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1781-block  5
call    8 never executed
    $$$$$: 1781-block  6
    #####: 1782:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1782-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1782-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1782-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1783:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1783-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1783-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1783-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1783-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1783-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1784:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_ called 0 returned 0% blocks executed 0%
    #####: 1768:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1769:                                const char* needle_expr,
        -: 1770:                                const char* haystack_expr,
        -: 1771:                                const StringType& needle,
        -: 1772:                                const StringType& haystack) {
    #####: 1773:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1773-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1774:    return AssertionSuccess();
    %%%%%: 1774-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1775:
    #####: 1776:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1777:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1778:  return AssertionFailure()
    #####: 1779:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1779-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1779-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1779-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1779-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1779-block  4
call   12 never executed
    $$$$$: 1779-block  5
    #####: 1780:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1780-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1780-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1780-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1780-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1781:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1781-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1781-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1781-block  2
    %%%%%: 1781-block  3
    %%%%%: 1781-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1781-block  5
call    8 never executed
    $$$$$: 1781-block  6
    #####: 1782:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1782-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1782-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1782-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1783:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1783-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1783-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1783-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1783-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1783-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1784:}
------------------
        -: 1785:
        -: 1786:}  // namespace
        -: 1787:
        -: 1788:// IsSubstring() and IsNotSubstring() check whether needle is a
        -: 1789:// substring of haystack (NULL is considered a substring of itself
        -: 1790:// only), and return an appropriate error message when they fail.
        -: 1791:
function _ZN7testing11IsSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 1792:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1793:                            const char* needle, const char* haystack) {
    #####: 1794:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1794-block  0
call    0 never executed
        -: 1795:}
        -: 1796:
function _ZN7testing11IsSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1797:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1798:                            const wchar_t* needle, const wchar_t* haystack) {
    #####: 1799:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1799-block  0
call    0 never executed
        -: 1800:}
        -: 1801:
function _ZN7testing14IsNotSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 1802:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1803:                               const char* haystack_expr, const char* needle,
        -: 1804:                               const char* haystack) {
    #####: 1805:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1805-block  0
call    0 never executed
        -: 1806:}
        -: 1807:
function _ZN7testing14IsNotSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1808:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1809:                               const char* haystack_expr, const wchar_t* needle,
        -: 1810:                               const wchar_t* haystack) {
    #####: 1811:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1811-block  0
call    0 never executed
        -: 1812:}
        -: 1813:
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1814:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1815:                            const ::std::string& needle,
        -: 1816:                            const ::std::string& haystack) {
    #####: 1817:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1817-block  0
call    0 never executed
        -: 1818:}
        -: 1819:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1820:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1821:                               const char* haystack_expr,
        -: 1822:                               const ::std::string& needle,
        -: 1823:                               const ::std::string& haystack) {
    #####: 1824:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1824-block  0
call    0 never executed
        -: 1825:}
        -: 1826:
        -: 1827:#if GTEST_HAS_STD_WSTRING
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1828:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1829:                            const ::std::wstring& needle,
        -: 1830:                            const ::std::wstring& haystack) {
    #####: 1831:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1831-block  0
call    0 never executed
        -: 1832:}
        -: 1833:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1834:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1835:                               const char* haystack_expr,
        -: 1836:                               const ::std::wstring& needle,
        -: 1837:                               const ::std::wstring& haystack) {
    #####: 1838:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1838-block  0
call    0 never executed
        -: 1839:}
        -: 1840:#endif  // GTEST_HAS_STD_WSTRING
        -: 1841:
        -: 1842:namespace internal {
        -: 1843:
        -: 1844:#if GTEST_OS_WINDOWS
        -: 1845:
        -: 1846:namespace {
        -: 1847:
        -: 1848:// Helper function for IsHRESULT{SuccessFailure} predicates
        -: 1849:AssertionResult HRESULTFailureHelper(const char* expr, const char* expected,
        -: 1850:                                     long hr) {  // NOLINT
        -: 1851:#if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_WINDOWS_TV_TITLE
        -: 1852:
        -: 1853:  // Windows CE doesn't support FormatMessage.
        -: 1854:  const char error_text[] = "";
        -: 1855:
        -: 1856:#else
        -: 1857:
        -: 1858:  // Looks up the human-readable system message for the HRESULT code
        -: 1859:  // and since we're not passing any params to FormatMessage, we don't
        -: 1860:  // want inserts expanded.
        -: 1861:  const DWORD kFlags =
        -: 1862:      FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS;
        -: 1863:  const DWORD kBufSize = 4096;
        -: 1864:  // Gets the system's human readable message string for this HRESULT.
        -: 1865:  char error_text[kBufSize] = {'\0'};
        -: 1866:  DWORD message_length = ::FormatMessageA(kFlags,
        -: 1867:                                          0,  // no source, we're asking system
        -: 1868:                                          static_cast<DWORD>(hr),  // the error
        -: 1869:                                          0,  // no line width restrictions
        -: 1870:                                          error_text,  // output buffer
        -: 1871:                                          kBufSize,    // buf size
        -: 1872:                                          nullptr);  // no arguments for inserts
        -: 1873:  // Trims tailing white space (FormatMessage leaves a trailing CR-LF)
        -: 1874:  for (; message_length && IsSpace(error_text[message_length - 1]);
        -: 1875:       --message_length) {
        -: 1876:    error_text[message_length - 1] = '\0';
        -: 1877:  }
        -: 1878:
        -: 1879:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1880:
        -: 1881:  const std::string error_hex("0x" + String::FormatHexInt(hr));
        -: 1882:  return ::testing::AssertionFailure()
        -: 1883:         << "Expected: " << expr << " " << expected << ".\n"
        -: 1884:         << "  Actual: " << error_hex << " " << error_text << "\n";
        -: 1885:}
        -: 1886:
        -: 1887:}  // namespace
        -: 1888:
        -: 1889:AssertionResult IsHRESULTSuccess(const char* expr, long hr) {  // NOLINT
        -: 1890:  if (SUCCEEDED(hr)) {
        -: 1891:    return AssertionSuccess();
        -: 1892:  }
        -: 1893:  return HRESULTFailureHelper(expr, "succeeds", hr);
        -: 1894:}
        -: 1895:
        -: 1896:AssertionResult IsHRESULTFailure(const char* expr, long hr) {  // NOLINT
        -: 1897:  if (FAILED(hr)) {
        -: 1898:    return AssertionSuccess();
        -: 1899:  }
        -: 1900:  return HRESULTFailureHelper(expr, "fails", hr);
        -: 1901:}
        -: 1902:
        -: 1903:#endif  // GTEST_OS_WINDOWS
        -: 1904:
        -: 1905:// Utility functions for encoding Unicode text (wide strings) in
        -: 1906:// UTF-8.
        -: 1907:
        -: 1908:// A Unicode code-point can have up to 21 bits, and is encoded in UTF-8
        -: 1909:// like this:
        -: 1910://
        -: 1911:// Code-point length   Encoding
        -: 1912://   0 -  7 bits       0xxxxxxx
        -: 1913://   8 - 11 bits       110xxxxx 10xxxxxx
        -: 1914://  12 - 16 bits       1110xxxx 10xxxxxx 10xxxxxx
        -: 1915://  17 - 21 bits       11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
        -: 1916:
        -: 1917:// The maximum code-point a one-byte UTF-8 sequence can represent.
        -: 1918:constexpr uint32_t kMaxCodePoint1 = (static_cast<uint32_t>(1) << 7) - 1;
        -: 1919:
        -: 1920:// The maximum code-point a two-byte UTF-8 sequence can represent.
        -: 1921:constexpr uint32_t kMaxCodePoint2 = (static_cast<uint32_t>(1) << (5 + 6)) - 1;
        -: 1922:
        -: 1923:// The maximum code-point a three-byte UTF-8 sequence can represent.
        -: 1924:constexpr uint32_t kMaxCodePoint3 =
        -: 1925:    (static_cast<uint32_t>(1) << (4 + 2 * 6)) - 1;
        -: 1926:
        -: 1927:// The maximum code-point a four-byte UTF-8 sequence can represent.
        -: 1928:constexpr uint32_t kMaxCodePoint4 =
        -: 1929:    (static_cast<uint32_t>(1) << (3 + 3 * 6)) - 1;
        -: 1930:
        -: 1931:// Chops off the n lowest bits from a bit pattern.  Returns the n
        -: 1932:// lowest bits.  As a side effect, the original bit pattern will be
        -: 1933:// shifted to the right by n bits.
function _ZN7testing8internal11ChopLowBitsEPji called 0 returned 0% blocks executed 0%
    #####: 1934:inline uint32_t ChopLowBits(uint32_t* bits, int n) {
    #####: 1935:  const uint32_t low_bits = *bits & ((static_cast<uint32_t>(1) << n) - 1);
    #####: 1936:  *bits >>= n;
    #####: 1937:  return low_bits;
    %%%%%: 1937-block  0
        -: 1938:}
        -: 1939:
        -: 1940:// Converts a Unicode code point to a narrow string in UTF-8 encoding.
        -: 1941:// code_point parameter is of type uint32_t because wchar_t may not be
        -: 1942:// wide enough to contain a code point.
        -: 1943:// If the code_point is not a valid Unicode code point
        -: 1944:// (i.e. outside of Unicode range U+0 to U+10FFFF) it will be converted
        -: 1945:// to "(Invalid Unicode 0xXXXXXXXX)".
function _ZN7testing8internal15CodePointToUtf8B5cxx11Ej called 0 returned 0% blocks executed 0%
    #####: 1946:std::string CodePointToUtf8(uint32_t code_point) {
    #####: 1947:  if (code_point > kMaxCodePoint4) {
    %%%%%: 1947-block  0
branch  0 never executed
branch  1 never executed
    #####: 1948:    return "(Invalid Unicode 0x" + String::FormatHexUInt32(code_point) + ")";
    %%%%%: 1948-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1948-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1948-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1948-block  3
call    9 never executed
call   10 never executed
    $$$$$: 1948-block  4
call   11 never executed
    $$$$$: 1948-block  5
    $$$$$: 1948-block  6
call   12 never executed
    $$$$$: 1948-block  7
        -: 1949:  }
        -: 1950:
        -: 1951:  char str[5];  // Big enough for the largest valid code point.
    #####: 1952:  if (code_point <= kMaxCodePoint1) {
    %%%%%: 1952-block  0
branch  0 never executed
branch  1 never executed
    #####: 1953:    str[1] = '\0';
    #####: 1954:    str[0] = static_cast<char>(code_point);  // 0xxxxxxx
    %%%%%: 1954-block  0
    #####: 1955:  } else if (code_point <= kMaxCodePoint2) {
    %%%%%: 1955-block  0
branch  0 never executed
branch  1 never executed
    #####: 1956:    str[2] = '\0';
    #####: 1957:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1957-block  0
call    0 never executed
    #####: 1958:    str[0] = static_cast<char>(0xC0 | code_point);                   // 110xxxxx
    #####: 1959:  } else if (code_point <= kMaxCodePoint3) {
    %%%%%: 1959-block  0
branch  0 never executed
branch  1 never executed
    #####: 1960:    str[3] = '\0';
    #####: 1961:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1961-block  0
call    0 never executed
    #####: 1962:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1963:    str[0] = static_cast<char>(0xE0 | code_point);                   // 1110xxxx
        -: 1964:  } else {  // code_point <= kMaxCodePoint4
    #####: 1965:    str[4] = '\0';
    #####: 1966:    str[3] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1966-block  0
call    0 never executed
    #####: 1967:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1968:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1969:    str[0] = static_cast<char>(0xF0 | code_point);                   // 11110xxx
        -: 1970:  }
    #####: 1971:  return str;
    %%%%%: 1971-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1971-block  1
call    4 never executed
    $$$$$: 1971-block  2
call    5 never executed
    $$$$$: 1971-block  3
        -: 1972:}
        -: 1973:
        -: 1974:// The following two functions only make sense if the system
        -: 1975:// uses UTF-16 for wide string encoding. All supported systems
        -: 1976:// with 16 bit wchar_t (Windows, Cygwin) do use UTF-16.
        -: 1977:
        -: 1978:// Determines if the arguments constitute UTF-16 surrogate pair
        -: 1979:// and thus should be combined into a single Unicode code point
        -: 1980:// using CreateCodePointFromUtf16SurrogatePair.
function _ZN7testing8internal20IsUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 1981:inline bool IsUtf16SurrogatePair(wchar_t first, wchar_t second) {
        -: 1982:  return sizeof(wchar_t) == 2 && (first & 0xFC00) == 0xD800 &&
    #####: 1983:         (second & 0xFC00) == 0xDC00;
    %%%%%: 1983-block  0
        -: 1984:}
        -: 1985:
        -: 1986:// Creates a Unicode code point from UTF16 surrogate pair.
function _ZN7testing8internal37CreateCodePointFromUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 1987:inline uint32_t CreateCodePointFromUtf16SurrogatePair(wchar_t first,
        -: 1988:                                                      wchar_t second) {
    #####: 1989:  const auto first_u = static_cast<uint32_t>(first);
    #####: 1990:  const auto second_u = static_cast<uint32_t>(second);
    #####: 1991:  const uint32_t mask = (1 << 10) - 1;
        -: 1992:  return (sizeof(wchar_t) == 2)
        -: 1993:             ? (((first_u & mask) << 10) | (second_u & mask)) + 0x10000
        -: 1994:             :
        -: 1995:             // This function should not be called when the condition is
        -: 1996:             // false, but we provide a sensible default in case it is.
    #####: 1997:             first_u;
    %%%%%: 1997-block  0
        -: 1998:}
        -: 1999:
        -: 2000:// Converts a wide string to a narrow string in UTF-8 encoding.
        -: 2001:// The wide string is assumed to have the following encoding:
        -: 2002://   UTF-16 if sizeof(wchar_t) == 2 (on Windows, Cygwin)
        -: 2003://   UTF-32 if sizeof(wchar_t) == 4 (on Linux)
        -: 2004:// Parameter str points to a null-terminated wide string.
        -: 2005:// Parameter num_chars may additionally limit the number
        -: 2006:// of wchar_t characters processed. -1 is used when the entire string
        -: 2007:// should be processed.
        -: 2008:// If the string contains code points that are not valid Unicode code points
        -: 2009:// (i.e. outside of Unicode range U+0 to U+10FFFF) they will be output
        -: 2010:// as '(Invalid Unicode 0xXXXXXXXX)'. If the string is in UTF16 encoding
        -: 2011:// and contains invalid UTF-16 surrogate pairs, values in those pairs
        -: 2012:// will be encoded as individual Unicode characters from Basic Normal Plane.
function _ZN7testing8internal16WideStringToUtf8B5cxx11EPKwi called 0 returned 0% blocks executed 0%
    #####: 2013:std::string WideStringToUtf8(const wchar_t* str, int num_chars) {
    #####: 2014:  if (num_chars == -1) num_chars = static_cast<int>(wcslen(str));
    %%%%%: 2014-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2014-block  1
        -: 2015:
    #####: 2016:  ::std::stringstream stream;
    %%%%%: 2016-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2016-block  1
call    3 never executed
    $$$$$: 2016-block  2
call    4 never executed
    #####: 2017:  for (int i = 0; i < num_chars; ++i) {
    %%%%%: 2017-block  0
    %%%%%: 2017-block  1
branch  0 never executed
branch  1 never executed
        -: 2018:    uint32_t unicode_code_point;
        -: 2019:
    #####: 2020:    if (str[i] == L'\0') {
    %%%%%: 2020-block  0
branch  0 never executed
branch  1 never executed
    #####: 2021:      break;
    %%%%%: 2021-block  0
    #####: 2022:    } else if (i + 1 < num_chars && IsUtf16SurrogatePair(str[i], str[i + 1])) {
    %%%%%: 2022-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2022-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2022-block  2
    %%%%%: 2022-block  3
    %%%%%: 2022-block  4
branch  5 never executed
branch  6 never executed
        -: 2023:      unicode_code_point =
    #####: 2024:          CreateCodePointFromUtf16SurrogatePair(str[i], str[i + 1]);
    %%%%%: 2024-block  0
call    0 never executed
    #####: 2025:      i++;
        -: 2026:    } else {
    #####: 2027:      unicode_code_point = static_cast<uint32_t>(str[i]);
    %%%%%: 2027-block  0
        -: 2028:    }
        -: 2029:
    #####: 2030:    stream << CodePointToUtf8(unicode_code_point);
    %%%%%: 2030-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2030-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2030-block  2
call    6 never executed
    $$$$$: 2030-block  3
call    7 never executed
    $$$$$: 2030-block  4
        -: 2031:  }
    #####: 2032:  return StringStreamToString(&stream);
    %%%%%: 2032-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2032-block  1
        -: 2033:}
        -: 2034:
        -: 2035:// Converts a wide C string to an std::string using the UTF-8 encoding.
        -: 2036:// NULL will be converted to "(null)".
function _ZN7testing8internal6String15ShowWideCStringB5cxx11EPKw called 0 returned 0% blocks executed 0%
    #####: 2037:std::string String::ShowWideCString(const wchar_t* wide_c_str) {
    #####: 2038:  if (wide_c_str == nullptr) return "(null)";
    %%%%%: 2038-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2038-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2038-block  2
call    6 never executed
    $$$$$: 2038-block  3
call    7 never executed
        -: 2039:
    #####: 2040:  return internal::WideStringToUtf8(wide_c_str, -1);
    %%%%%: 2040-block  0
call    0 never executed
        -: 2041:}
        -: 2042:
        -: 2043:// Compares two wide C strings.  Returns true if and only if they have the
        -: 2044:// same content.
        -: 2045://
        -: 2046:// Unlike wcscmp(), this function can handle NULL argument(s).  A NULL
        -: 2047:// C string is considered different to any non-NULL C string,
        -: 2048:// including the empty string.
function _ZN7testing8internal6String17WideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 2049:bool String::WideCStringEquals(const wchar_t* lhs, const wchar_t* rhs) {
    #####: 2050:  if (lhs == nullptr) return rhs == nullptr;
    %%%%%: 2050-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2050-block  1
        -: 2051:
    #####: 2052:  if (rhs == nullptr) return false;
    %%%%%: 2052-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2052-block  1
        -: 2053:
    #####: 2054:  return wcscmp(lhs, rhs) == 0;
    %%%%%: 2054-block  0
        -: 2055:}
        -: 2056:
        -: 2057:// Helper function for *_STREQ on wide strings.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 2058:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 2059:                               const char* rhs_expression, const wchar_t* lhs,
        -: 2060:                               const wchar_t* rhs) {
    #####: 2061:  if (String::WideCStringEquals(lhs, rhs)) {
    %%%%%: 2061-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2062:    return AssertionSuccess();
    %%%%%: 2062-block  0
call    0 never executed
        -: 2063:  }
        -: 2064:
    #####: 2065:  return EqFailure(lhs_expression, rhs_expression, PrintToString(lhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2065-block  0
call    3 never executed
    $$$$$: 2065-block  1
call    4 never executed
    $$$$$: 2065-block  2
    #####: 2066:                   PrintToString(rhs), false);
    %%%%%: 2066-block  0
call    0 never executed
    %%%%%: 2066-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 2066-block  2
call    5 never executed
        -: 2067:}
        -: 2068:
        -: 2069:// Helper function for *_STRNE on wide strings.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 2070:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 2071:                               const char* s2_expression, const wchar_t* s1,
        -: 2072:                               const wchar_t* s2) {
    #####: 2073:  if (!String::WideCStringEquals(s1, s2)) {
    %%%%%: 2073-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2074:    return AssertionSuccess();
    %%%%%: 2074-block  0
call    0 never executed
        -: 2075:  }
        -: 2076:
    #####: 2077:  return AssertionFailure()
    %%%%%: 2077-block  0
call    0 never executed
    $$$$$: 2077-block  1
call    1 never executed
    #####: 2078:         << "Expected: (" << s1_expression << ") != (" << s2_expression
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2078-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2078-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2078-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2079:         << "), actual: " << PrintToString(s1) << " vs " << PrintToString(s2);
    %%%%%: 2079-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2079-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2079-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2079-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2079-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 2079-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 2079-block  6
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 2079-block  7
call   21 never executed
call   22 never executed
call   23 never executed
    $$$$$: 2079-block  8
call   24 never executed
    $$$$$: 2079-block  9
    $$$$$: 2079-block 10
call   25 never executed
    $$$$$: 2079-block 11
        -: 2080:}
        -: 2081:
        -: 2082:// Compares two C strings, ignoring case.  Returns true if and only if they have
        -: 2083:// the same content.
        -: 2084://
        -: 2085:// Unlike strcasecmp(), this function can handle NULL argument(s).  A
        -: 2086:// NULL C string is considered different to any non-NULL C string,
        -: 2087:// including the empty string.
function _ZN7testing8internal6String28CaseInsensitiveCStringEqualsEPKcS3_ called 1 returned 100% blocks executed 71%
        1: 2088:bool String::CaseInsensitiveCStringEquals(const char* lhs, const char* rhs) {
       1*: 2089:  if (lhs == nullptr) return rhs == nullptr;
        1: 2089-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 2089-block  1
       1*: 2090:  if (rhs == nullptr) return false;
        1: 2090-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 2090-block  1
        1: 2091:  return posix::StrCaseCmp(lhs, rhs) == 0;
        1: 2091-block  0
call    0 returned 1
        -: 2092:}
        -: 2093:
        -: 2094:// Compares two wide C strings, ignoring case.  Returns true if and only if they
        -: 2095:// have the same content.
        -: 2096://
        -: 2097:// Unlike wcscasecmp(), this function can handle NULL argument(s).
        -: 2098:// A NULL C string is considered different to any non-NULL wide C string,
        -: 2099:// including the empty string.
        -: 2100:// NB: The implementations on different platforms slightly differ.
        -: 2101:// On windows, this method uses _wcsicmp which compares according to LC_CTYPE
        -: 2102:// environment variable. On GNU platform this method uses wcscasecmp
        -: 2103:// which compares according to LC_CTYPE category of the current locale.
        -: 2104:// On MacOS X, it uses towlower, which also uses LC_CTYPE category of the
        -: 2105:// current locale.
function _ZN7testing8internal6String32CaseInsensitiveWideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 2106:bool String::CaseInsensitiveWideCStringEquals(const wchar_t* lhs,
        -: 2107:                                              const wchar_t* rhs) {
    #####: 2108:  if (lhs == nullptr) return rhs == nullptr;
    %%%%%: 2108-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2108-block  1
        -: 2109:
    #####: 2110:  if (rhs == nullptr) return false;
    %%%%%: 2110-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2110-block  1
        -: 2111:
        -: 2112:#if GTEST_OS_WINDOWS
        -: 2113:  return _wcsicmp(lhs, rhs) == 0;
        -: 2114:#elif GTEST_OS_LINUX && !GTEST_OS_LINUX_ANDROID
    #####: 2115:  return wcscasecmp(lhs, rhs) == 0;
    %%%%%: 2115-block  0
call    0 never executed
        -: 2116:#else
        -: 2117:  // Android, Mac OS X and Cygwin don't define wcscasecmp.
        -: 2118:  // Other unknown OSes may not define it either.
        -: 2119:  wint_t left, right;
        -: 2120:  do {
        -: 2121:    left = towlower(static_cast<wint_t>(*lhs++));
        -: 2122:    right = towlower(static_cast<wint_t>(*rhs++));
        -: 2123:  } while (left && left == right);
        -: 2124:  return left == right;
        -: 2125:#endif  // OS selector
        -: 2126:}
        -: 2127:
        -: 2128:// Returns true if and only if str ends with the given suffix, ignoring case.
        -: 2129:// Any string is considered to end with an empty suffix.
function _ZN7testing8internal6String23EndsWithCaseInsensitiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 2130:bool String::EndsWithCaseInsensitive(const std::string& str,
        -: 2131:                                     const std::string& suffix) {
    #####: 2132:  const size_t str_len = str.length();
    %%%%%: 2132-block  0
call    0 never executed
    #####: 2133:  const size_t suffix_len = suffix.length();
call    0 never executed
    #####: 2134:  return (str_len >= suffix_len) &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2134-block  0
    %%%%%: 2134-block  1
    #####: 2135:         CaseInsensitiveCStringEquals(str.c_str() + str_len - suffix_len,
    %%%%%: 2135-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2136:                                      suffix.c_str());
    %%%%%: 2136-block  0
        -: 2137:}
        -: 2138:
        -: 2139:// Formats an int value as "%02d".
function _ZN7testing8internal6String15FormatIntWidth2B5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 2140:std::string String::FormatIntWidth2(int value) {
    #####: 2141:  return FormatIntWidthN(value, 2);
    %%%%%: 2141-block  0
call    0 never executed
        -: 2142:}
        -: 2143:
        -: 2144:// Formats an int value to given width with leading zeros.
function _ZN7testing8internal6String15FormatIntWidthNB5cxx11Eii called 0 returned 0% blocks executed 0%
    #####: 2145:std::string String::FormatIntWidthN(int value, int width) {
    #####: 2146:  std::stringstream ss;
    %%%%%: 2146-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2146-block  1
call    3 never executed
    $$$$$: 2146-block  2
call    4 never executed
    #####: 2147:  ss << std::setfill('0') << std::setw(width) << value;
    %%%%%: 2147-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2147-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2147-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2148:  return ss.str();
    %%%%%: 2148-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2148-block  1
        -: 2149:}
        -: 2150:
        -: 2151:// Formats an int value as "%X".
function _ZN7testing8internal6String15FormatHexUInt32B5cxx11Ej called 0 returned 0% blocks executed 0%
    #####: 2152:std::string String::FormatHexUInt32(uint32_t value) {
    #####: 2153:  std::stringstream ss;
    %%%%%: 2153-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2153-block  1
call    3 never executed
    $$$$$: 2153-block  2
call    4 never executed
    #####: 2154:  ss << std::hex << std::uppercase << value;
    %%%%%: 2154-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2154-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2154-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2155:  return ss.str();
    %%%%%: 2155-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2155-block  1
        -: 2156:}
        -: 2157:
        -: 2158:// Formats an int value as "%X".
function _ZN7testing8internal6String12FormatHexIntB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 2159:std::string String::FormatHexInt(int value) {
    #####: 2160:  return FormatHexUInt32(static_cast<uint32_t>(value));
    %%%%%: 2160-block  0
call    0 never executed
        -: 2161:}
        -: 2162:
        -: 2163:// Formats a byte as "%02X".
function _ZN7testing8internal6String10FormatByteB5cxx11Eh called 0 returned 0% blocks executed 0%
    #####: 2164:std::string String::FormatByte(unsigned char value) {
    #####: 2165:  std::stringstream ss;
    %%%%%: 2165-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2165-block  1
call    3 never executed
    $$$$$: 2165-block  2
call    4 never executed
    #####: 2166:  ss << std::setfill('0') << std::setw(2) << std::hex << std::uppercase
    %%%%%: 2166-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2166-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2166-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2166-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    #####: 2167:     << static_cast<unsigned int>(value);
    %%%%%: 2167-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2168:  return ss.str();
    %%%%%: 2168-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2168-block  1
        -: 2169:}
        -: 2170:
        -: 2171:// Converts the buffer in a stringstream to an std::string, converting NUL
        -: 2172:// bytes to "\\0" along the way.
function _ZN7testing8internal20StringStreamToStringEPNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEE called 57 returned 100% blocks executed 75%
       57: 2173:std::string StringStreamToString(::std::stringstream* ss) {
      114: 2174:  const ::std::string& str = ss->str();
       57: 2174-block  0
call    0 returned 57
branch  1 taken 57 (fallthrough)
branch  2 taken 0 (throw)
       57: 2174-block  1
call    3 returned 57
    $$$$$: 2174-block  2
call    4 never executed
       57: 2175:  const char* const start = str.c_str();
       57: 2175-block  0
call    0 returned 57
       57: 2176:  const char* const end = start + str.length();
call    0 returned 57
        -: 2177:
       57: 2178:  std::string result;
call    0 returned 57
       57: 2179:  result.reserve(static_cast<size_t>(2 * (end - start)));
call    0 returned 57
branch  1 taken 57 (fallthrough)
branch  2 taken 0 (throw)
      988: 2180:  for (const char* ch = start; ch != end; ++ch) {
       57: 2180-block  0
      988: 2180-block  1
branch  0 taken 931 (fallthrough)
branch  1 taken 57
      931: 2180-block  2
      931: 2181:    if (*ch == '\0') {
      931: 2181-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 931
    #####: 2182:      result += "\\0";  // Replaces NUL with "\\0";
    %%%%%: 2182-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2183:    } else {
      931: 2184:      result += *ch;
      931: 2184-block  0
call    0 returned 931
branch  1 taken 931 (fallthrough)
branch  2 taken 0 (throw)
        -: 2185:    }
        -: 2186:  }
        -: 2187:
      114: 2188:  return result;
       57: 2188-block  0
       57: 2188-block  1
        -: 2189:}
        -: 2190:
        -: 2191:// Appends the user-supplied message to the Google-Test-generated message.
function _ZN7testing8internal17AppendUserMessageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 2192:std::string AppendUserMessage(const std::string& gtest_msg,
        -: 2193:                              const Message& user_msg) {
        -: 2194:  // Appends the user message if it's non-empty.
    #####: 2195:  const std::string user_msg_string = user_msg.GetString();
    %%%%%: 2195-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2195-block  1
call    3 never executed
    $$$$$: 2195-block  2
call    4 never executed
    #####: 2196:  if (user_msg_string.empty()) {
    %%%%%: 2196-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2197:    return gtest_msg;
    %%%%%: 2197-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2198:  }
    #####: 2199:  if (gtest_msg.empty()) {
    %%%%%: 2199-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2200:    return user_msg_string;
    %%%%%: 2200-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2201:  }
    #####: 2202:  return gtest_msg + "\n" + user_msg_string;
    %%%%%: 2202-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2202-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2202-block  2
call    6 never executed
    $$$$$: 2202-block  3
call    7 never executed
    $$$$$: 2202-block  4
        -: 2203:}
        -: 2204:
        -: 2205:}  // namespace internal
        -: 2206:
        -: 2207:// class TestResult
        -: 2208:
        -: 2209:// Creates an empty TestResult.
function _ZN7testing10TestResultC2Ev called 7 returned 100% blocks executed 100%
        7: 2210:TestResult::TestResult()
        7: 2211:    : death_test_count_(0), start_timestamp_(0), elapsed_time_(0) {}
        7: 2211-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
        -: 2212:
        -: 2213:// D'tor.
function _ZN7testing10TestResultD2Ev called 7 returned 100% blocks executed 100%
        7: 2214:TestResult::~TestResult() {}
        7: 2214-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
        -: 2215:
        -: 2216:// Returns the i-th test part result among all the results. i can
        -: 2217:// range from 0 to total_part_count() - 1. If i is not in that range,
        -: 2218:// aborts the program.
function _ZNK7testing10TestResult17GetTestPartResultEi called 0 returned 0% blocks executed 0%
    #####: 2219:const TestPartResult& TestResult::GetTestPartResult(int i) const {
    #####: 2220:  if (i < 0 || i >= total_part_count()) internal::posix::Abort();
    %%%%%: 2220-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2220-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2220-block  2
    %%%%%: 2220-block  3
    %%%%%: 2220-block  4
branch  5 never executed
branch  6 never executed
    %%%%%: 2220-block  5
call    7 never executed
    #####: 2221:  return test_part_results_.at(static_cast<size_t>(i));
    %%%%%: 2221-block  0
call    0 never executed
        -: 2222:}
        -: 2223:
        -: 2224:// Returns the i-th test property. i can range from 0 to
        -: 2225:// test_property_count() - 1. If i is not in that range, aborts the
        -: 2226:// program.
function _ZNK7testing10TestResult15GetTestPropertyEi called 0 returned 0% blocks executed 0%
    #####: 2227:const TestProperty& TestResult::GetTestProperty(int i) const {
    #####: 2228:  if (i < 0 || i >= test_property_count()) internal::posix::Abort();
    %%%%%: 2228-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2228-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2228-block  2
    %%%%%: 2228-block  3
    %%%%%: 2228-block  4
branch  5 never executed
branch  6 never executed
    %%%%%: 2228-block  5
call    7 never executed
    #####: 2229:  return test_properties_.at(static_cast<size_t>(i));
    %%%%%: 2229-block  0
call    0 never executed
        -: 2230:}
        -: 2231:
        -: 2232:// Clears the test part results.
function _ZN7testing10TestResult20ClearTestPartResultsEv called 0 returned 0% blocks executed 0%
    #####: 2233:void TestResult::ClearTestPartResults() { test_part_results_.clear(); }
    %%%%%: 2233-block  0
call    0 never executed
        -: 2234:
        -: 2235:// Adds a test part result to the list.
function _ZN7testing10TestResult17AddTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2236:void TestResult::AddTestPartResult(const TestPartResult& test_part_result) {
    #####: 2237:  test_part_results_.push_back(test_part_result);
    %%%%%: 2237-block  0
call    0 never executed
    #####: 2238:}
        -: 2239:
        -: 2240:// Adds a test property to the list. If a property with the same key as the
        -: 2241:// supplied property is already represented, the value of this test_property
        -: 2242:// replaces the old value for that key.
function _ZN7testing10TestResult14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 2243:void TestResult::RecordProperty(const std::string& xml_element,
        -: 2244:                                const TestProperty& test_property) {
    #####: 2245:  if (!ValidateTestProperty(xml_element, test_property)) {
    %%%%%: 2245-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2245-block  1
branch  3 never executed
branch  4 never executed
    #####: 2246:    return;
    %%%%%: 2246-block  0
    %%%%%: 2246-block  1
        -: 2247:  }
    #####: 2248:  internal::MutexLock lock(&test_properties_mutex_);
    %%%%%: 2248-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2248-block  1
call    3 never executed
        -: 2249:  const std::vector<TestProperty>::iterator property_with_matching_key =
        -: 2250:      std::find_if(test_properties_.begin(), test_properties_.end(),
    #####: 2251:                   internal::TestPropertyKeyIs(test_property.key()));
    %%%%%: 2251-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2251-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2251-block  2
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 2251-block  3
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 2251-block  4
call   16 never executed
    $$$$$: 2251-block  5
    $$$$$: 2251-block  6
call   17 never executed
    $$$$$: 2251-block  7
    $$$$$: 2251-block  8
call   18 never executed
    $$$$$: 2251-block  9
    #####: 2252:  if (property_with_matching_key == test_properties_.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2253:    test_properties_.push_back(test_property);
    %%%%%: 2253-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2254:    return;
    %%%%%: 2254-block  0
        -: 2255:  }
    #####: 2256:  property_with_matching_key->SetValue(test_property.value());
    %%%%%: 2256-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2256-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2256-block  2
call    9 never executed
call   10 never executed
    $$$$$: 2256-block  3
call   11 never executed
    $$$$$: 2256-block  4
    $$$$$: 2256-block  5
call   12 never executed
    $$$$$: 2256-block  6
        -: 2257:}
        -: 2258:
        -: 2259:// The list of reserved attributes used in the <testsuites> element of XML
        -: 2260:// output.
        -: 2261:static const char* const kReservedTestSuitesAttributes[] = {
        -: 2262:    "disabled",    "errors", "failures", "name",
        -: 2263:    "random_seed", "tests",  "time",     "timestamp"};
        -: 2264:
        -: 2265:// The list of reserved attributes used in the <testsuite> element of XML
        -: 2266:// output.
        -: 2267:static const char* const kReservedTestSuiteAttributes[] = {
        -: 2268:    "disabled", "errors", "failures",  "name",
        -: 2269:    "tests",    "time",   "timestamp", "skipped"};
        -: 2270:
        -: 2271:// The list of reserved attributes used in the <testcase> element of XML output.
        -: 2272:static const char* const kReservedTestCaseAttributes[] = {
        -: 2273:    "classname",  "name",        "status", "time",
        -: 2274:    "type_param", "value_param", "file",   "line"};
        -: 2275:
        -: 2276:// Use a slightly different set for allowed output to ensure existing tests can
        -: 2277:// still RecordProperty("result") or "RecordProperty(timestamp")
        -: 2278:static const char* const kReservedOutputTestCaseAttributes[] = {
        -: 2279:    "classname",   "name", "status", "time",   "type_param",
        -: 2280:    "value_param", "file", "line",   "result", "timestamp"};
        -: 2281:
        -: 2282:template <size_t kSize>
    #####: 2283:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2284:  return std::vector<std::string>(array, array + kSize);
        -: 2285:}
------------------
_ZN7testing13ArrayAsVectorILm10EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc:
function _ZN7testing13ArrayAsVectorILm10EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 2283:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2284:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 2284-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2284-block  1
call    4 never executed
    %%%%%: 2284-block  2
    $$$$$: 2284-block  3
call    5 never executed
        -: 2285:}
------------------
_ZN7testing13ArrayAsVectorILm8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc:
function _ZN7testing13ArrayAsVectorILm8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 2283:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2284:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 2284-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2284-block  1
call    4 never executed
    %%%%%: 2284-block  2
    $$$$$: 2284-block  3
call    5 never executed
        -: 2285:}
------------------
        -: 2286:
function _ZN7testingL31GetReservedAttributesForElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2287:static std::vector<std::string> GetReservedAttributesForElement(
        -: 2288:    const std::string& xml_element) {
    #####: 2289:  if (xml_element == "testsuites") {
    %%%%%: 2289-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2290:    return ArrayAsVector(kReservedTestSuitesAttributes);
    %%%%%: 2290-block  0
call    0 never executed
    #####: 2291:  } else if (xml_element == "testsuite") {
    %%%%%: 2291-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2292:    return ArrayAsVector(kReservedTestSuiteAttributes);
    %%%%%: 2292-block  0
call    0 never executed
    #####: 2293:  } else if (xml_element == "testcase") {
    %%%%%: 2293-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2294:    return ArrayAsVector(kReservedTestCaseAttributes);
    %%%%%: 2294-block  0
call    0 never executed
        -: 2295:  } else {
    #####: 2296:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    %%%%%: 2296-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2296-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2296-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2296-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 2296-block  4
call   14 never executed
    $$$$$: 2296-block  5
call   15 never executed
        -: 2297:  }
        -: 2298:  // This code is unreachable but some compilers may not realizes that.
    #####: 2299:  return std::vector<std::string>();
    %%%%%: 2299-block  0
call    0 never executed
        -: 2300:}
        -: 2301:
        -: 2302:// TODO(jdesprez): Merge the two getReserved attributes once skip is improved
function _ZN7testingL37GetReservedOutputAttributesForElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2303:static std::vector<std::string> GetReservedOutputAttributesForElement(
        -: 2304:    const std::string& xml_element) {
    #####: 2305:  if (xml_element == "testsuites") {
    %%%%%: 2305-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2306:    return ArrayAsVector(kReservedTestSuitesAttributes);
    %%%%%: 2306-block  0
call    0 never executed
    #####: 2307:  } else if (xml_element == "testsuite") {
    %%%%%: 2307-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2308:    return ArrayAsVector(kReservedTestSuiteAttributes);
    %%%%%: 2308-block  0
call    0 never executed
    #####: 2309:  } else if (xml_element == "testcase") {
    %%%%%: 2309-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2310:    return ArrayAsVector(kReservedOutputTestCaseAttributes);
    %%%%%: 2310-block  0
call    0 never executed
        -: 2311:  } else {
    #####: 2312:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    %%%%%: 2312-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2312-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2312-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2312-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 2312-block  4
call   14 never executed
    $$$$$: 2312-block  5
call   15 never executed
        -: 2313:  }
        -: 2314:  // This code is unreachable but some compilers may not realizes that.
    #####: 2315:  return std::vector<std::string>();
    %%%%%: 2315-block  0
call    0 never executed
        -: 2316:}
        -: 2317:
function _ZN7testingL14FormatWordListERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EE called 0 returned 0% blocks executed 0%
    #####: 2318:static std::string FormatWordList(const std::vector<std::string>& words) {
    #####: 2319:  Message word_list;
    %%%%%: 2319-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2319-block  1
call    3 never executed
    $$$$$: 2319-block  2
call    4 never executed
    #####: 2320:  for (size_t i = 0; i < words.size(); ++i) {
    %%%%%: 2320-block  0
    %%%%%: 2320-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2320-block  2
    #####: 2321:    if (i > 0 && words.size() > 2) {
    %%%%%: 2321-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2321-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2321-block  2
    %%%%%: 2321-block  3
    %%%%%: 2321-block  4
branch  5 never executed
branch  6 never executed
    #####: 2322:      word_list << ", ";
    %%%%%: 2322-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2323:    }
    #####: 2324:    if (i == words.size() - 1) {
    %%%%%: 2324-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2325:      word_list << "and ";
    %%%%%: 2325-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2326:    }
    #####: 2327:    word_list << "'" << words[i] << "'";
    %%%%%: 2327-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2327-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2327-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
        -: 2328:  }
    #####: 2329:  return word_list.GetString();
    %%%%%: 2329-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2329-block  1
        -: 2330:}
        -: 2331:
function _ZN7testingL24ValidateTestPropertyNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS5_SaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 2332:static bool ValidateTestPropertyName(
        -: 2333:    const std::string& property_name,
        -: 2334:    const std::vector<std::string>& reserved_names) {
    #####: 2335:  if (std::find(reserved_names.begin(), reserved_names.end(), property_name) !=
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2335-block  0
call    5 never executed
    #####: 2336:      reserved_names.end()) {
    %%%%%: 2336-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2336-block  1
call    3 never executed
    #####: 2337:    ADD_FAILURE() << "Reserved key used in RecordProperty(): " << property_name
    %%%%%: 2337-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2337-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2337-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 2337-block  3
call   10 never executed
    $$$$$: 2337-block  4
call   11 never executed
    $$$$$: 2337-block  5
    $$$$$: 2337-block  6
call   12 never executed
    #####: 2338:                  << " (" << FormatWordList(reserved_names)
    %%%%%: 2338-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2338-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2338-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 2338-block  3
call   11 never executed
    $$$$$: 2338-block  4
    #####: 2339:                  << " are reserved by " << GTEST_NAME_ << ")";
    %%%%%: 2339-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2339-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2339-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2339-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2340:    return false;
        -: 2341:  }
    #####: 2342:  return true;
    %%%%%: 2342-block  0
        -: 2343:}
        -: 2344:
        -: 2345:// Adds a failure if the key is a reserved attribute of the element named
        -: 2346:// xml_element.  Returns true if the property is valid.
function _ZN7testing10TestResult20ValidateTestPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 2347:bool TestResult::ValidateTestProperty(const std::string& xml_element,
        -: 2348:                                      const TestProperty& test_property) {
    #####: 2349:  return ValidateTestPropertyName(test_property.key(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2349-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2349-block  1
call    8 never executed
call    9 never executed
    $$$$$: 2349-block  2
call   10 never executed
    $$$$$: 2349-block  3
    $$$$$: 2349-block  4
call   11 never executed
    $$$$$: 2349-block  5
    #####: 2350:                                  GetReservedAttributesForElement(xml_element));
    %%%%%: 2350-block  0
call    0 never executed
    %%%%%: 2350-block  1
call    1 never executed
    %%%%%: 2350-block  2
    $$$$$: 2350-block  3
call    2 never executed
        -: 2351:}
        -: 2352:
        -: 2353:// Clears the object.
function _ZN7testing10TestResult5ClearEv called 6 returned 100% blocks executed 100%
        6: 2354:void TestResult::Clear() {
        6: 2355:  test_part_results_.clear();
        6: 2355-block  0
call    0 returned 6
        6: 2356:  test_properties_.clear();
call    0 returned 6
        6: 2357:  death_test_count_ = 0;
        6: 2358:  elapsed_time_ = 0;
        6: 2359:}
        -: 2360:
        -: 2361:// Returns true off the test part was skipped.
function _ZN7testingL15TestPartSkippedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2362:static bool TestPartSkipped(const TestPartResult& result) {
    #####: 2363:  return result.skipped();
    %%%%%: 2363-block  0
call    0 never executed
        -: 2364:}
        -: 2365:
        -: 2366:// Returns true if and only if the test was skipped.
function _ZNK7testing10TestResult7SkippedEv called 26 returned 100% blocks executed 88%
       26: 2367:bool TestResult::Skipped() const {
      26*: 2368:  return !Failed() && CountIf(test_part_results_, TestPartSkipped) > 0;
       26: 2368-block  0
call    0 returned 26
branch  1 taken 26 (fallthrough)
branch  2 taken 0
       26: 2368-block  1
call    3 returned 26
branch  4 taken 0 (fallthrough)
branch  5 taken 26
    %%%%%: 2368-block  2
       26: 2368-block  3
       26: 2368-block  4
        -: 2369:}
        -: 2370:
        -: 2371:// Returns true if and only if the test failed.
function _ZNK7testing10TestResult6FailedEv called 56 returned 100% blocks executed 50%
       56: 2372:bool TestResult::Failed() const {
      56*: 2373:  for (int i = 0; i < total_part_count(); ++i) {
       56: 2373-block  0
       56: 2373-block  1
call    0 returned 56
branch  1 taken 0 (fallthrough)
branch  2 taken 56
    %%%%%: 2373-block  2
    #####: 2374:    if (GetTestPartResult(i).failed()) return true;
    %%%%%: 2374-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2374-block  1
        -: 2375:  }
       56: 2376:  return false;
       56: 2376-block  0
        -: 2377:}
        -: 2378:
        -: 2379:// Returns true if and only if the test part fatally failed.
function _ZN7testingL21TestPartFatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2380:static bool TestPartFatallyFailed(const TestPartResult& result) {
    #####: 2381:  return result.fatally_failed();
    %%%%%: 2381-block  0
call    0 never executed
        -: 2382:}
        -: 2383:
        -: 2384:// Returns true if and only if the test fatally failed.
function _ZNK7testing10TestResult15HasFatalFailureEv called 11 returned 100% blocks executed 100%
       11: 2385:bool TestResult::HasFatalFailure() const {
       11: 2386:  return CountIf(test_part_results_, TestPartFatallyFailed) > 0;
       11: 2386-block  0
call    0 returned 11
        -: 2387:}
        -: 2388:
        -: 2389:// Returns true if and only if the test part non-fatally failed.
function _ZN7testingL24TestPartNonfatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2390:static bool TestPartNonfatallyFailed(const TestPartResult& result) {
    #####: 2391:  return result.nonfatally_failed();
    %%%%%: 2391-block  0
call    0 never executed
        -: 2392:}
        -: 2393:
        -: 2394:// Returns true if and only if the test has a non-fatal failure.
function _ZNK7testing10TestResult18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2395:bool TestResult::HasNonfatalFailure() const {
    #####: 2396:  return CountIf(test_part_results_, TestPartNonfatallyFailed) > 0;
    %%%%%: 2396-block  0
call    0 never executed
        -: 2397:}
        -: 2398:
        -: 2399:// Gets the number of all test parts.  This is the sum of the number
        -: 2400:// of successful test parts and the number of failed test parts.
function _ZNK7testing10TestResult16total_part_countEv called 56 returned 100% blocks executed 100%
       56: 2401:int TestResult::total_part_count() const {
       56: 2402:  return static_cast<int>(test_part_results_.size());
       56: 2402-block  0
call    0 returned 56
        -: 2403:}
        -: 2404:
        -: 2405:// Returns the number of the test properties.
function _ZNK7testing10TestResult19test_property_countEv called 0 returned 0% blocks executed 0%
    #####: 2406:int TestResult::test_property_count() const {
    #####: 2407:  return static_cast<int>(test_properties_.size());
    %%%%%: 2407-block  0
call    0 never executed
        -: 2408:}
        -: 2409:
        -: 2410:// class Test
        -: 2411:
        -: 2412:// Creates a Test object.
        -: 2413:
        -: 2414:// The c'tor saves the states of all flags.
function _ZN7testing4TestC2Ev called 5 returned 100% blocks executed 83%
        5: 2415:Test::Test() : gtest_flag_saver_(new GTEST_FLAG_SAVER_) {}
        5: 2415-block  0
call    0 returned 5
call    1 returned 5
branch  2 taken 5 (fallthrough)
branch  3 taken 0 (throw)
        5: 2415-block  1
call    4 returned 5
    $$$$$: 2415-block  2
call    5 never executed
        -: 2416:
        -: 2417:// The d'tor restores the states of all flags.  The actual work is
        -: 2418:// done by the d'tor of the gtest_flag_saver_ field, and thus not
        -: 2419:// visible here.
       5*: 2420:Test::~Test() {}
------------------
_ZN7testing4TestD0Ev:
function _ZN7testing4TestD0Ev called 0 returned 0% blocks executed 0%
    #####: 2420:Test::~Test() {}
    %%%%%: 2420-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing4TestD2Ev:
function _ZN7testing4TestD2Ev called 5 returned 100% blocks executed 100%
        5: 2420:Test::~Test() {}
        5: 2420-block  0
call    0 returned 5
------------------
        -: 2421:
        -: 2422:// Sets up the test fixture.
        -: 2423://
        -: 2424:// A sub-class may override this.
function _ZN7testing4Test5SetUpEv called 5 returned 100% blocks executed 100%
        5: 2425:void Test::SetUp() {}
        -: 2426:
        -: 2427:// Tears down the test fixture.
        -: 2428://
        -: 2429:// A sub-class may override this.
function _ZN7testing4Test8TearDownEv called 5 returned 100% blocks executed 100%
        5: 2430:void Test::TearDown() {}
        -: 2431:
        -: 2432:// Allows user supplied key value pairs to be recorded for later output.
function _ZN7testing4Test14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 2433:void Test::RecordProperty(const std::string& key, const std::string& value) {
    #####: 2434:  UnitTest::GetInstance()->RecordProperty(key, value);
    %%%%%: 2434-block  0
call    0 never executed
call    1 never executed
    #####: 2435:}
        -: 2436:
        -: 2437:// Allows user supplied key value pairs to be recorded for later output.
function _ZN7testing4Test14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi called 0 returned 0% blocks executed 0%
    #####: 2438:void Test::RecordProperty(const std::string& key, int value) {
    #####: 2439:  Message value_message;
    %%%%%: 2439-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2439-block  1
call    3 never executed
    #####: 2440:  value_message << value;
    %%%%%: 2440-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2441:  RecordProperty(key, value_message.GetString().c_str());
    %%%%%: 2441-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2441-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2441-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2441-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 2441-block  4
call   15 never executed
    $$$$$: 2441-block  5
    $$$$$: 2441-block  6
call   16 never executed
    $$$$$: 2441-block  7
    $$$$$: 2441-block  8
call   17 never executed
    $$$$$: 2441-block  9
    #####: 2442:}
        -: 2443:
        -: 2444:namespace internal {
        -: 2445:
function _ZN7testing8internal30ReportFailureInUnknownLocationENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2446:void ReportFailureInUnknownLocation(TestPartResult::Type result_type,
        -: 2447:                                    const std::string& message) {
        -: 2448:  // This function is a friend of UnitTest and as such has access to
        -: 2449:  // AddTestPartResult.
    #####: 2450:  UnitTest::GetInstance()->AddTestPartResult(
    %%%%%: 2450-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2450-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2450-block  2
call    8 never executed
call    9 never executed
    $$$$$: 2450-block  3
call   10 never executed
    $$$$$: 2450-block  4
    $$$$$: 2450-block  5
call   11 never executed
        -: 2451:      result_type,
        -: 2452:      nullptr,  // No info about the source file where the exception occurred.
        -: 2453:      -1,       // We have no info on which line caused the exception.
        -: 2454:      message,
        -: 2455:      "");  // No stack trace, either.
    #####: 2456:}
        -: 2457:
        -: 2458:}  // namespace internal
        -: 2459:
        -: 2460:// Google Test requires all tests in the same test suite to use the same test
        -: 2461:// fixture class.  This function checks if the current test has the
        -: 2462:// same fixture class as the first test in the current test suite.  If
        -: 2463:// yes, it returns true; otherwise it generates a Google Test failure and
        -: 2464:// returns false.
function _ZN7testing4Test19HasSameFixtureClassEv called 5 returned 100% blocks executed 15%
        5: 2465:bool Test::HasSameFixtureClass() {
        5: 2466:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        5: 2466-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5: 2467:  const TestSuite* const test_suite = impl->current_test_suite();
        5: 2467-block  0
call    0 returned 5
        -: 2468:
        -: 2469:  // Info about the first test in the current test suite.
        5: 2470:  const TestInfo* const first_test_info = test_suite->test_info_list()[0];
call    0 returned 5
call    1 returned 5
        5: 2471:  const internal::TypeId first_fixture_id = first_test_info->fixture_class_id_;
        5: 2472:  const char* const first_test_name = first_test_info->name();
call    0 returned 5
        -: 2473:
        -: 2474:  // Info about the current test.
        5: 2475:  const TestInfo* const this_test_info = impl->current_test_info();
call    0 returned 5
        5: 2476:  const internal::TypeId this_fixture_id = this_test_info->fixture_class_id_;
        5: 2477:  const char* const this_test_name = this_test_info->name();
call    0 returned 5
        -: 2478:
        5: 2479:  if (this_fixture_id != first_fixture_id) {
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        -: 2480:    // Is the first test defined using TEST?
    #####: 2481:    const bool first_is_TEST = first_fixture_id == internal::GetTestTypeId();
    %%%%%: 2481-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2482:    // Is this test defined using TEST?
    #####: 2483:    const bool this_is_TEST = this_fixture_id == internal::GetTestTypeId();
    %%%%%: 2483-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2484:
    #####: 2485:    if (first_is_TEST || this_is_TEST) {
    %%%%%: 2485-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2485-block  1
branch  2 never executed
branch  3 never executed
        -: 2486:      // Both TEST and TEST_F appear in same test suite, which is incorrect.
        -: 2487:      // Tell the user how to fix this.
        -: 2488:
        -: 2489:      // Gets the name of the TEST and the name of the TEST_F.  Note
        -: 2490:      // that first_is_TEST and this_is_TEST cannot both be true, as
        -: 2491:      // the fixture IDs are different for the two tests.
    #####: 2492:      const char* const TEST_name =
    %%%%%: 2492-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2492-block  1
    %%%%%: 2492-block  2
        -: 2493:          first_is_TEST ? first_test_name : this_test_name;
    #####: 2494:      const char* const TEST_F_name =
    %%%%%: 2494-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2494-block  1
    %%%%%: 2494-block  2
        -: 2495:          first_is_TEST ? this_test_name : first_test_name;
        -: 2496:
    #####: 2497:      ADD_FAILURE()
    %%%%%: 2497-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2497-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2497-block  2
call    6 never executed
    $$$$$: 2497-block  3
call    7 never executed
    $$$$$: 2497-block  4
    $$$$$: 2497-block  5
call    8 never executed
    $$$$$: 2497-block  6
    #####: 2498:          << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2498-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2499:          << "class, so mixing TEST_F and TEST in the same test suite is\n"
    %%%%%: 2499-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2500:          << "illegal.  In test suite " << this_test_info->test_suite_name()
    %%%%%: 2500-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2500-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 2500-block  2
    #####: 2501:          << ",\n"
    %%%%%: 2501-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2502:          << "test " << TEST_F_name << " is defined using TEST_F but\n"
    %%%%%: 2502-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2502-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2502-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2503:          << "test " << TEST_name << " is defined using TEST.  You probably\n"
    %%%%%: 2503-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2503-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2503-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2504:          << "want to change the TEST to TEST_F or move it to another test\n"
    %%%%%: 2504-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2505:          << "case.";
    %%%%%: 2505-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2505-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2506:    } else {
        -: 2507:      // Two fixture classes with the same name appear in two different
        -: 2508:      // namespaces, which is not allowed. Tell the user how to fix this.
    #####: 2509:      ADD_FAILURE()
    %%%%%: 2509-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2509-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2509-block  2
call    6 never executed
    $$$$$: 2509-block  3
call    7 never executed
    $$$$$: 2509-block  4
    $$$$$: 2509-block  5
call    8 never executed
    $$$$$: 2509-block  6
    #####: 2510:          << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2510-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2511:          << "class.  However, in test suite "
    %%%%%: 2511-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2512:          << this_test_info->test_suite_name() << ",\n"
    %%%%%: 2512-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2512-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 2512-block  2
    #####: 2513:          << "you defined test " << first_test_name << " and test "
    %%%%%: 2513-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2513-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2513-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2514:          << this_test_name << "\n"
    %%%%%: 2514-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2514-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2515:          << "using two different test fixture classes.  This can happen if\n"
    %%%%%: 2515-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2516:          << "the two classes are from different namespaces or translation\n"
    %%%%%: 2516-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2517:          << "units and have the same name.  You should probably rename one\n"
    %%%%%: 2517-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2518:          << "of the classes to put the tests into different test suites.";
    %%%%%: 2518-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2518-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2519:    }
    #####: 2520:    return false;
    %%%%%: 2520-block  0
        -: 2521:  }
        -: 2522:
        5: 2523:  return true;
        5: 2523-block  0
        -: 2524:}
        -: 2525:
        -: 2526:#if GTEST_HAS_SEH
        -: 2527:
        -: 2528:// Adds an "exception thrown" fatal failure to the current test.  This
        -: 2529:// function returns its result via an output parameter pointer because VC++
        -: 2530:// prohibits creation of objects with destructors on stack in functions
        -: 2531:// using __try (see error C2712).
        -: 2532:static std::string* FormatSehExceptionMessage(DWORD exception_code,
        -: 2533:                                              const char* location) {
        -: 2534:  Message message;
        -: 2535:  message << "SEH exception with code 0x" << std::setbase(16) << exception_code
        -: 2536:          << std::setbase(10) << " thrown in " << location << ".";
        -: 2537:
        -: 2538:  return new std::string(message.GetString());
        -: 2539:}
        -: 2540:
        -: 2541:#endif  // GTEST_HAS_SEH
        -: 2542:
        -: 2543:namespace internal {
        -: 2544:
        -: 2545:#if GTEST_HAS_EXCEPTIONS
        -: 2546:
        -: 2547:// Adds an "exception thrown" fatal failure to the current test.
function _ZN7testing8internalL25FormatCxxExceptionMessageEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 2548:static std::string FormatCxxExceptionMessage(const char* description,
        -: 2549:                                             const char* location) {
    #####: 2550:  Message message;
    %%%%%: 2550-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2550-block  1
call    3 never executed
    $$$$$: 2550-block  2
call    4 never executed
    #####: 2551:  if (description != nullptr) {
    %%%%%: 2551-block  0
branch  0 never executed
branch  1 never executed
    #####: 2552:    message << "C++ exception with description \"" << description << "\"";
    %%%%%: 2552-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2552-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2552-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 2553:  } else {
    #####: 2554:    message << "Unknown C++ exception";
    %%%%%: 2554-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2555:  }
    #####: 2556:  message << " thrown in " << location << ".";
    %%%%%: 2556-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2556-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2556-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 2557:
    #####: 2558:  return message.GetString();
    %%%%%: 2558-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2558-block  1
        -: 2559:}
        -: 2560:
        -: 2561:static std::string PrintTestPartResultToString(
        -: 2562:    const TestPartResult& test_part_result);
        -: 2563:
function _ZN7testing8internal26GoogleTestFailureExceptionC2ERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2564:GoogleTestFailureException::GoogleTestFailureException(
    #####: 2565:    const TestPartResult& failure)
    #####: 2566:    : ::std::runtime_error(PrintTestPartResultToString(failure).c_str()) {}
    %%%%%: 2566-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2566-block  1
call    5 never executed
    $$$$$: 2566-block  2
call    6 never executed
        -: 2567:
        -: 2568:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2569:
        -: 2570:// We put these helper functions in the internal namespace as IBM's xlC
        -: 2571:// compiler rejects the code if they were declared static.
        -: 2572:
        -: 2573:// Runs the given method and handles SEH exceptions it throws, when
        -: 2574:// SEH is supported; returns the 0-value for type Result in case of an
        -: 2575:// SEH exception.  (Microsoft compilers cannot handle SEH and C++
        -: 2576:// exceptions in the same function.  Therefore, we provide a separate
        -: 2577:// wrapper function for handling SEH exceptions.)
        -: 2578:template <class T, typename Result>
       28: 2579:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2580:                                              const char* location) {
        -: 2581:#if GTEST_HAS_SEH
        -: 2582:  __try {
        -: 2583:    return (object->*method)();
        -: 2584:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2585:      GetExceptionCode())) {
        -: 2586:    // We create the exception message on the heap because VC++ prohibits
        -: 2587:    // creation of objects with destructors on stack in functions using __try
        -: 2588:    // (see error C2712).
        -: 2589:    std::string* exception_message =
        -: 2590:        FormatSehExceptionMessage(GetExceptionCode(), location);
        -: 2591:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2592:                                             *exception_message);
        -: 2593:    delete exception_message;
        -: 2594:    return static_cast<Result>(0);
        -: 2595:  }
        -: 2596:#else
        -: 2597:  (void)location;
      28*: 2598:  return (object->*method)();
        -: 2599:#endif  // GTEST_HAS_SEH
        -: 2600:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 1 returned 100% blocks executed 83%
        1: 2579:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2580:                                              const char* location) {
        -: 2581:#if GTEST_HAS_SEH
        -: 2582:  __try {
        -: 2583:    return (object->*method)();
        -: 2584:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2585:      GetExceptionCode())) {
        -: 2586:    // We create the exception message on the heap because VC++ prohibits
        -: 2587:    // creation of objects with destructors on stack in functions using __try
        -: 2588:    // (see error C2712).
        -: 2589:    std::string* exception_message =
        -: 2590:        FormatSehExceptionMessage(GetExceptionCode(), location);
        -: 2591:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2592:                                             *exception_message);
        -: 2593:    delete exception_message;
        -: 2594:    return static_cast<Result>(0);
        -: 2595:  }
        -: 2596:#else
        -: 2597:  (void)location;
       1*: 2598:  return (object->*method)();
        1: 2598-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 2598-block  1
        1: 2598-block  2
        1: 2598-block  3
call    2 returned 1
        -: 2599:#endif  // GTEST_HAS_SEH
        -: 2600:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc called 2 returned 100% blocks executed 80%
        2: 2579:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2580:                                              const char* location) {
        -: 2581:#if GTEST_HAS_SEH
        -: 2582:  __try {
        -: 2583:    return (object->*method)();
        -: 2584:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2585:      GetExceptionCode())) {
        -: 2586:    // We create the exception message on the heap because VC++ prohibits
        -: 2587:    // creation of objects with destructors on stack in functions using __try
        -: 2588:    // (see error C2712).
        -: 2589:    std::string* exception_message =
        -: 2590:        FormatSehExceptionMessage(GetExceptionCode(), location);
        -: 2591:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2592:                                             *exception_message);
        -: 2593:    delete exception_message;
        -: 2594:    return static_cast<Result>(0);
        -: 2595:  }
        -: 2596:#else
        -: 2597:  (void)location;
       2*: 2598:  return (object->*method)();
        2: 2598-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%: 2598-block  1
        2: 2598-block  2
        2: 2598-block  3
call    2 returned 2
        -: 2599:#endif  // GTEST_HAS_SEH
        -: 2600:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 5 returned 100% blocks executed 83%
        5: 2579:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2580:                                              const char* location) {
        -: 2581:#if GTEST_HAS_SEH
        -: 2582:  __try {
        -: 2583:    return (object->*method)();
        -: 2584:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2585:      GetExceptionCode())) {
        -: 2586:    // We create the exception message on the heap because VC++ prohibits
        -: 2587:    // creation of objects with destructors on stack in functions using __try
        -: 2588:    // (see error C2712).
        -: 2589:    std::string* exception_message =
        -: 2590:        FormatSehExceptionMessage(GetExceptionCode(), location);
        -: 2591:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2592:                                             *exception_message);
        -: 2593:    delete exception_message;
        -: 2594:    return static_cast<Result>(0);
        -: 2595:  }
        -: 2596:#else
        -: 2597:  (void)location;
       5*: 2598:  return (object->*method)();
        5: 2598-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5: 2598-block  1
    %%%%%: 2598-block  2
        5: 2598-block  3
call    2 returned 5
        -: 2599:#endif  // GTEST_HAS_SEH
        -: 2600:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 20 returned 100% blocks executed 100%
       20: 2579:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2580:                                              const char* location) {
        -: 2581:#if GTEST_HAS_SEH
        -: 2582:  __try {
        -: 2583:    return (object->*method)();
        -: 2584:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2585:      GetExceptionCode())) {
        -: 2586:    // We create the exception message on the heap because VC++ prohibits
        -: 2587:    // creation of objects with destructors on stack in functions using __try
        -: 2588:    // (see error C2712).
        -: 2589:    std::string* exception_message =
        -: 2590:        FormatSehExceptionMessage(GetExceptionCode(), location);
        -: 2591:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2592:                                             *exception_message);
        -: 2593:    delete exception_message;
        -: 2594:    return static_cast<Result>(0);
        -: 2595:  }
        -: 2596:#else
        -: 2597:  (void)location;
       20: 2598:  return (object->*method)();
       20: 2598-block  0
branch  0 taken 15 (fallthrough)
branch  1 taken 5
       15: 2598-block  1
        5: 2598-block  2
       20: 2598-block  3
call    2 returned 20
        -: 2599:#endif  // GTEST_HAS_SEH
        -: 2600:}
------------------
        -: 2601:
        -: 2602:// Runs the given method and catches and reports C++ and/or SEH-style
        -: 2603:// exceptions, if they are supported; returns the 0-value for type
        -: 2604:// Result in case of an SEH exception.
        -: 2605:template <class T, typename Result>
       28: 2606:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2607:                                           const char* location) {
        -: 2608:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2609:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2610:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2611:  // after the exception is caught and either report or re-throw the
        -: 2612:  // exception based on the flag's value:
        -: 2613:  //
        -: 2614:  // try {
        -: 2615:  //   // Perform the test method.
        -: 2616:  // } catch (...) {
        -: 2617:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2618:  //     // Report the exception as failure.
        -: 2619:  //   else
        -: 2620:  //     throw;  // Re-throws the original exception.
        -: 2621:  // }
        -: 2622:  //
        -: 2623:  // However, the purpose of this flag is to allow the program to drop into
        -: 2624:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2625:  // control enters the catch block, the exception origin information is
        -: 2626:  // lost and the debugger will stop the program at the point of the
        -: 2627:  // re-throw in this function -- instead of at the point of the original
        -: 2628:  // throw statement in the code under test.  For this reason, we perform
        -: 2629:  // the check early, sacrificing the ability to affect Google Test's
        -: 2630:  // exception handling in the method where the exception is thrown.
       28: 2631:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        -: 2632:#if GTEST_HAS_EXCEPTIONS
        -: 2633:    try {
       28: 2634:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
    =====: 2635:    } catch (const AssertionException&) {  // NOLINT
        -: 2636:      // This failure was reported already.
    =====: 2637:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
        -: 2638:      // This exception type can only be thrown by a failed Google
        -: 2639:      // Test assertion with the intention of letting another testing
        -: 2640:      // framework catch it.  Therefore we just re-throw it.
    =====: 2641:      throw;
    =====: 2642:    } catch (const std::exception& e) {  // NOLINT
    =====: 2643:      internal::ReportFailureInUnknownLocation(
        -: 2644:          TestPartResult::kFatalFailure,
    =====: 2645:          FormatCxxExceptionMessage(e.what(), location));
    =====: 2646:    } catch (...) {  // NOLINT
    =====: 2647:      internal::ReportFailureInUnknownLocation(
        -: 2648:          TestPartResult::kFatalFailure,
        -: 2649:          FormatCxxExceptionMessage(nullptr, location));
        -: 2650:    }
    =====: 2651:    return static_cast<Result>(0);
        -: 2652:#else
        -: 2653:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2654:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2655:  } else {
    #####: 2656:    return (object->*method)();
        -: 2657:  }
        -: 2658:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 1 returned 100% blocks executed 18%
        1: 2606:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2607:                                           const char* location) {
        -: 2608:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2609:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2610:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2611:  // after the exception is caught and either report or re-throw the
        -: 2612:  // exception based on the flag's value:
        -: 2613:  //
        -: 2614:  // try {
        -: 2615:  //   // Perform the test method.
        -: 2616:  // } catch (...) {
        -: 2617:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2618:  //     // Report the exception as failure.
        -: 2619:  //   else
        -: 2620:  //     throw;  // Re-throws the original exception.
        -: 2621:  // }
        -: 2622:  //
        -: 2623:  // However, the purpose of this flag is to allow the program to drop into
        -: 2624:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2625:  // control enters the catch block, the exception origin information is
        -: 2626:  // lost and the debugger will stop the program at the point of the
        -: 2627:  // re-throw in this function -- instead of at the point of the original
        -: 2628:  // throw statement in the code under test.  For this reason, we perform
        -: 2629:  // the check early, sacrificing the ability to affect Google Test's
        -: 2630:  // exception handling in the method where the exception is thrown.
        1: 2631:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        1: 2631-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        -: 2632:#if GTEST_HAS_EXCEPTIONS
        -: 2633:    try {
        1: 2634:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        1: 2634-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2634-block  1
    =====: 2635:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2635-block  0
call    0 never executed
call    1 never executed
        -: 2636:      // This failure was reported already.
    =====: 2637:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2637-block  0
call    0 never executed
    $$$$$: 2637-block  1
call    1 never executed
        -: 2638:      // This exception type can only be thrown by a failed Google
        -: 2639:      // Test assertion with the intention of letting another testing
        -: 2640:      // framework catch it.  Therefore we just re-throw it.
    =====: 2641:      throw;
call    0 never executed
    =====: 2642:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2642-block  0
call    0 never executed
    $$$$$: 2642-block  1
call    1 never executed
    =====: 2643:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2643-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2643-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2643-block  2
call    8 never executed
    $$$$$: 2643-block  3
        -: 2644:          TestPartResult::kFatalFailure,
    =====: 2645:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2646:    } catch (...) {  // NOLINT
    $$$$$: 2646-block  0
call    0 never executed
    $$$$$: 2646-block  1
call    1 never executed
    =====: 2647:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2647-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2647-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2647-block  2
call    8 never executed
    $$$$$: 2647-block  3
        -: 2648:          TestPartResult::kFatalFailure,
        -: 2649:          FormatCxxExceptionMessage(nullptr, location));
        -: 2650:    }
    =====: 2651:    return static_cast<Result>(0);
    $$$$$: 2651-block  0
        -: 2652:#else
        -: 2653:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2654:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2655:  } else {
    #####: 2656:    return (object->*method)();
    %%%%%: 2656-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2656-block  1
    %%%%%: 2656-block  2
    %%%%%: 2656-block  3
call    2 never executed
        -: 2657:  }
        -: 2658:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc called 2 returned 100% blocks executed 18%
        2: 2606:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2607:                                           const char* location) {
        -: 2608:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2609:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2610:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2611:  // after the exception is caught and either report or re-throw the
        -: 2612:  // exception based on the flag's value:
        -: 2613:  //
        -: 2614:  // try {
        -: 2615:  //   // Perform the test method.
        -: 2616:  // } catch (...) {
        -: 2617:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2618:  //     // Report the exception as failure.
        -: 2619:  //   else
        -: 2620:  //     throw;  // Re-throws the original exception.
        -: 2621:  // }
        -: 2622:  //
        -: 2623:  // However, the purpose of this flag is to allow the program to drop into
        -: 2624:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2625:  // control enters the catch block, the exception origin information is
        -: 2626:  // lost and the debugger will stop the program at the point of the
        -: 2627:  // re-throw in this function -- instead of at the point of the original
        -: 2628:  // throw statement in the code under test.  For this reason, we perform
        -: 2629:  // the check early, sacrificing the ability to affect Google Test's
        -: 2630:  // exception handling in the method where the exception is thrown.
        2: 2631:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        2: 2631-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        -: 2632:#if GTEST_HAS_EXCEPTIONS
        -: 2633:    try {
        2: 2634:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        2: 2634-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 2634-block  1
    =====: 2635:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2635-block  0
call    0 never executed
call    1 never executed
        -: 2636:      // This failure was reported already.
    =====: 2637:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2637-block  0
call    0 never executed
    $$$$$: 2637-block  1
call    1 never executed
        -: 2638:      // This exception type can only be thrown by a failed Google
        -: 2639:      // Test assertion with the intention of letting another testing
        -: 2640:      // framework catch it.  Therefore we just re-throw it.
    =====: 2641:      throw;
call    0 never executed
    =====: 2642:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2642-block  0
call    0 never executed
    $$$$$: 2642-block  1
call    1 never executed
    =====: 2643:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2643-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2643-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2643-block  2
call    8 never executed
    $$$$$: 2643-block  3
        -: 2644:          TestPartResult::kFatalFailure,
    =====: 2645:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2646:    } catch (...) {  // NOLINT
    $$$$$: 2646-block  0
call    0 never executed
    $$$$$: 2646-block  1
call    1 never executed
    =====: 2647:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2647-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2647-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2647-block  2
call    8 never executed
    $$$$$: 2647-block  3
        -: 2648:          TestPartResult::kFatalFailure,
        -: 2649:          FormatCxxExceptionMessage(nullptr, location));
        -: 2650:    }
    =====: 2651:    return static_cast<Result>(0);
    $$$$$: 2651-block  0
        -: 2652:#else
        -: 2653:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2654:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2655:  } else {
    #####: 2656:    return (object->*method)();
    %%%%%: 2656-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2656-block  1
    %%%%%: 2656-block  2
    %%%%%: 2656-block  3
call    2 never executed
        -: 2657:  }
        -: 2658:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 5 returned 100% blocks executed 18%
        5: 2606:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2607:                                           const char* location) {
        -: 2608:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2609:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2610:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2611:  // after the exception is caught and either report or re-throw the
        -: 2612:  // exception based on the flag's value:
        -: 2613:  //
        -: 2614:  // try {
        -: 2615:  //   // Perform the test method.
        -: 2616:  // } catch (...) {
        -: 2617:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2618:  //     // Report the exception as failure.
        -: 2619:  //   else
        -: 2620:  //     throw;  // Re-throws the original exception.
        -: 2621:  // }
        -: 2622:  //
        -: 2623:  // However, the purpose of this flag is to allow the program to drop into
        -: 2624:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2625:  // control enters the catch block, the exception origin information is
        -: 2626:  // lost and the debugger will stop the program at the point of the
        -: 2627:  // re-throw in this function -- instead of at the point of the original
        -: 2628:  // throw statement in the code under test.  For this reason, we perform
        -: 2629:  // the check early, sacrificing the ability to affect Google Test's
        -: 2630:  // exception handling in the method where the exception is thrown.
        5: 2631:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        5: 2631-block  0
call    0 returned 5
call    1 returned 5
branch  2 taken 5 (fallthrough)
branch  3 taken 0
        -: 2632:#if GTEST_HAS_EXCEPTIONS
        -: 2633:    try {
        5: 2634:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        5: 2634-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5: 2634-block  1
    =====: 2635:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2635-block  0
call    0 never executed
call    1 never executed
        -: 2636:      // This failure was reported already.
    =====: 2637:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2637-block  0
call    0 never executed
    $$$$$: 2637-block  1
call    1 never executed
        -: 2638:      // This exception type can only be thrown by a failed Google
        -: 2639:      // Test assertion with the intention of letting another testing
        -: 2640:      // framework catch it.  Therefore we just re-throw it.
    =====: 2641:      throw;
call    0 never executed
    =====: 2642:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2642-block  0
call    0 never executed
    $$$$$: 2642-block  1
call    1 never executed
    =====: 2643:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2643-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2643-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2643-block  2
call    8 never executed
    $$$$$: 2643-block  3
        -: 2644:          TestPartResult::kFatalFailure,
    =====: 2645:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2646:    } catch (...) {  // NOLINT
    $$$$$: 2646-block  0
call    0 never executed
    $$$$$: 2646-block  1
call    1 never executed
    =====: 2647:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2647-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2647-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2647-block  2
call    8 never executed
    $$$$$: 2647-block  3
        -: 2648:          TestPartResult::kFatalFailure,
        -: 2649:          FormatCxxExceptionMessage(nullptr, location));
        -: 2650:    }
    =====: 2651:    return static_cast<Result>(0);
    $$$$$: 2651-block  0
        -: 2652:#else
        -: 2653:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2654:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2655:  } else {
    #####: 2656:    return (object->*method)();
    %%%%%: 2656-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2656-block  1
    %%%%%: 2656-block  2
    %%%%%: 2656-block  3
call    2 never executed
        -: 2657:  }
        -: 2658:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 20 returned 100% blocks executed 18%
       20: 2606:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2607:                                           const char* location) {
        -: 2608:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2609:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2610:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2611:  // after the exception is caught and either report or re-throw the
        -: 2612:  // exception based on the flag's value:
        -: 2613:  //
        -: 2614:  // try {
        -: 2615:  //   // Perform the test method.
        -: 2616:  // } catch (...) {
        -: 2617:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2618:  //     // Report the exception as failure.
        -: 2619:  //   else
        -: 2620:  //     throw;  // Re-throws the original exception.
        -: 2621:  // }
        -: 2622:  //
        -: 2623:  // However, the purpose of this flag is to allow the program to drop into
        -: 2624:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2625:  // control enters the catch block, the exception origin information is
        -: 2626:  // lost and the debugger will stop the program at the point of the
        -: 2627:  // re-throw in this function -- instead of at the point of the original
        -: 2628:  // throw statement in the code under test.  For this reason, we perform
        -: 2629:  // the check early, sacrificing the ability to affect Google Test's
        -: 2630:  // exception handling in the method where the exception is thrown.
       20: 2631:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
       20: 2631-block  0
call    0 returned 20
call    1 returned 20
branch  2 taken 20 (fallthrough)
branch  3 taken 0
        -: 2632:#if GTEST_HAS_EXCEPTIONS
        -: 2633:    try {
       20: 2634:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
       20: 2634-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
       20: 2634-block  1
    =====: 2635:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2635-block  0
call    0 never executed
call    1 never executed
        -: 2636:      // This failure was reported already.
    =====: 2637:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2637-block  0
call    0 never executed
    $$$$$: 2637-block  1
call    1 never executed
        -: 2638:      // This exception type can only be thrown by a failed Google
        -: 2639:      // Test assertion with the intention of letting another testing
        -: 2640:      // framework catch it.  Therefore we just re-throw it.
    =====: 2641:      throw;
call    0 never executed
    =====: 2642:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2642-block  0
call    0 never executed
    $$$$$: 2642-block  1
call    1 never executed
    =====: 2643:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2643-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2643-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2643-block  2
call    8 never executed
    $$$$$: 2643-block  3
        -: 2644:          TestPartResult::kFatalFailure,
    =====: 2645:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2646:    } catch (...) {  // NOLINT
    $$$$$: 2646-block  0
call    0 never executed
    $$$$$: 2646-block  1
call    1 never executed
    =====: 2647:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2647-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2647-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2647-block  2
call    8 never executed
    $$$$$: 2647-block  3
        -: 2648:          TestPartResult::kFatalFailure,
        -: 2649:          FormatCxxExceptionMessage(nullptr, location));
        -: 2650:    }
    =====: 2651:    return static_cast<Result>(0);
    $$$$$: 2651-block  0
        -: 2652:#else
        -: 2653:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2654:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2655:  } else {
    #####: 2656:    return (object->*method)();
    %%%%%: 2656-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2656-block  1
    %%%%%: 2656-block  2
    %%%%%: 2656-block  3
call    2 never executed
        -: 2657:  }
        -: 2658:}
------------------
        -: 2659:
        -: 2660:}  // namespace internal
        -: 2661:
        -: 2662:// Runs the test and updates the test result.
function _ZN7testing4Test3RunEv called 5 returned 100% blocks executed 90%
        5: 2663:void Test::Run() {
       5*: 2664:  if (!HasSameFixtureClass()) return;
        5: 2664-block  0
call    0 returned 5
branch  1 taken 0 (fallthrough)
branch  2 taken 5
    %%%%%: 2664-block  1
        -: 2665:
        5: 2666:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        5: 2666-block  0
call    0 returned 5
        5: 2667:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 5
call    1 returned 5
        5: 2668:  internal::HandleExceptionsInMethodIfSupported(this, &Test::SetUp, "SetUp()");
call    0 returned 5
        -: 2669:  // We will run the test only if SetUp() was successful and didn't call
        -: 2670:  // GTEST_SKIP().
       5*: 2671:  if (!HasFatalFailure() && !IsSkipped()) {
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0
        5: 2671-block  0
call    3 returned 5
branch  4 taken 5 (fallthrough)
branch  5 taken 0
        5: 2671-block  1
    %%%%%: 2671-block  2
        5: 2671-block  3
branch  6 taken 5 (fallthrough)
branch  7 taken 0
        5: 2672:    impl->os_stack_trace_getter()->UponLeavingGTest();
        5: 2672-block  0
call    0 returned 5
call    1 returned 5
        5: 2673:    internal::HandleExceptionsInMethodIfSupported(this, &Test::TestBody,
call    0 returned 5
        -: 2674:                                                  "the test body");
        -: 2675:  }
        -: 2676:
        -: 2677:  // However, we want to clean up as much as possible.  Hence we will
        -: 2678:  // always call TearDown(), even if SetUp() or the test body has
        -: 2679:  // failed.
        5: 2680:  impl->os_stack_trace_getter()->UponLeavingGTest();
        5: 2680-block  0
call    0 returned 5
call    1 returned 5
        5: 2681:  internal::HandleExceptionsInMethodIfSupported(this, &Test::TearDown,
call    0 returned 5
        -: 2682:                                                "TearDown()");
        -: 2683:}
        -: 2684:
        -: 2685:// Returns true if and only if the current test has a fatal failure.
function _ZN7testing4Test15HasFatalFailureEv called 11 returned 100% blocks executed 100%
       11: 2686:bool Test::HasFatalFailure() {
       11: 2687:  return internal::GetUnitTestImpl()->current_test_result()->HasFatalFailure();
       11: 2687-block  0
call    0 returned 11
call    1 returned 11
call    2 returned 11
        -: 2688:}
        -: 2689:
        -: 2690:// Returns true if and only if the current test has a non-fatal failure.
function _ZN7testing4Test18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2691:bool Test::HasNonfatalFailure() {
        -: 2692:  return internal::GetUnitTestImpl()
        -: 2693:      ->current_test_result()
    #####: 2694:      ->HasNonfatalFailure();
    %%%%%: 2694-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2695:}
        -: 2696:
        -: 2697:// Returns true if and only if the current test was skipped.
function _ZN7testing4Test9IsSkippedEv called 11 returned 100% blocks executed 100%
       11: 2698:bool Test::IsSkipped() {
       11: 2699:  return internal::GetUnitTestImpl()->current_test_result()->Skipped();
       11: 2699-block  0
call    0 returned 11
call    1 returned 11
call    2 returned 11
        -: 2700:}
        -: 2701:
        -: 2702:// class TestInfo
        -: 2703:
        -: 2704:// Constructs a TestInfo object. It assumes ownership of the test factory
        -: 2705:// object.
function _ZN7testing8TestInfoC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_PKcSA_NS_8internal12CodeLocationEPKvPNSB_15TestFactoryBaseE called 5 returned 100% blocks executed 31%
        5: 2706:TestInfo::TestInfo(const std::string& a_test_suite_name,
        -: 2707:                   const std::string& a_name, const char* a_type_param,
        -: 2708:                   const char* a_value_param,
        -: 2709:                   internal::CodeLocation a_code_location,
        -: 2710:                   internal::TypeId fixture_class_id,
        5: 2711:                   internal::TestFactoryBase* factory)
        -: 2712:    : test_suite_name_(a_test_suite_name),
        -: 2713:      name_(a_name),
    #####: 2714:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
    %%%%%: 2714-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2714-block  1
call    3 never executed
    #####: 2715:      value_param_(a_value_param ? new std::string(a_value_param) : nullptr),
    %%%%%: 2715-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2715-block  1
call    3 never executed
        -: 2716:      location_(a_code_location),
        -: 2717:      fixture_class_id_(fixture_class_id),
        -: 2718:      should_run_(false),
        -: 2719:      is_disabled_(false),
        -: 2720:      matches_filter_(false),
        -: 2721:      is_in_another_shard_(false),
        -: 2722:      factory_(factory),
       5*: 2723:      result_() {}
        5: 2723-block  0
call    0 returned 5
call    1 returned 5
branch  2 taken 5 (fallthrough)
branch  3 taken 0 (throw)
        5: 2723-block  1
branch  4 taken 0 (fallthrough)
branch  5 taken 5
    %%%%%: 2723-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 2723-block  3
        5: 2723-block  4
        5: 2723-block  5
call   10 returned 5
branch 11 taken 0 (fallthrough)
branch 12 taken 5
    %%%%%: 2723-block  6
call   13 never executed
        5: 2723-block  7
branch 14 taken 0 (fallthrough)
branch 15 taken 5
    %%%%%: 2723-block  8
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 2723-block  9
        5: 2723-block 10
        5: 2723-block 11
call   20 returned 5
branch 21 taken 0 (fallthrough)
branch 22 taken 5
    %%%%%: 2723-block 12
call   23 never executed
        5: 2723-block 13
call   24 returned 5
branch 25 taken 5 (fallthrough)
branch 26 taken 0 (throw)
        5: 2723-block 14
call   27 returned 5
branch 28 taken 5 (fallthrough)
branch 29 taken 0 (throw)
        5: 2723-block 15
    $$$$$: 2723-block 16
branch 30 never executed
branch 31 never executed
    $$$$$: 2723-block 17
call   32 never executed
    $$$$$: 2723-block 18
    $$$$$: 2723-block 19
branch 33 never executed
branch 34 never executed
    $$$$$: 2723-block 20
call   35 never executed
    $$$$$: 2723-block 21
    $$$$$: 2723-block 22
call   36 never executed
    $$$$$: 2723-block 23
call   37 never executed
    $$$$$: 2723-block 24
call   38 never executed
    $$$$$: 2723-block 25
call   39 never executed
    $$$$$: 2723-block 26
call   40 never executed
        -: 2724:
        -: 2725:// Destructs a TestInfo object.
function _ZN7testing8TestInfoD2Ev called 5 returned 100% blocks executed 100%
        5: 2726:TestInfo::~TestInfo() { delete factory_; }
        5: 2726-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5: 2726-block  1
call    2 returned 5
        5: 2726-block  2
call    3 returned 5
call    4 returned 5
call    5 returned 5
call    6 returned 5
call    7 returned 5
call    8 returned 5
        -: 2727:
        -: 2728:namespace internal {
        -: 2729:
        -: 2730:// Creates a new TestInfo object and registers it with Google Test;
        -: 2731:// returns the created object.
        -: 2732://
        -: 2733:// Arguments:
        -: 2734://
        -: 2735://   test_suite_name:  name of the test suite
        -: 2736://   name:             name of the test
        -: 2737://   type_param:       the name of the test's type parameter, or NULL if
        -: 2738://                     this is not a typed or a type-parameterized test.
        -: 2739://   value_param:      text representation of the test's value parameter,
        -: 2740://                     or NULL if this is not a value-parameterized test.
        -: 2741://   code_location:    code location where the test is defined
        -: 2742://   fixture_class_id: ID of the test fixture class
        -: 2743://   set_up_tc:        pointer to the function that sets up the test suite
        -: 2744://   tear_down_tc:     pointer to the function that tears down the test suite
        -: 2745://   factory:          pointer to the factory that creates a test object.
        -: 2746://                     The newly created TestInfo instance will assume
        -: 2747://                     ownership of the factory object.
function _ZN7testing8internal23MakeAndRegisterTestInfoEPKcS2_S2_S2_NS0_12CodeLocationEPKvPFvvES7_PNS0_15TestFactoryBaseE called 5 returned 100% blocks executed 52%
        5: 2748:TestInfo* MakeAndRegisterTestInfo(
        -: 2749:    const char* test_suite_name, const char* name, const char* type_param,
        -: 2750:    const char* value_param, CodeLocation code_location,
        -: 2751:    TypeId fixture_class_id, SetUpTestSuiteFunc set_up_tc,
        -: 2752:    TearDownTestSuiteFunc tear_down_tc, TestFactoryBase* factory) {
        -: 2753:  TestInfo* const test_info =
        -: 2754:      new TestInfo(test_suite_name, name, type_param, value_param,
        5: 2755:                   code_location, fixture_class_id, factory);
        5: 2755-block  0
call    0 returned 5
call    1 returned 5
branch  2 taken 5 (fallthrough)
branch  3 taken 0 (throw)
        5: 2755-block  1
call    4 returned 5
call    5 returned 5
branch  6 taken 5 (fallthrough)
branch  7 taken 0 (throw)
        5: 2755-block  2
call    8 returned 5
branch  9 taken 5 (fallthrough)
branch 10 taken 0 (throw)
        5: 2755-block  3
call   11 returned 5
branch 12 taken 5 (fallthrough)
branch 13 taken 0 (throw)
        5: 2755-block  4
call   14 returned 5
branch 15 taken 5 (fallthrough)
branch 16 taken 0 (throw)
        5: 2755-block  5
call   17 returned 5
call   18 returned 5
call   19 returned 5
call   20 returned 5
call   21 returned 5
    $$$$$: 2755-block  6
call   22 never executed
    $$$$$: 2755-block  7
call   23 never executed
    $$$$$: 2755-block  8
    $$$$$: 2755-block  9
call   24 never executed
    $$$$$: 2755-block 10
    $$$$$: 2755-block 11
call   25 never executed
    $$$$$: 2755-block 12
    $$$$$: 2755-block 13
call   26 never executed
    $$$$$: 2755-block 14
    $$$$$: 2755-block 15
call   27 never executed
        5: 2756:  GetUnitTestImpl()->AddTestInfo(set_up_tc, tear_down_tc, test_info);
call    0 returned 5
call    1 returned 5
        5: 2757:  return test_info;
        5: 2757-block  0
        -: 2758:}
        -: 2759:
function _ZN7testing8internal26ReportInvalidTestSuiteTypeEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####: 2760:void ReportInvalidTestSuiteType(const char* test_suite_name,
        -: 2761:                                CodeLocation code_location) {
    #####: 2762:  Message errors;
    %%%%%: 2762-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2762-block  1
call    3 never executed
        -: 2763:  errors
    #####: 2764:      << "Attempted redefinition of test suite " << test_suite_name << ".\n"
    %%%%%: 2764-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2764-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2764-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2765:      << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2765-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2766:      << "class.  However, in test suite " << test_suite_name << ", you tried\n"
    %%%%%: 2766-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2766-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2766-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2767:      << "to define a test using a fixture class different from the one\n"
    %%%%%: 2767-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2768:      << "used earlier. This can happen if the two fixture classes are\n"
    %%%%%: 2768-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2769:      << "from different namespaces and have the same name. You should\n"
    %%%%%: 2769-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2770:      << "probably rename one of the classes to put the tests into different\n"
    %%%%%: 2770-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2771:      << "test suites.";
    %%%%%: 2771-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2772:
    #####: 2773:  GTEST_LOG_(ERROR) << FormatFileLocation(code_location.file.c_str(),
    %%%%%: 2773-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2773-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    $$$$$: 2773-block  2
call   10 never executed
    $$$$$: 2773-block  3
    $$$$$: 2773-block  4
call   11 never executed
    $$$$$: 2773-block  5
        -: 2774:                                          code_location.line)
    #####: 2775:                    << " " << errors.GetString();
    %%%%%: 2775-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2775-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2775-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2775-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2775-block  4
call   12 never executed
call   13 never executed
    $$$$$: 2775-block  5
call   14 never executed
    $$$$$: 2775-block  6
    #####: 2776:}
        -: 2777:}  // namespace internal
        -: 2778:
        -: 2779:namespace {
        -: 2780:
        -: 2781:// A predicate that checks the test name of a TestInfo against a known
        -: 2782:// value.
        -: 2783://
        -: 2784:// This is used for implementation of the TestSuite class only.  We put
        -: 2785:// it in the anonymous namespace to prevent polluting the outer
        -: 2786:// namespace.
        -: 2787://
        -: 2788:// TestNameIs is copyable.
        -: 2789:class TestNameIs {
        -: 2790: public:
        -: 2791:  // Constructor.
        -: 2792:  //
        -: 2793:  // TestNameIs has NO default constructor.
        -: 2794:  explicit TestNameIs(const char* name) : name_(name) {}
        -: 2795:
        -: 2796:  // Returns true if and only if the test name of test_info matches name_.
        -: 2797:  bool operator()(const TestInfo* test_info) const {
        -: 2798:    return test_info && test_info->name() == name_;
        -: 2799:  }
        -: 2800:
        -: 2801: private:
        -: 2802:  std::string name_;
        -: 2803:};
        -: 2804:
        -: 2805:}  // namespace
        -: 2806:
        -: 2807:namespace internal {
        -: 2808:
        -: 2809:// This method expands all parameterized tests registered with macros TEST_P
        -: 2810:// and INSTANTIATE_TEST_SUITE_P into regular tests and registers those.
        -: 2811:// This will be done just once during the program runtime.
function _ZN7testing8internal12UnitTestImpl26RegisterParameterizedTestsEv called 1 returned 100% blocks executed 100%
        1: 2812:void UnitTestImpl::RegisterParameterizedTests() {
        1: 2813:  if (!parameterized_tests_registered_) {
        1: 2813-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 2814:    parameterized_test_registry_.RegisterTests();
        1: 2814-block  0
call    0 returned 1
        1: 2815:    type_parameterized_test_registry_.CheckForInstantiations();
call    0 returned 1
        1: 2816:    parameterized_tests_registered_ = true;
        -: 2817:  }
        1: 2818:}
        -: 2819:
        -: 2820:}  // namespace internal
        -: 2821:
        -: 2822:// Creates the test object, runs it, records its result, and then
        -: 2823:// deletes it.
function _ZN7testing8TestInfo3RunEv called 5 returned 100% blocks executed 86%
        5: 2824:void TestInfo::Run() {
        5: 2825:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
        5: 2825-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5: 2825-block  1
call    3 returned 5
call    4 returned 5
        5: 2826:  if (!should_run_) {
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####: 2827:    if (is_disabled_ && matches_filter_) repeater->OnTestDisabled(*this);
    %%%%%: 2827-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2827-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 2827-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 2828:    return;
    %%%%%: 2828-block  0
        -: 2829:  }
        -: 2830:
        -: 2831:  // Tells UnitTest where to store test result.
        5: 2832:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        5: 2832-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5: 2833:  impl->set_current_test_info(this);
        5: 2833-block  0
call    0 returned 5
        -: 2834:
        -: 2835:  // Notifies the unit test event listeners that a test is about to start.
        5: 2836:  repeater->OnTestStart(*this);
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5: 2837:  result_.set_start_timestamp(internal::GetTimeInMillis());
        5: 2837-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5: 2837-block  1
call    3 returned 5
        5: 2838:  internal::Timer timer;
call    0 returned 5
        5: 2839:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5: 2839-block  0
call    3 returned 5
branch  4 taken 5 (fallthrough)
branch  5 taken 0 (throw)
        -: 2840:
        -: 2841:  // Creates the test object.
       10: 2842:  Test* const test = internal::HandleExceptionsInMethodIfSupported(
        5: 2843:      factory_, &internal::TestFactoryBase::CreateTest,
        5: 2843-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        -: 2844:      "the test fixture's constructor");
        -: 2845:
        -: 2846:  // Runs the test if the constructor didn't generate a fatal failure or invoke
        -: 2847:  // GTEST_SKIP().
        -: 2848:  // Note that the object will not be null
       5*: 2849:  if (!Test::HasFatalFailure() && !Test::IsSkipped()) {
        5: 2849-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5: 2849-block  1
branch  3 taken 5 (fallthrough)
branch  4 taken 0
        5: 2849-block  2
call    5 returned 5
branch  6 taken 5 (fallthrough)
branch  7 taken 0 (throw)
        5: 2849-block  3
branch  8 taken 5 (fallthrough)
branch  9 taken 0
        5: 2849-block  4
    %%%%%: 2849-block  5
        5: 2849-block  6
branch 10 taken 5 (fallthrough)
branch 11 taken 0
        -: 2850:    // This doesn't throw as all user code that can throw are wrapped into
        -: 2851:    // exception handling code.
        5: 2852:    test->Run();
        5: 2852-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        -: 2853:  }
        -: 2854:
        5: 2855:  if (test != nullptr) {
        5: 2855-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        -: 2856:    // Deletes the test object.
        5: 2857:    impl->os_stack_trace_getter()->UponLeavingGTest();
        5: 2857-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5: 2857-block  1
call    3 returned 5
branch  4 taken 5 (fallthrough)
branch  5 taken 0 (throw)
        5: 2858:    internal::HandleExceptionsInMethodIfSupported(
        5: 2858-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        -: 2859:        test, &Test::DeleteSelf_, "the test fixture's destructor");
        -: 2860:  }
        -: 2861:
        5: 2862:  result_.set_elapsed_time(timer.Elapsed());
        5: 2862-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5: 2862-block  1
call    3 returned 5
        -: 2863:
        -: 2864:  // Notifies the unit test event listener that a test has just finished.
        5: 2865:  repeater->OnTestEnd(*this);
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        -: 2866:
        -: 2867:  // Tells UnitTest to stop associating assertion results to this
        -: 2868:  // test.
        5: 2869:  impl->set_current_test_info(nullptr);
        5: 2869-block  0
call    0 returned 5
        -: 2870:}
        -: 2871:
        -: 2872:// Skip and records a skipped test result for this object.
function _ZN7testing8TestInfo4SkipEv called 0 returned 0% blocks executed 0%
    #####: 2873:void TestInfo::Skip() {
    #####: 2874:  if (!should_run_) return;
    %%%%%: 2874-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2874-block  1
        -: 2875:
    #####: 2876:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%: 2876-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2877:  impl->set_current_test_info(this);
    %%%%%: 2877-block  0
call    0 never executed
        -: 2878:
    #####: 2879:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2879-block  0
call    3 never executed
call    4 never executed
        -: 2880:
        -: 2881:  // Notifies the unit test event listeners that a test is about to start.
    #####: 2882:  repeater->OnTestStart(*this);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2883:
        -: 2884:  const TestPartResult test_part_result =
    #####: 2885:      TestPartResult(TestPartResult::kSkip, this->file(), this->line(), "");
    %%%%%: 2885-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    $$$$$: 2885-block  1
call    6 never executed
    #####: 2886:  impl->GetTestPartResultReporterForCurrentThread()->ReportTestPartResult(
    %%%%%: 2886-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2887:      test_part_result);
    %%%%%: 2887-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2888:
        -: 2889:  // Notifies the unit test event listener that a test has just finished.
    #####: 2890:  repeater->OnTestEnd(*this);
    %%%%%: 2890-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2891:  impl->set_current_test_info(nullptr);
    %%%%%: 2891-block  0
call    0 never executed
        -: 2892:}
        -: 2893:
        -: 2894:// class TestSuite
        -: 2895:
        -: 2896:// Gets the number of successful tests in this test suite.
function _ZNK7testing9TestSuite21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 2897:int TestSuite::successful_test_count() const {
        1: 2898:  return CountIf(test_info_list_, TestPassed);
        1: 2898-block  0
call    0 returned 1
        -: 2899:}
        -: 2900:
        -: 2901:// Gets the number of successful tests in this test suite.
function _ZNK7testing9TestSuite18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1: 2902:int TestSuite::skipped_test_count() const {
        1: 2903:  return CountIf(test_info_list_, TestSkipped);
        1: 2903-block  0
call    0 returned 1
        -: 2904:}
        -: 2905:
        -: 2906:// Gets the number of failed tests in this test suite.
function _ZNK7testing9TestSuite17failed_test_countEv called 2 returned 100% blocks executed 100%
        2: 2907:int TestSuite::failed_test_count() const {
        2: 2908:  return CountIf(test_info_list_, TestFailed);
        2: 2908-block  0
call    0 returned 2
        -: 2909:}
        -: 2910:
        -: 2911:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing9TestSuite30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 2912:int TestSuite::reportable_disabled_test_count() const {
        1: 2913:  return CountIf(test_info_list_, TestReportableDisabled);
        1: 2913-block  0
call    0 returned 1
        -: 2914:}
        -: 2915:
        -: 2916:// Gets the number of disabled tests in this test suite.
function _ZNK7testing9TestSuite19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2917:int TestSuite::disabled_test_count() const {
    #####: 2918:  return CountIf(test_info_list_, TestDisabled);
    %%%%%: 2918-block  0
call    0 never executed
        -: 2919:}
        -: 2920:
        -: 2921:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing9TestSuite21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2922:int TestSuite::reportable_test_count() const {
    #####: 2923:  return CountIf(test_info_list_, TestReportable);
    %%%%%: 2923-block  0
call    0 never executed
        -: 2924:}
        -: 2925:
        -: 2926:// Get the number of tests in this test suite that should run.
function _ZNK7testing9TestSuite17test_to_run_countEv called 4 returned 100% blocks executed 100%
        4: 2927:int TestSuite::test_to_run_count() const {
        4: 2928:  return CountIf(test_info_list_, ShouldRunTest);
        4: 2928-block  0
call    0 returned 4
        -: 2929:}
        -: 2930:
        -: 2931:// Gets the number of all tests.
function _ZNK7testing9TestSuite16total_test_countEv called 6 returned 100% blocks executed 100%
        6: 2932:int TestSuite::total_test_count() const {
        6: 2933:  return static_cast<int>(test_info_list_.size());
        6: 2933-block  0
call    0 returned 6
        -: 2934:}
        -: 2935:
        -: 2936:// Creates a TestSuite with the given name.
        -: 2937://
        -: 2938:// Arguments:
        -: 2939://
        -: 2940://   a_name:       name of the test suite
        -: 2941://   a_type_param: the name of the test suite's type parameter, or NULL if
        -: 2942://                 this is not a typed or a type-parameterized test suite.
        -: 2943://   set_up_tc:    pointer to the function that sets up the test suite
        -: 2944://   tear_down_tc: pointer to the function that tears down the test suite
function _ZN7testing9TestSuiteC2EPKcS2_PFvvES4_ called 1 returned 100% blocks executed 36%
        1: 2945:TestSuite::TestSuite(const char* a_name, const char* a_type_param,
        -: 2946:                     internal::SetUpTestSuiteFunc set_up_tc,
        1: 2947:                     internal::TearDownTestSuiteFunc tear_down_tc)
        -: 2948:    : name_(a_name),
    #####: 2949:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
    %%%%%: 2949-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2949-block  1
call    3 never executed
        -: 2950:      set_up_tc_(set_up_tc),
        -: 2951:      tear_down_tc_(tear_down_tc),
        -: 2952:      should_run_(false),
        -: 2953:      start_timestamp_(0),
       1*: 2954:      elapsed_time_(0) {}
        1: 2954-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 2954-block  1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%: 2954-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2954-block  3
        1: 2954-block  4
        1: 2954-block  5
call   11 returned 1
branch 12 taken 0 (fallthrough)
branch 13 taken 1
    %%%%%: 2954-block  6
call   14 never executed
        1: 2954-block  7
call   15 returned 1
call   16 returned 1
call   17 returned 1
branch 18 taken 1 (fallthrough)
branch 19 taken 0 (throw)
        1: 2954-block  8
    $$$$$: 2954-block  9
call   20 never executed
    $$$$$: 2954-block 10
call   21 never executed
    $$$$$: 2954-block 11
branch 22 never executed
branch 23 never executed
    $$$$$: 2954-block 12
call   24 never executed
    $$$$$: 2954-block 13
    $$$$$: 2954-block 14
call   25 never executed
    $$$$$: 2954-block 15
call   26 never executed
    $$$$$: 2954-block 16
call   27 never executed
    $$$$$: 2954-block 17
call   28 never executed
        -: 2955:
        -: 2956:// Destructor of TestSuite.
        2: 2957:TestSuite::~TestSuite() {
        -: 2958:  // Deletes every Test in the collection.
        1: 2959:  ForEach(test_info_list_, internal::Delete<TestInfo>);
        2: 2960:}
------------------
_ZN7testing9TestSuiteD0Ev:
function _ZN7testing9TestSuiteD0Ev called 1 returned 100% blocks executed 100%
        1: 2957:TestSuite::~TestSuite() {
        -: 2958:  // Deletes every Test in the collection.
        -: 2959:  ForEach(test_info_list_, internal::Delete<TestInfo>);
        1: 2960:}
        1: 2960-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN7testing9TestSuiteD2Ev:
function _ZN7testing9TestSuiteD2Ev called 1 returned 100% blocks executed 100%
        1: 2957:TestSuite::~TestSuite() {
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
        -: 2958:  // Deletes every Test in the collection.
        1: 2959:  ForEach(test_info_list_, internal::Delete<TestInfo>);
        1: 2959-block  0
call    0 returned 1
        1: 2960:}
------------------
        -: 2961:
        -: 2962:// Returns the i-th test among all the tests. i can range from 0 to
        -: 2963:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing9TestSuite11GetTestInfoEi called 0 returned 0% blocks executed 0%
    #####: 2964:const TestInfo* TestSuite::GetTestInfo(int i) const {
    #####: 2965:  const int index = GetElementOr(test_indices_, i, -1);
    %%%%%: 2965-block  0
call    0 never executed
    #####: 2966:  return index < 0 ? nullptr : test_info_list_[static_cast<size_t>(index)];
branch  0 never executed
branch  1 never executed
    %%%%%: 2966-block  0
call    2 never executed
    %%%%%: 2966-block  1
    %%%%%: 2966-block  2
        -: 2967:}
        -: 2968:
        -: 2969:// Returns the i-th test among all the tests. i can range from 0 to
        -: 2970:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing9TestSuite18GetMutableTestInfoEi called 5 returned 100% blocks executed 86%
        5: 2971:TestInfo* TestSuite::GetMutableTestInfo(int i) {
        5: 2972:  const int index = GetElementOr(test_indices_, i, -1);
        5: 2972-block  0
call    0 returned 5
       5*: 2973:  return index < 0 ? nullptr : test_info_list_[static_cast<size_t>(index)];
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5: 2973-block  0
call    2 returned 5
    %%%%%: 2973-block  1
        5: 2973-block  2
        -: 2974:}
        -: 2975:
        -: 2976:// Adds a test to this test suite.  Will delete the test upon
        -: 2977:// destruction of the TestSuite object.
function _ZN7testing9TestSuite11AddTestInfoEPNS_8TestInfoE called 5 returned 100% blocks executed 100%
        5: 2978:void TestSuite::AddTestInfo(TestInfo* test_info) {
        5: 2979:  test_info_list_.push_back(test_info);
        5: 2979-block  0
call    0 returned 5
        5: 2980:  test_indices_.push_back(static_cast<int>(test_indices_.size()));
call    0 returned 5
call    1 returned 5
branch  2 taken 5 (fallthrough)
branch  3 taken 0 (throw)
        5: 2981:}
        5: 2981-block  0
        -: 2982:
        -: 2983:// Runs every test in this TestSuite.
function _ZN7testing9TestSuite3RunEv called 1 returned 100% blocks executed 70%
        1: 2984:void TestSuite::Run() {
       1*: 2985:  if (!should_run_) return;
        1: 2985-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 2985-block  1
        -: 2986:
        1: 2987:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        1: 2987-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2988:  impl->set_current_test_suite(this);
        1: 2988-block  0
call    0 returned 1
        -: 2989:
        1: 2990:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2990-block  0
call    3 returned 1
call    4 returned 1
        -: 2991:
        -: 2992:  // Call both legacy and the new API
        1: 2993:  repeater->OnTestSuiteStart(*this);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 2994://  Legacy API is deprecated but still available
        -: 2995:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        1: 2996:  repeater->OnTestCaseStart(*this);
        1: 2996-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 2997:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 2998:
        1: 2999:  impl->os_stack_trace_getter()->UponLeavingGTest();
        1: 2999-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2999-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3000:  internal::HandleExceptionsInMethodIfSupported(
        1: 3000-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3001:      this, &TestSuite::RunSetUpTestSuite, "SetUpTestSuite()");
        -: 3002:
        1: 3003:  const bool skip_all = ad_hoc_test_result().Failed();
        1: 3003-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -: 3004:
        1: 3005:  start_timestamp_ = internal::GetTimeInMillis();
        1: 3005-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3006:  internal::Timer timer;
        1: 3006-block  0
call    0 returned 1
        6: 3007:  for (int i = 0; i < total_test_count(); i++) {
        6: 3007-block  0
call    0 returned 6
branch  1 taken 5 (fallthrough)
branch  2 taken 1
        5: 3007-block  1
        5: 3008:    if (skip_all) {
        5: 3008-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    #####: 3009:      GetMutableTestInfo(i)->Skip();
    %%%%%: 3009-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3009-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3010:    } else {
        5: 3011:      GetMutableTestInfo(i)->Run();
        5: 3011-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5: 3011-block  1
call    3 returned 5
branch  4 taken 5 (fallthrough)
branch  5 taken 0 (throw)
        -: 3012:    }
       5*: 3013:    if (GTEST_FLAG_GET(fail_fast) &&
        5: 3013-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    %%%%%: 3013-block  1
        5: 3013-block  2
        5: 3013-block  3
branch  2 taken 0 (fallthrough)
branch  3 taken 5
    #####: 3014:        GetMutableTestInfo(i)->result()->Failed()) {
    %%%%%: 3014-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3014-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3014-block  2
branch  7 never executed
branch  8 never executed
    #####: 3015:      for (int j = i + 1; j < total_test_count(); j++) {
    %%%%%: 3015-block  0
    %%%%%: 3015-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3015-block  2
    #####: 3016:        GetMutableTestInfo(j)->Skip();
    %%%%%: 3016-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3016-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3017:      }
    #####: 3018:      break;
    %%%%%: 3018-block  0
        -: 3019:    }
        -: 3020:  }
        1: 3021:  elapsed_time_ = timer.Elapsed();
        1: 3021-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3022:
        1: 3023:  impl->os_stack_trace_getter()->UponLeavingGTest();
        1: 3023-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3023-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3024:  internal::HandleExceptionsInMethodIfSupported(
        1: 3024-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3025:      this, &TestSuite::RunTearDownTestSuite, "TearDownTestSuite()");
        -: 3026:
        -: 3027:  // Call both legacy and the new API
        1: 3028:  repeater->OnTestSuiteEnd(*this);
        1: 3028-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3029://  Legacy API is deprecated but still available
        -: 3030:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        1: 3031:  repeater->OnTestCaseEnd(*this);
        1: 3031-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3032:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3033:
        1: 3034:  impl->set_current_test_suite(nullptr);
        1: 3034-block  0
call    0 returned 1
        -: 3035:}
        -: 3036:
        -: 3037:// Skips all tests under this TestSuite.
function _ZN7testing9TestSuite4SkipEv called 0 returned 0% blocks executed 0%
    #####: 3038:void TestSuite::Skip() {
    #####: 3039:  if (!should_run_) return;
    %%%%%: 3039-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3039-block  1
        -: 3040:
    #####: 3041:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%: 3041-block  0
call    0 never executed
    #####: 3042:  impl->set_current_test_suite(this);
call    0 never executed
        -: 3043:
    #####: 3044:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 never executed
call    1 never executed
call    2 never executed
        -: 3045:
        -: 3046:  // Call both legacy and the new API
    #####: 3047:  repeater->OnTestSuiteStart(*this);
call    0 never executed
        -: 3048://  Legacy API is deprecated but still available
        -: 3049:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3050:  repeater->OnTestCaseStart(*this);
call    0 never executed
        -: 3051:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3052:
    #####: 3053:  for (int i = 0; i < total_test_count(); i++) {
    %%%%%: 3053-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3054:    GetMutableTestInfo(i)->Skip();
    %%%%%: 3054-block  0
call    0 never executed
call    1 never executed
        -: 3055:  }
        -: 3056:
        -: 3057:  // Call both legacy and the new API
    #####: 3058:  repeater->OnTestSuiteEnd(*this);
    %%%%%: 3058-block  0
call    0 never executed
        -: 3059:  // Legacy API is deprecated but still available
        -: 3060:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3061:  repeater->OnTestCaseEnd(*this);
call    0 never executed
        -: 3062:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3063:
    #####: 3064:  impl->set_current_test_suite(nullptr);
call    0 never executed
        -: 3065:}
        -: 3066:
        -: 3067:// Clears the results of all tests in this test suite.
function _ZN7testing9TestSuite11ClearResultEv called 1 returned 100% blocks executed 100%
        1: 3068:void TestSuite::ClearResult() {
        1: 3069:  ad_hoc_test_result_.Clear();
        1: 3069-block  0
call    0 returned 1
        1: 3070:  ForEach(test_info_list_, TestInfo::ClearTestResult);
call    0 returned 1
        1: 3071:}
        -: 3072:
        -: 3073:// Shuffles the tests in this test suite.
function _ZN7testing9TestSuite12ShuffleTestsEPNS_8internal6RandomE called 0 returned 0% blocks executed 0%
    #####: 3074:void TestSuite::ShuffleTests(internal::Random* random) {
    #####: 3075:  Shuffle(random, &test_indices_);
    %%%%%: 3075-block  0
call    0 never executed
    #####: 3076:}
        -: 3077:
        -: 3078:// Restores the test order to before the first shuffle.
function _ZN7testing9TestSuite14UnshuffleTestsEv called 1 returned 100% blocks executed 100%
        1: 3079:void TestSuite::UnshuffleTests() {
        6: 3080:  for (size_t i = 0; i < test_indices_.size(); i++) {
        1: 3080-block  0
        6: 3080-block  1
call    0 returned 6
branch  1 taken 5 (fallthrough)
branch  2 taken 1
        5: 3081:    test_indices_[i] = static_cast<int>(i);
        5: 3081-block  0
call    0 returned 5
        -: 3082:  }
        1: 3083:}
        -: 3084:
        -: 3085:// Formats a countable noun.  Depending on its quantity, either the
        -: 3086:// singular form or the plural form is used. e.g.
        -: 3087://
        -: 3088:// FormatCountableNoun(1, "formula", "formuli") returns "1 formula".
        -: 3089:// FormatCountableNoun(5, "book", "books") returns "5 books".
function _ZN7testingL19FormatCountableNounEiPKcS1_ called 7 returned 100% blocks executed 71%
        7: 3090:static std::string FormatCountableNoun(int count, const char* singular_form,
        -: 3091:                                       const char* plural_form) {
       14: 3092:  return internal::StreamableToString(count) + " " +
        7: 3092-block  0
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0 (throw)
        7: 3092-block  1
call    4 returned 7
call    5 returned 7
    $$$$$: 3092-block  2
call    6 never executed
    $$$$$: 3092-block  3
    $$$$$: 3092-block  4
call    7 never executed
       21: 3093:         (count == 1 ? singular_form : plural_form);
        7: 3093-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 5
        2: 3093-block  1
        5: 3093-block  2
        7: 3093-block  3
call    2 returned 7
branch  3 taken 7 (fallthrough)
branch  4 taken 0 (throw)
        7: 3093-block  4
        -: 3094:}
        -: 3095:
        -: 3096:// Formats the count of tests.
function _ZN7testingL15FormatTestCountEi called 3 returned 100% blocks executed 100%
        3: 3097:static std::string FormatTestCount(int test_count) {
        3: 3098:  return FormatCountableNoun(test_count, "test", "tests");
        3: 3098-block  0
call    0 returned 3
        -: 3099:}
        -: 3100:
        -: 3101:// Formats the count of test suites.
function _ZN7testingL20FormatTestSuiteCountEi called 2 returned 100% blocks executed 100%
        2: 3102:static std::string FormatTestSuiteCount(int test_suite_count) {
        2: 3103:  return FormatCountableNoun(test_suite_count, "test suite", "test suites");
        2: 3103-block  0
call    0 returned 2
        -: 3104:}
        -: 3105:
        -: 3106:// Converts a TestPartResult::Type enum to human-friendly string
        -: 3107:// representation.  Both kNonFatalFailure and kFatalFailure are translated
        -: 3108:// to "Failure", as the user usually doesn't care about the difference
        -: 3109:// between the two when viewing the test result.
function _ZN7testingL26TestPartResultTypeToStringENS_14TestPartResult4TypeE called 0 returned 0% blocks executed 0%
    #####: 3110:static const char* TestPartResultTypeToString(TestPartResult::Type type) {
    #####: 3111:  switch (type) {
    %%%%%: 3111-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3112:    case TestPartResult::kSkip:
    #####: 3113:      return "Skipped\n";
    %%%%%: 3113-block  0
    #####: 3114:    case TestPartResult::kSuccess:
    #####: 3115:      return "Success";
    %%%%%: 3115-block  0
        -: 3116:
    #####: 3117:    case TestPartResult::kNonFatalFailure:
        -: 3118:    case TestPartResult::kFatalFailure:
        -: 3119:#ifdef _MSC_VER
        -: 3120:      return "error: ";
        -: 3121:#else
    #####: 3122:      return "Failure\n";
    %%%%%: 3122-block  0
        -: 3123:#endif
    #####: 3124:    default:
    #####: 3125:      return "Unknown result type";
    %%%%%: 3125-block  0
        -: 3126:  }
        -: 3127:}
        -: 3128:
        -: 3129:namespace internal {
        -: 3130:namespace {
        -: 3131:enum class GTestColor { kDefault, kRed, kGreen, kYellow };
        -: 3132:}  // namespace
        -: 3133:
        -: 3134:// Prints a TestPartResult to an std::string.
function _ZN7testing8internalL27PrintTestPartResultToStringERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3135:static std::string PrintTestPartResultToString(
        -: 3136:    const TestPartResult& test_part_result) {
    #####: 3137:  return (Message() << internal::FormatFileLocation(
    %%%%%: 3137-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 3137-block  1
call    7 never executed
    $$$$$: 3137-block  2
    $$$$$: 3137-block  3
call    8 never executed
        -: 3138:                           test_part_result.file_name(),
    #####: 3139:                           test_part_result.line_number())
    %%%%%: 3139-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3140:                    << " "
    %%%%%: 3140-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3141:                    << TestPartResultTypeToString(test_part_result.type())
    %%%%%: 3141-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 3141-block  1
    #####: 3142:                    << test_part_result.message())
    %%%%%: 3142-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3142-block  1
call    4 never executed
    $$$$$: 3142-block  2
    #####: 3143:      .GetString();
    %%%%%: 3143-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3143-block  1
        -: 3144:}
        -: 3145:
        -: 3146:// Prints a TestPartResult.
function _ZN7testing8internalL19PrintTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3147:static void PrintTestPartResult(const TestPartResult& test_part_result) {
    #####: 3148:  const std::string& result = PrintTestPartResultToString(test_part_result);
    %%%%%: 3148-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3148-block  1
call    3 never executed
    $$$$$: 3148-block  2
call    4 never executed
    #####: 3149:  printf("%s\n", result.c_str());
    %%%%%: 3149-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3150:  fflush(stdout);
    %%%%%: 3150-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3151:  // If the test program runs in Visual Studio or a debugger, the
        -: 3152:  // following statements add the test part result message to the Output
        -: 3153:  // window such that the user can double-click on it to jump to the
        -: 3154:  // corresponding source code location; otherwise they do nothing.
        -: 3155:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
        -: 3156:  // We don't call OutputDebugString*() on Windows Mobile, as printing
        -: 3157:  // to stdout is done by OutputDebugString() there already - we don't
        -: 3158:  // want the same message printed twice.
        -: 3159:  ::OutputDebugStringA(result.c_str());
        -: 3160:  ::OutputDebugStringA("\n");
        -: 3161:#endif
    #####: 3162:}
        -: 3163:
        -: 3164:// class PrettyUnitTestResultPrinter
        -: 3165:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && \
        -: 3166:    !GTEST_OS_WINDOWS_RT && !GTEST_OS_WINDOWS_MINGW
        -: 3167:
        -: 3168:// Returns the character attribute for the given color.
        -: 3169:static WORD GetColorAttribute(GTestColor color) {
        -: 3170:  switch (color) {
        -: 3171:    case GTestColor::kRed:
        -: 3172:      return FOREGROUND_RED;
        -: 3173:    case GTestColor::kGreen:
        -: 3174:      return FOREGROUND_GREEN;
        -: 3175:    case GTestColor::kYellow:
        -: 3176:      return FOREGROUND_RED | FOREGROUND_GREEN;
        -: 3177:    default:
        -: 3178:      return 0;
        -: 3179:  }
        -: 3180:}
        -: 3181:
        -: 3182:static int GetBitOffset(WORD color_mask) {
        -: 3183:  if (color_mask == 0) return 0;
        -: 3184:
        -: 3185:  int bitOffset = 0;
        -: 3186:  while ((color_mask & 1) == 0) {
        -: 3187:    color_mask >>= 1;
        -: 3188:    ++bitOffset;
        -: 3189:  }
        -: 3190:  return bitOffset;
        -: 3191:}
        -: 3192:
        -: 3193:static WORD GetNewColor(GTestColor color, WORD old_color_attrs) {
        -: 3194:  // Let's reuse the BG
        -: 3195:  static const WORD background_mask = BACKGROUND_BLUE | BACKGROUND_GREEN |
        -: 3196:                                      BACKGROUND_RED | BACKGROUND_INTENSITY;
        -: 3197:  static const WORD foreground_mask = FOREGROUND_BLUE | FOREGROUND_GREEN |
        -: 3198:                                      FOREGROUND_RED | FOREGROUND_INTENSITY;
        -: 3199:  const WORD existing_bg = old_color_attrs & background_mask;
        -: 3200:
        -: 3201:  WORD new_color =
        -: 3202:      GetColorAttribute(color) | existing_bg | FOREGROUND_INTENSITY;
        -: 3203:  static const int bg_bitOffset = GetBitOffset(background_mask);
        -: 3204:  static const int fg_bitOffset = GetBitOffset(foreground_mask);
        -: 3205:
        -: 3206:  if (((new_color & background_mask) >> bg_bitOffset) ==
        -: 3207:      ((new_color & foreground_mask) >> fg_bitOffset)) {
        -: 3208:    new_color ^= FOREGROUND_INTENSITY;  // invert intensity
        -: 3209:  }
        -: 3210:  return new_color;
        -: 3211:}
        -: 3212:
        -: 3213:#else
        -: 3214:
        -: 3215:// Returns the ANSI color code for the given color. GTestColor::kDefault is
        -: 3216:// an invalid input.
function _ZN7testing8internalL16GetAnsiColorCodeENS0_12_GLOBAL__N_110GTestColorE called 17 returned 100% blocks executed 50%
       17: 3217:static const char* GetAnsiColorCode(GTestColor color) {
       17: 3218:  switch (color) {
       17: 3218-block  0
branch  0 taken 0
branch  1 taken 17
branch  2 taken 0
branch  3 taken 0
    #####: 3219:    case GTestColor::kRed:
    #####: 3220:      return "1";
    %%%%%: 3220-block  0
       17: 3221:    case GTestColor::kGreen:
       17: 3222:      return "2";
       17: 3222-block  0
    #####: 3223:    case GTestColor::kYellow:
    #####: 3224:      return "3";
    %%%%%: 3224-block  0
    #####: 3225:    default:
    #####: 3226:      return nullptr;
    %%%%%: 3226-block  0
        -: 3227:  }
        -: 3228:}
        -: 3229:
        -: 3230:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
        -: 3231:
        -: 3232:// Returns true if and only if Google Test should use colors in the output.
function _ZN7testing8internal14ShouldUseColorEb called 1 returned 100% blocks executed 41%
        1: 3233:bool ShouldUseColor(bool stdout_is_tty) {
        2: 3234:  std::string c = GTEST_FLAG_GET(color);
        1: 3234-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3234-block  1
call    3 returned 1
        1: 3235:  const char* const gtest_color = c.c_str();
        1: 3235-block  0
call    0 returned 1
        -: 3236:
        1: 3237:  if (String::CaseInsensitiveCStringEquals(gtest_color, "auto")) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        -: 3238:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MINGW
        -: 3239:    // On Windows the TERM variable is usually not set, but the
        -: 3240:    // console there does support colors.
        -: 3241:    return stdout_is_tty;
        -: 3242:#else
        -: 3243:    // On non-Windows platforms, we rely on the TERM variable.
        1: 3244:    const char* const term = posix::GetEnv("TERM");
        1: 3244-block  0
call    0 returned 1
        -: 3245:    const bool term_supports_color =
        2: 3246:        String::CStringEquals(term, "xterm") ||
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        2: 3247:        String::CStringEquals(term, "xterm-color") ||
        1: 3247-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
       1*: 3248:        String::CStringEquals(term, "xterm-256color") ||
        1: 3248-block  0
call    0 returned 1
branch  1 never executed
branch  2 never executed
    #####: 3249:        String::CStringEquals(term, "screen") ||
    %%%%%: 3249-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3250:        String::CStringEquals(term, "screen-256color") ||
    %%%%%: 3250-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3251:        String::CStringEquals(term, "tmux") ||
    %%%%%: 3251-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3252:        String::CStringEquals(term, "tmux-256color") ||
    %%%%%: 3252-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3253:        String::CStringEquals(term, "rxvt-unicode") ||
    %%%%%: 3253-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3254:        String::CStringEquals(term, "rxvt-unicode-256color") ||
    %%%%%: 3254-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
       2*: 3255:        String::CStringEquals(term, "linux") ||
branch  0 taken 1 (fallthrough)
branch  1 taken 0
    %%%%%: 3255-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
        1: 3255-block  1
    %%%%%: 3255-block  2
    #####: 3256:        String::CStringEquals(term, "cygwin");
    %%%%%: 3256-block  0
call    0 never executed
       1*: 3257:    return stdout_is_tty && term_supports_color;
        1: 3257-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3257-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1: 3257-block  2
    %%%%%: 3257-block  3
        1: 3257-block  4
        -: 3258:#endif  // GTEST_OS_WINDOWS
        -: 3259:  }
        -: 3260:
    #####: 3261:  return String::CaseInsensitiveCStringEquals(gtest_color, "yes") ||
    %%%%%: 3261-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3262:         String::CaseInsensitiveCStringEquals(gtest_color, "true") ||
    %%%%%: 3262-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3263:         String::CaseInsensitiveCStringEquals(gtest_color, "t") ||
branch  0 never executed
branch  1 never executed
    %%%%%: 3263-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3263-block  1
    %%%%%: 3263-block  2
    #####: 3264:         String::CStringEquals(gtest_color, "1");
    %%%%%: 3264-block  0
call    0 never executed
    %%%%%: 3264-block  1
        -: 3265:  // We take "yes", "true", "t", and "1" as meaning "yes".  If the
        -: 3266:  // value is neither one of these nor "auto", we treat it as "no" to
        -: 3267:  // be conservative.
        -: 3268:}
        -: 3269:
        -: 3270:// Helpers for printing colored strings to stdout. Note that on Windows, we
        -: 3271:// cannot simply emit special characters and have the terminal change colors.
        -: 3272:// This routine must actually emit the characters rather than return a string
        -: 3273:// that would be colored when printed, as can be done on Linux.
        -: 3274:
        -: 3275:GTEST_ATTRIBUTE_PRINTF_(2, 3)
function _ZN7testing8internalL13ColoredPrintfENS0_12_GLOBAL__N_110GTestColorEPKcz called 17 returned 100% blocks executed 75%
       17: 3276:static void ColoredPrintf(GTestColor color, const char* fmt, ...) {
        -: 3277:  va_list args;
       17: 3278:  va_start(args, fmt);
        -: 3279:
        -: 3280:#if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_ZOS || GTEST_OS_IOS || \
        -: 3281:    GTEST_OS_WINDOWS_PHONE || GTEST_OS_WINDOWS_RT || defined(ESP_PLATFORM)
        -: 3282:  const bool use_color = AlwaysFalse();
        -: 3283:#else
        -: 3284:  static const bool in_color_mode =
       17: 3285:      ShouldUseColor(posix::IsATTY(posix::FileNo(stdout)) != 0);
       17: 3285-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 16
        1: 3285-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 3285-block  2
call    5 returned 1
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1: 3285-block  3
call   10 returned 1
    $$$$$: 3285-block  4
branch 11 never executed
branch 12 never executed
    $$$$$: 3285-block  5
call   13 never executed
      17*: 3286:  const bool use_color = in_color_mode && (color != GTestColor::kDefault);
       17: 3286-block  0
branch  0 taken 17 (fallthrough)
branch  1 taken 0
       17: 3286-block  1
branch  2 taken 17 (fallthrough)
branch  3 taken 0
       17: 3286-block  2
    %%%%%: 3286-block  3
        -: 3287:#endif  // GTEST_OS_WINDOWS_MOBILE || GTEST_OS_ZOS
        -: 3288:
       17: 3289:  if (!use_color) {
       17: 3289-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 17
    #####: 3290:    vprintf(fmt, args);
    %%%%%: 3290-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3291:    va_end(args);
    #####: 3292:    return;
    %%%%%: 3292-block  0
        -: 3293:  }
        -: 3294:
        -: 3295:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && \
        -: 3296:    !GTEST_OS_WINDOWS_RT && !GTEST_OS_WINDOWS_MINGW
        -: 3297:  const HANDLE stdout_handle = GetStdHandle(STD_OUTPUT_HANDLE);
        -: 3298:
        -: 3299:  // Gets the current text color.
        -: 3300:  CONSOLE_SCREEN_BUFFER_INFO buffer_info;
        -: 3301:  GetConsoleScreenBufferInfo(stdout_handle, &buffer_info);
        -: 3302:  const WORD old_color_attrs = buffer_info.wAttributes;
        -: 3303:  const WORD new_color = GetNewColor(color, old_color_attrs);
        -: 3304:
        -: 3305:  // We need to flush the stream buffers into the console before each
        -: 3306:  // SetConsoleTextAttribute call lest it affect the text that is already
        -: 3307:  // printed but has not yet reached the console.
        -: 3308:  fflush(stdout);
        -: 3309:  SetConsoleTextAttribute(stdout_handle, new_color);
        -: 3310:
        -: 3311:  vprintf(fmt, args);
        -: 3312:
        -: 3313:  fflush(stdout);
        -: 3314:  // Restores the text color.
        -: 3315:  SetConsoleTextAttribute(stdout_handle, old_color_attrs);
        -: 3316:#else
       17: 3317:  printf("\033[0;3%sm", GetAnsiColorCode(color));
       17: 3317-block  0
call    0 returned 17
call    1 returned 17
branch  2 taken 17 (fallthrough)
branch  3 taken 0 (throw)
       17: 3318:  vprintf(fmt, args);
       17: 3318-block  0
call    0 returned 17
branch  1 taken 17 (fallthrough)
branch  2 taken 0 (throw)
       17: 3319:  printf("\033[m");  // Resets the terminal to default.
       17: 3319-block  0
call    0 returned 17
branch  1 taken 17 (fallthrough)
branch  2 taken 0 (throw)
        -: 3320:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
       17: 3321:  va_end(args);
       17: 3321-block  0
        -: 3322:}
        -: 3323:
        -: 3324:// Text printed in Google Test's text output and --gtest_list_tests
        -: 3325:// output to label the type parameter and value parameter for a test.
        -: 3326:static const char kTypeParamLabel[] = "TypeParam";
        -: 3327:static const char kValueParamLabel[] = "GetParam()";
        -: 3328:
function _ZN7testing8internalL29PrintFullTestCommentIfPresentERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3329:static void PrintFullTestCommentIfPresent(const TestInfo& test_info) {
    #####: 3330:  const char* const type_param = test_info.type_param();
    %%%%%: 3330-block  0
call    0 never executed
    #####: 3331:  const char* const value_param = test_info.value_param();
call    0 never executed
        -: 3332:
    #####: 3333:  if (type_param != nullptr || value_param != nullptr) {
branch  0 never executed
branch  1 never executed
    %%%%%: 3333-block  0
branch  2 never executed
branch  3 never executed
    #####: 3334:    printf(", where ");
    %%%%%: 3334-block  0
call    0 never executed
    #####: 3335:    if (type_param != nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 3336:      printf("%s = %s", kTypeParamLabel, type_param);
    %%%%%: 3336-block  0
call    0 never executed
    #####: 3337:      if (value_param != nullptr) printf(" and ");
branch  0 never executed
branch  1 never executed
    %%%%%: 3337-block  0
call    2 never executed
        -: 3338:    }
    #####: 3339:    if (value_param != nullptr) {
    %%%%%: 3339-block  0
branch  0 never executed
branch  1 never executed
    #####: 3340:      printf("%s = %s", kValueParamLabel, value_param);
    %%%%%: 3340-block  0
call    0 never executed
        -: 3341:    }
        -: 3342:  }
    #####: 3343:}
        -: 3344:
        -: 3345:// This class implements the TestEventListener interface.
        -: 3346://
        -: 3347:// Class PrettyUnitTestResultPrinter is copyable.
        -: 3348:class PrettyUnitTestResultPrinter : public TestEventListener {
        -: 3349: public:
function _ZN7testing8internal27PrettyUnitTestResultPrinterC2Ev called 1 returned 100% blocks executed 100%
        1: 3350:  PrettyUnitTestResultPrinter() {}
        1: 3350-block  0
call    0 returned 1
function _ZN7testing8internal27PrettyUnitTestResultPrinter13PrintTestNameEPKcS3_ called 10 returned 100% blocks executed 100%
       10: 3351:  static void PrintTestName(const char* test_suite, const char* test) {
       10: 3352:    printf("%s.%s", test_suite, test);
       10: 3352-block  0
call    0 returned 10
       10: 3353:  }
        -: 3354:
        -: 3355:  // The following methods override what's in the TestEventListener class.
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestProgramStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3356:  void OnTestProgramStart(const UnitTest& /*unit_test*/) override {}
        -: 3357:  void OnTestIterationStart(const UnitTest& unit_test, int iteration) override;
        -: 3358:  void OnEnvironmentsSetUpStart(const UnitTest& unit_test) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3359:  void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) override {}
        -: 3360:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3361:  void OnTestCaseStart(const TestCase& test_case) override;
        -: 3362:#else
        -: 3363:  void OnTestSuiteStart(const TestSuite& test_suite) override;
        -: 3364:#endif  // OnTestCaseStart
        -: 3365:
        -: 3366:  void OnTestStart(const TestInfo& test_info) override;
        -: 3367:  void OnTestDisabled(const TestInfo& test_info) override;
        -: 3368:
        -: 3369:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3370:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3371:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3372:  void OnTestCaseEnd(const TestCase& test_case) override;
        -: 3373:#else
        -: 3374:  void OnTestSuiteEnd(const TestSuite& test_suite) override;
        -: 3375:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3376:
        -: 3377:  void OnEnvironmentsTearDownStart(const UnitTest& unit_test) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3378:  void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) override {}
        -: 3379:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestProgramEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3380:  void OnTestProgramEnd(const UnitTest& /*unit_test*/) override {}
        -: 3381:
        -: 3382: private:
        -: 3383:  static void PrintFailedTests(const UnitTest& unit_test);
        -: 3384:  static void PrintFailedTestSuites(const UnitTest& unit_test);
        -: 3385:  static void PrintSkippedTests(const UnitTest& unit_test);
        -: 3386:};
        -: 3387:
        -: 3388:// Fired before each iteration of tests starts.
function _ZN7testing8internal27PrettyUnitTestResultPrinter20OnTestIterationStartERKNS_8UnitTestEi called 1 returned 100% blocks executed 59%
        1: 3389:void PrettyUnitTestResultPrinter::OnTestIterationStart(
        -: 3390:    const UnitTest& unit_test, int iteration) {
        1: 3391:  if (GTEST_FLAG_GET(repeat) != 1)
        1: 3391-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3392:    printf("\nRepeating all tests (iteration %d) . . .\n\n", iteration + 1);
    %%%%%: 3392-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3393:
        2: 3394:  std::string f = GTEST_FLAG_GET(filter);
        1: 3394-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3394-block  1
call    3 returned 1
    $$$$$: 3394-block  2
call    4 never executed
        1: 3395:  const char* const filter = f.c_str();
        1: 3395-block  0
call    0 returned 1
        -: 3396:
        -: 3397:  // Prints the filter if it's not *.  This reminds the user that some
        -: 3398:  // tests may be skipped.
        1: 3399:  if (!String::CStringEquals(filter, kUniversalFilter)) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 3400:    ColoredPrintf(GTestColor::kYellow, "Note: %s filter = %s\n", GTEST_NAME_,
    %%%%%: 3400-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3401:                  filter);
        -: 3402:  }
        -: 3403:
        1: 3404:  if (internal::ShouldShard(kTestTotalShards, kTestShardIndex, false)) {
        1: 3404-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3404-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 3405:    const int32_t shard_index = Int32FromEnvOrDie(kTestShardIndex, -1);
    %%%%%: 3405-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3406:    ColoredPrintf(GTestColor::kYellow, "Note: This is test shard %d of %s.\n",
    %%%%%: 3406-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3407:                  static_cast<int>(shard_index) + 1,
        -: 3408:                  internal::posix::GetEnv(kTestTotalShards));
        -: 3409:  }
        -: 3410:
        1: 3411:  if (GTEST_FLAG_GET(shuffle)) {
        1: 3411-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3412:    ColoredPrintf(GTestColor::kYellow,
    %%%%%: 3412-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3413:                  "Note: Randomizing tests' orders with a seed of %d .\n",
        -: 3414:                  unit_test.random_seed());
        -: 3415:  }
        -: 3416:
        1: 3417:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
        1: 3417-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        2: 3418:  printf("Running %s from %s.\n",
        1: 3418-block  0
call    0 returned 1
        1: 3418-block  1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        2: 3419:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3419-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3419-block  1
call    6 returned 1
    $$$$$: 3419-block  2
call    7 never executed
    $$$$$: 3419-block  3
        2: 3420:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
        1: 3420-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3420-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
    $$$$$: 3420-block  2
call    7 never executed
    $$$$$: 3420-block  3
        1: 3421:  fflush(stdout);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3422:}
        -: 3423:
function _ZN7testing8internal27PrettyUnitTestResultPrinter24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3424:void PrettyUnitTestResultPrinter::OnEnvironmentsSetUpStart(
        -: 3425:    const UnitTest& /*unit_test*/) {
        1: 3426:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3426-block  0
call    0 returned 1
        1: 3427:  printf("Global test environment set-up.\n");
call    0 returned 1
        1: 3428:  fflush(stdout);
call    0 returned 1
        1: 3429:}
        -: 3430:
        -: 3431:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal27PrettyUnitTestResultPrinter15OnTestCaseStartERKNS_9TestSuiteE called 1 returned 100% blocks executed 76%
        1: 3432:void PrettyUnitTestResultPrinter::OnTestCaseStart(const TestCase& test_case) {
        -: 3433:  const std::string counts =
        2: 3434:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
        1: 3434-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3434-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3434-block  2
call    6 returned 1
    $$$$$: 3434-block  3
call    7 never executed
        1: 3435:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3435-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3436:  printf("%s from %s", counts.c_str(), test_case.name());
        1: 3436-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1: 3437:  if (test_case.type_param() == nullptr) {
        1: 3437-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 3438:    printf("\n");
        1: 3438-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3439:  } else {
    #####: 3440:    printf(", where %s = %s\n", kTypeParamLabel, test_case.type_param());
    %%%%%: 3440-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3441:  }
        1: 3442:  fflush(stdout);
        1: 3442-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3443:}
        -: 3444:#else
        -: 3445:void PrettyUnitTestResultPrinter::OnTestSuiteStart(
        -: 3446:    const TestSuite& test_suite) {
        -: 3447:  const std::string counts =
        -: 3448:      FormatCountableNoun(test_suite.test_to_run_count(), "test", "tests");
        -: 3449:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        -: 3450:  printf("%s from %s", counts.c_str(), test_suite.name());
        -: 3451:  if (test_suite.type_param() == nullptr) {
        -: 3452:    printf("\n");
        -: 3453:  } else {
        -: 3454:    printf(", where %s = %s\n", kTypeParamLabel, test_suite.type_param());
        -: 3455:  }
        -: 3456:  fflush(stdout);
        -: 3457:}
        -: 3458:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3459:
function _ZN7testing8internal27PrettyUnitTestResultPrinter11OnTestStartERKNS_8TestInfoE called 5 returned 100% blocks executed 100%
        5: 3460:void PrettyUnitTestResultPrinter::OnTestStart(const TestInfo& test_info) {
        5: 3461:  ColoredPrintf(GTestColor::kGreen, "[ RUN      ] ");
        5: 3461-block  0
call    0 returned 5
        5: 3462:  PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 returned 5
call    1 returned 5
call    2 returned 5
        5: 3463:  printf("\n");
call    0 returned 5
        5: 3464:  fflush(stdout);
call    0 returned 5
        5: 3465:}
        -: 3466:
function _ZN7testing8internal27PrettyUnitTestResultPrinter14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3467:void PrettyUnitTestResultPrinter::OnTestDisabled(const TestInfo& test_info) {
    #####: 3468:  ColoredPrintf(GTestColor::kYellow, "[ DISABLED ] ");
    %%%%%: 3468-block  0
call    0 never executed
    #####: 3469:  PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3470:  printf("\n");
call    0 never executed
    #####: 3471:  fflush(stdout);
call    0 never executed
    #####: 3472:}
        -: 3473:
        -: 3474:// Called after an assertion failure.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3475:void PrettyUnitTestResultPrinter::OnTestPartResult(
        -: 3476:    const TestPartResult& result) {
    #####: 3477:  switch (result.type()) {
    %%%%%: 3477-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3478:    // If the test part succeeded, we don't need to do anything.
    #####: 3479:    case TestPartResult::kSuccess:
    #####: 3480:      return;
    %%%%%: 3480-block  0
    #####: 3481:    default:
        -: 3482:      // Print failure message from the assertion
        -: 3483:      // (e.g. expected this and got that).
    #####: 3484:      PrintTestPartResult(result);
    %%%%%: 3484-block  0
call    0 never executed
    #####: 3485:      fflush(stdout);
call    0 never executed
        -: 3486:  }
        -: 3487:}
        -: 3488:
function _ZN7testing8internal27PrettyUnitTestResultPrinter9OnTestEndERKNS_8TestInfoE called 5 returned 100% blocks executed 68%
        5: 3489:void PrettyUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
        5: 3490:  if (test_info.result()->Passed()) {
        5: 3490-block  0
call    0 returned 5
call    1 returned 5
branch  2 taken 5 (fallthrough)
branch  3 taken 0
        5: 3491:    ColoredPrintf(GTestColor::kGreen, "[       OK ] ");
        5: 3491-block  0
call    0 returned 5
    #####: 3492:  } else if (test_info.result()->Skipped()) {
    %%%%%: 3492-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3493:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3493-block  0
call    0 never executed
        -: 3494:  } else {
    #####: 3495:    ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3495-block  0
call    0 never executed
        -: 3496:  }
        5: 3497:  PrintTestName(test_info.test_suite_name(), test_info.name());
        5: 3497-block  0
call    0 returned 5
call    1 returned 5
call    2 returned 5
       5*: 3498:  if (test_info.result()->Failed()) PrintFullTestCommentIfPresent(test_info);
call    0 returned 5
call    1 returned 5
branch  2 taken 0 (fallthrough)
branch  3 taken 5
    %%%%%: 3498-block  0
call    4 never executed
        -: 3499:
        5: 3500:  if (GTEST_FLAG_GET(print_time)) {
        5: 3500-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5: 3501:    printf(" (%s ms)\n",
        5: 3501-block  0
call    0 returned 5
call    1 returned 5
branch  2 taken 5 (fallthrough)
branch  3 taken 0 (throw)
       10: 3502:           internal::StreamableToString(test_info.result()->elapsed_time())
        5: 3502-block  0
call    0 returned 5
call    1 returned 5
call    2 returned 5
branch  3 taken 5 (fallthrough)
branch  4 taken 0 (throw)
        5: 3502-block  1
call    5 returned 5
    $$$$$: 3502-block  2
call    6 never executed
    $$$$$: 3502-block  3
        -: 3503:               .c_str());
        -: 3504:  } else {
    #####: 3505:    printf("\n");
    %%%%%: 3505-block  0
call    0 never executed
        -: 3506:  }
        5: 3507:  fflush(stdout);
        5: 3507-block  0
call    0 returned 5
        5: 3508:}
        -: 3509:
        -: 3510:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal27PrettyUnitTestResultPrinter13OnTestCaseEndERKNS_9TestSuiteE called 1 returned 100% blocks executed 70%
        1: 3511:void PrettyUnitTestResultPrinter::OnTestCaseEnd(const TestCase& test_case) {
       1*: 3512:  if (!GTEST_FLAG_GET(print_time)) return;
        1: 3512-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 3512-block  1
        -: 3513:
        -: 3514:  const std::string counts =
        2: 3515:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
        1: 3515-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3515-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3515-block  2
call    6 returned 1
    $$$$$: 3515-block  3
call    7 never executed
        1: 3516:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3516-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3517:  printf("%s from %s (%s ms total)\n\n", counts.c_str(), test_case.name(),
        1: 3517-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        2: 3518:         internal::StreamableToString(test_case.elapsed_time()).c_str());
        1: 3518-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 3518-block  1
call    4 returned 1
    $$$$$: 3518-block  2
call    5 never executed
    $$$$$: 3518-block  3
    $$$$$: 3518-block  4
        1: 3519:  fflush(stdout);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 3520:}
        -: 3521:#else
        -: 3522:void PrettyUnitTestResultPrinter::OnTestSuiteEnd(const TestSuite& test_suite) {
        -: 3523:  if (!GTEST_FLAG_GET(print_time)) return;
        -: 3524:
        -: 3525:  const std::string counts =
        -: 3526:      FormatCountableNoun(test_suite.test_to_run_count(), "test", "tests");
        -: 3527:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        -: 3528:  printf("%s from %s (%s ms total)\n\n", counts.c_str(), test_suite.name(),
        -: 3529:         internal::StreamableToString(test_suite.elapsed_time()).c_str());
        -: 3530:  fflush(stdout);
        -: 3531:}
        -: 3532:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3533:
function _ZN7testing8internal27PrettyUnitTestResultPrinter27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3534:void PrettyUnitTestResultPrinter::OnEnvironmentsTearDownStart(
        -: 3535:    const UnitTest& /*unit_test*/) {
        1: 3536:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3536-block  0
call    0 returned 1
        1: 3537:  printf("Global test environment tear-down\n");
call    0 returned 1
        1: 3538:  fflush(stdout);
call    0 returned 1
        1: 3539:}
        -: 3540:
        -: 3541:// Internal helper for printing the list of failed tests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16PrintFailedTestsERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3542:void PrettyUnitTestResultPrinter::PrintFailedTests(const UnitTest& unit_test) {
    #####: 3543:  const int failed_test_count = unit_test.failed_test_count();
    %%%%%: 3543-block  0
call    0 never executed
    #####: 3544:  ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
call    0 never executed
    #####: 3545:  printf("%s, listed below:\n", FormatTestCount(failed_test_count).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3545-block  0
call    5 never executed
    $$$$$: 3545-block  1
call    6 never executed
        -: 3546:
    #####: 3547:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3547-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3547-block  1
    #####: 3548:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3548-block  0
call    0 never executed
    #####: 3549:    if (!test_suite.should_run() || (test_suite.failed_test_count() == 0)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3549-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3549-block  1
    %%%%%: 3549-block  2
    %%%%%: 3549-block  3
branch  6 never executed
branch  7 never executed
    #####: 3550:      continue;
    %%%%%: 3550-block  0
        -: 3551:    }
    #####: 3552:    for (int j = 0; j < test_suite.total_test_count(); ++j) {
    %%%%%: 3552-block  0
    %%%%%: 3552-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3552-block  2
    #####: 3553:      const TestInfo& test_info = *test_suite.GetTestInfo(j);
    %%%%%: 3553-block  0
call    0 never executed
    #####: 3554:      if (!test_info.should_run() || !test_info.result()->Failed()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3554-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3554-block  1
    %%%%%: 3554-block  2
    %%%%%: 3554-block  3
branch  7 never executed
branch  8 never executed
    #####: 3555:        continue;
    %%%%%: 3555-block  0
        -: 3556:      }
    #####: 3557:      ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3557-block  0
call    0 never executed
    #####: 3558:      printf("%s.%s", test_suite.name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3559:      PrintFullTestCommentIfPresent(test_info);
call    0 never executed
    #####: 3560:      printf("\n");
call    0 never executed
        -: 3561:    }
        -: 3562:  }
    #####: 3563:  printf("\n%2d FAILED %s\n", failed_test_count,
    %%%%%: 3563-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3563-block  1
    %%%%%: 3563-block  2
    %%%%%: 3563-block  3
call    2 never executed
        -: 3564:         failed_test_count == 1 ? "TEST" : "TESTS");
    #####: 3565:}
        -: 3566:
        -: 3567:// Internal helper for printing the list of test suite failures not covered by
        -: 3568:// PrintFailedTests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter21PrintFailedTestSuitesERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3569:void PrettyUnitTestResultPrinter::PrintFailedTestSuites(
        -: 3570:    const UnitTest& unit_test) {
    #####: 3571:  int suite_failure_count = 0;
    #####: 3572:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3572-block  0
    %%%%%: 3572-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3572-block  2
    #####: 3573:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3573-block  0
call    0 never executed
    #####: 3574:    if (!test_suite.should_run()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3575:      continue;
    %%%%%: 3575-block  0
        -: 3576:    }
    #####: 3577:    if (test_suite.ad_hoc_test_result().Failed()) {
    %%%%%: 3577-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3578:      ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3578-block  0
call    0 never executed
    #####: 3579:      printf("%s: SetUpTestSuite or TearDownTestSuite\n", test_suite.name());
call    0 never executed
call    1 never executed
    #####: 3580:      ++suite_failure_count;
        -: 3581:    }
        -: 3582:  }
    #####: 3583:  if (suite_failure_count > 0) {
    %%%%%: 3583-block  0
branch  0 never executed
branch  1 never executed
    #####: 3584:    printf("\n%2d FAILED TEST %s\n", suite_failure_count,
    %%%%%: 3584-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3584-block  1
    %%%%%: 3584-block  2
    %%%%%: 3584-block  3
call    2 never executed
        -: 3585:           suite_failure_count == 1 ? "SUITE" : "SUITES");
        -: 3586:  }
    #####: 3587:}
        -: 3588:
        -: 3589:// Internal helper for printing the list of skipped tests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter17PrintSkippedTestsERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3590:void PrettyUnitTestResultPrinter::PrintSkippedTests(const UnitTest& unit_test) {
    #####: 3591:  const int skipped_test_count = unit_test.skipped_test_count();
    %%%%%: 3591-block  0
call    0 never executed
    #####: 3592:  if (skipped_test_count == 0) {
branch  0 never executed
branch  1 never executed
    #####: 3593:    return;
    %%%%%: 3593-block  0
        -: 3594:  }
        -: 3595:
    #####: 3596:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3596-block  0
    %%%%%: 3596-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3596-block  2
    #####: 3597:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3597-block  0
call    0 never executed
    #####: 3598:    if (!test_suite.should_run() || (test_suite.skipped_test_count() == 0)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3598-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3598-block  1
    %%%%%: 3598-block  2
    %%%%%: 3598-block  3
branch  6 never executed
branch  7 never executed
    #####: 3599:      continue;
    %%%%%: 3599-block  0
        -: 3600:    }
    #####: 3601:    for (int j = 0; j < test_suite.total_test_count(); ++j) {
    %%%%%: 3601-block  0
    %%%%%: 3601-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3601-block  2
    #####: 3602:      const TestInfo& test_info = *test_suite.GetTestInfo(j);
    %%%%%: 3602-block  0
call    0 never executed
    #####: 3603:      if (!test_info.should_run() || !test_info.result()->Skipped()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3603-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3603-block  1
    %%%%%: 3603-block  2
    %%%%%: 3603-block  3
branch  7 never executed
branch  8 never executed
    #####: 3604:        continue;
    %%%%%: 3604-block  0
        -: 3605:      }
    #####: 3606:      ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3606-block  0
call    0 never executed
    #####: 3607:      printf("%s.%s", test_suite.name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3608:      printf("\n");
call    0 never executed
        -: 3609:    }
        -: 3610:  }
        -: 3611:}
        -: 3612:
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 1 returned 100% blocks executed 52%
        1: 3613:void PrettyUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3614:                                                     int /*iteration*/) {
        1: 3615:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
        1: 3615-block  0
call    0 returned 1
        2: 3616:  printf("%s from %s ran.",
call    0 returned 1
        1: 3616-block  0
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        2: 3617:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3617-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3617-block  1
call    6 returned 1
    $$$$$: 3617-block  2
call    7 never executed
    $$$$$: 3617-block  3
        2: 3618:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
call    0 returned 1
call    1 returned 1
call    2 returned 1
    $$$$$: 3618-block  0
call    3 never executed
    $$$$$: 3618-block  1
call    4 never executed
        1: 3619:  if (GTEST_FLAG_GET(print_time)) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3620:    printf(" (%s ms total)",
        1: 3620-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        2: 3621:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
        1: 3621-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 3621-block  1
call    4 returned 1
    $$$$$: 3621-block  2
call    5 never executed
    $$$$$: 3621-block  3
    $$$$$: 3621-block  4
call    6 never executed
        -: 3622:  }
        1: 3623:  printf("\n");
        1: 3623-block  0
call    0 returned 1
        1: 3624:  ColoredPrintf(GTestColor::kGreen, "[  PASSED  ] ");
call    0 returned 1
        1: 3625:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3625-block  0
call    6 returned 1
    $$$$$: 3625-block  1
call    7 never executed
    $$$$$: 3625-block  2
call    8 never executed
        -: 3626:
        1: 3627:  const int skipped_test_count = unit_test.skipped_test_count();
call    0 returned 1
        1: 3628:  if (skipped_test_count > 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3629:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3629-block  0
call    0 never executed
    #####: 3630:    printf("%s, listed below:\n", FormatTestCount(skipped_test_count).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3630-block  0
call    5 never executed
    $$$$$: 3630-block  1
call    6 never executed
    #####: 3631:    PrintSkippedTests(unit_test);
call    0 never executed
        -: 3632:  }
        -: 3633:
        1: 3634:  if (!unit_test.Passed()) {
        1: 3634-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 3635:    PrintFailedTests(unit_test);
    %%%%%: 3635-block  0
call    0 never executed
    #####: 3636:    PrintFailedTestSuites(unit_test);
call    0 never executed
        -: 3637:  }
        -: 3638:
        1: 3639:  int num_disabled = unit_test.reportable_disabled_test_count();
        1: 3639-block  0
call    0 returned 1
       1*: 3640:  if (num_disabled && !GTEST_FLAG_GET(also_run_disabled_tests)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 3640-block  0
branch  2 never executed
branch  3 never executed
    #####: 3641:    if (unit_test.Passed()) {
    %%%%%: 3641-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3642:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    %%%%%: 3642-block  0
call    0 never executed
        -: 3643:    }
    #####: 3644:    ColoredPrintf(GTestColor::kYellow, "  YOU HAVE %d DISABLED %s\n\n",
    %%%%%: 3644-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3644-block  1
    %%%%%: 3644-block  2
    %%%%%: 3644-block  3
call    2 never executed
        -: 3645:                  num_disabled, num_disabled == 1 ? "TEST" : "TESTS");
        -: 3646:  }
        -: 3647:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
        1: 3648:  fflush(stdout);
        1: 3648-block  0
call    0 returned 1
        1: 3649:}
        -: 3650:
        -: 3651:// End PrettyUnitTestResultPrinter
        -: 3652:
        -: 3653:// This class implements the TestEventListener interface.
        -: 3654://
        -: 3655:// Class BriefUnitTestResultPrinter is copyable.
        -: 3656:class BriefUnitTestResultPrinter : public TestEventListener {
        -: 3657: public:
function _ZN7testing8internal26BriefUnitTestResultPrinterC2Ev called 0 returned 0% blocks executed 0%
    #####: 3658:  BriefUnitTestResultPrinter() {}
    %%%%%: 3658-block  0
call    0 never executed
function _ZN7testing8internal26BriefUnitTestResultPrinter13PrintTestNameEPKcS3_ called 0 returned 0% blocks executed 0%
    #####: 3659:  static void PrintTestName(const char* test_suite, const char* test) {
    #####: 3660:    printf("%s.%s", test_suite, test);
    %%%%%: 3660-block  0
call    0 never executed
    #####: 3661:  }
        -: 3662:
        -: 3663:  // The following methods override what's in the TestEventListener class.
function _ZN7testing8internal26BriefUnitTestResultPrinter18OnTestProgramStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3664:  void OnTestProgramStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter20OnTestIterationStartERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3665:  void OnTestIterationStart(const UnitTest& /*unit_test*/,
    #####: 3666:                            int /*iteration*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3667:  void OnEnvironmentsSetUpStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3668:  void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) override {}
        -: 3669:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal26BriefUnitTestResultPrinter15OnTestCaseStartERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3670:  void OnTestCaseStart(const TestCase& /*test_case*/) override {}
        -: 3671:#else
        -: 3672:  void OnTestSuiteStart(const TestSuite& /*test_suite*/) override {}
        -: 3673:#endif  // OnTestCaseStart
        -: 3674:
function _ZN7testing8internal26BriefUnitTestResultPrinter11OnTestStartERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3675:  void OnTestStart(const TestInfo& /*test_info*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3676:  void OnTestDisabled(const TestInfo& /*test_info*/) override {}
        -: 3677:
        -: 3678:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3679:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3680:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal26BriefUnitTestResultPrinter13OnTestCaseEndERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3681:  void OnTestCaseEnd(const TestCase& /*test_case*/) override {}
        -: 3682:#else
        -: 3683:  void OnTestSuiteEnd(const TestSuite& /*test_suite*/) override {}
        -: 3684:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3685:
function _ZN7testing8internal26BriefUnitTestResultPrinter27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3686:  void OnEnvironmentsTearDownStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3687:  void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) override {}
        -: 3688:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
function _ZN7testing8internal26BriefUnitTestResultPrinter16OnTestProgramEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3689:  void OnTestProgramEnd(const UnitTest& /*unit_test*/) override {}
        -: 3690:};
        -: 3691:
        -: 3692:// Called after an assertion failure.
function _ZN7testing8internal26BriefUnitTestResultPrinter16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3693:void BriefUnitTestResultPrinter::OnTestPartResult(
        -: 3694:    const TestPartResult& result) {
    #####: 3695:  switch (result.type()) {
    %%%%%: 3695-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3696:    // If the test part succeeded, we don't need to do anything.
    #####: 3697:    case TestPartResult::kSuccess:
    #####: 3698:      return;
    %%%%%: 3698-block  0
    #####: 3699:    default:
        -: 3700:      // Print failure message from the assertion
        -: 3701:      // (e.g. expected this and got that).
    #####: 3702:      PrintTestPartResult(result);
    %%%%%: 3702-block  0
call    0 never executed
    #####: 3703:      fflush(stdout);
call    0 never executed
        -: 3704:  }
        -: 3705:}
        -: 3706:
function _ZN7testing8internal26BriefUnitTestResultPrinter9OnTestEndERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3707:void BriefUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
    #####: 3708:  if (test_info.result()->Failed()) {
    %%%%%: 3708-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3709:    ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3709-block  0
call    0 never executed
    #####: 3710:    PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3711:    PrintFullTestCommentIfPresent(test_info);
call    0 never executed
        -: 3712:
    #####: 3713:    if (GTEST_FLAG_GET(print_time)) {
branch  0 never executed
branch  1 never executed
    #####: 3714:      printf(" (%s ms)\n",
    %%%%%: 3714-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3715:             internal::StreamableToString(test_info.result()->elapsed_time())
    %%%%%: 3715-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3715-block  1
call    5 never executed
    $$$$$: 3715-block  2
call    6 never executed
    $$$$$: 3715-block  3
        -: 3716:                 .c_str());
        -: 3717:    } else {
    #####: 3718:      printf("\n");
    %%%%%: 3718-block  0
call    0 never executed
        -: 3719:    }
    #####: 3720:    fflush(stdout);
    %%%%%: 3720-block  0
call    0 never executed
        -: 3721:  }
    #####: 3722:}
    %%%%%: 3722-block  0
        -: 3723:
function _ZN7testing8internal26BriefUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3724:void BriefUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3725:                                                    int /*iteration*/) {
    #####: 3726:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
    %%%%%: 3726-block  0
call    0 never executed
    #####: 3727:  printf("%s from %s ran.",
call    0 never executed
    %%%%%: 3727-block  0
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3728:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3728-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3728-block  1
call    6 never executed
    $$$$$: 3728-block  2
call    7 never executed
    $$$$$: 3728-block  3
    #####: 3729:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 3729-block  0
call    3 never executed
    $$$$$: 3729-block  1
call    4 never executed
    #####: 3730:  if (GTEST_FLAG_GET(print_time)) {
branch  0 never executed
branch  1 never executed
    #####: 3731:    printf(" (%s ms total)",
    %%%%%: 3731-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3732:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
    %%%%%: 3732-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3732-block  1
call    4 never executed
    $$$$$: 3732-block  2
call    5 never executed
    $$$$$: 3732-block  3
    $$$$$: 3732-block  4
call    6 never executed
        -: 3733:  }
    #####: 3734:  printf("\n");
    %%%%%: 3734-block  0
call    0 never executed
    #####: 3735:  ColoredPrintf(GTestColor::kGreen, "[  PASSED  ] ");
call    0 never executed
    #####: 3736:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3736-block  0
call    6 never executed
    $$$$$: 3736-block  1
call    7 never executed
    $$$$$: 3736-block  2
call    8 never executed
        -: 3737:
    #####: 3738:  const int skipped_test_count = unit_test.skipped_test_count();
call    0 never executed
    #####: 3739:  if (skipped_test_count > 0) {
branch  0 never executed
branch  1 never executed
    #####: 3740:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3740-block  0
call    0 never executed
    #####: 3741:    printf("%s.\n", FormatTestCount(skipped_test_count).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3741-block  0
call    5 never executed
    $$$$$: 3741-block  1
call    6 never executed
        -: 3742:  }
        -: 3743:
    #####: 3744:  int num_disabled = unit_test.reportable_disabled_test_count();
    %%%%%: 3744-block  0
call    0 never executed
    #####: 3745:  if (num_disabled && !GTEST_FLAG_GET(also_run_disabled_tests)) {
branch  0 never executed
branch  1 never executed
    %%%%%: 3745-block  0
branch  2 never executed
branch  3 never executed
    #####: 3746:    if (unit_test.Passed()) {
    %%%%%: 3746-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3747:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    %%%%%: 3747-block  0
call    0 never executed
        -: 3748:    }
    #####: 3749:    ColoredPrintf(GTestColor::kYellow, "  YOU HAVE %d DISABLED %s\n\n",
    %%%%%: 3749-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3749-block  1
    %%%%%: 3749-block  2
    %%%%%: 3749-block  3
call    2 never executed
        -: 3750:                  num_disabled, num_disabled == 1 ? "TEST" : "TESTS");
        -: 3751:  }
        -: 3752:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
    #####: 3753:  fflush(stdout);
    %%%%%: 3753-block  0
call    0 never executed
    #####: 3754:}
        -: 3755:
        -: 3756:// End BriefUnitTestResultPrinter
        -: 3757:
        -: 3758:// class TestEventRepeater
        -: 3759://
        -: 3760:// This class forwards events to other event listeners.
        -: 3761:class TestEventRepeater : public TestEventListener {
        -: 3762: public:
function _ZN7testing8internal17TestEventRepeaterC2Ev called 1 returned 100% blocks executed 100%
        1: 3763:  TestEventRepeater() : forwarding_enabled_(true) {}
        1: 3763-block  0
call    0 returned 1
call    1 returned 1
        -: 3764:  ~TestEventRepeater() override;
        -: 3765:  void Append(TestEventListener* listener);
        -: 3766:  TestEventListener* Release(TestEventListener* listener);
        -: 3767:
        -: 3768:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3769:  // in death test child processes.
function _ZNK7testing8internal17TestEventRepeater18forwarding_enabledEv called 0 returned 0% blocks executed 0%
    #####: 3770:  bool forwarding_enabled() const { return forwarding_enabled_; }
    %%%%%: 3770-block  0
function _ZN7testing8internal17TestEventRepeater22set_forwarding_enabledEb called 0 returned 0% blocks executed 0%
    #####: 3771:  void set_forwarding_enabled(bool enable) { forwarding_enabled_ = enable; }
        -: 3772:
        -: 3773:  void OnTestProgramStart(const UnitTest& unit_test) override;
        -: 3774:  void OnTestIterationStart(const UnitTest& unit_test, int iteration) override;
        -: 3775:  void OnEnvironmentsSetUpStart(const UnitTest& unit_test) override;
        -: 3776:  void OnEnvironmentsSetUpEnd(const UnitTest& unit_test) override;
        -: 3777://  Legacy API is deprecated but still available
        -: 3778:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3779:  void OnTestCaseStart(const TestSuite& parameter) override;
        -: 3780:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3781:  void OnTestSuiteStart(const TestSuite& parameter) override;
        -: 3782:  void OnTestStart(const TestInfo& test_info) override;
        -: 3783:  void OnTestDisabled(const TestInfo& test_info) override;
        -: 3784:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3785:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3786://  Legacy API is deprecated but still available
        -: 3787:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3788:  void OnTestCaseEnd(const TestCase& parameter) override;
        -: 3789:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3790:  void OnTestSuiteEnd(const TestSuite& parameter) override;
        -: 3791:  void OnEnvironmentsTearDownStart(const UnitTest& unit_test) override;
        -: 3792:  void OnEnvironmentsTearDownEnd(const UnitTest& unit_test) override;
        -: 3793:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 3794:  void OnTestProgramEnd(const UnitTest& unit_test) override;
        -: 3795:
        -: 3796: private:
        -: 3797:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3798:  // in death test child processes.
        -: 3799:  bool forwarding_enabled_;
        -: 3800:  // The list of listeners that receive events.
        -: 3801:  std::vector<TestEventListener*> listeners_;
        -: 3802:
        -: 3803:  TestEventRepeater(const TestEventRepeater&) = delete;
        -: 3804:  TestEventRepeater& operator=(const TestEventRepeater&) = delete;
        -: 3805:};
        -: 3806:
        2: 3807:TestEventRepeater::~TestEventRepeater() {
        1: 3808:  ForEach(listeners_, Delete<TestEventListener>);
        2: 3809:}
------------------
_ZN7testing8internal17TestEventRepeaterD0Ev:
function _ZN7testing8internal17TestEventRepeaterD0Ev called 1 returned 100% blocks executed 100%
        1: 3807:TestEventRepeater::~TestEventRepeater() {
        -: 3808:  ForEach(listeners_, Delete<TestEventListener>);
        1: 3809:}
        1: 3809-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN7testing8internal17TestEventRepeaterD2Ev:
function _ZN7testing8internal17TestEventRepeaterD2Ev called 1 returned 100% blocks executed 100%
        1: 3807:TestEventRepeater::~TestEventRepeater() {
call    0 returned 1
call    1 returned 1
        1: 3808:  ForEach(listeners_, Delete<TestEventListener>);
        1: 3808-block  0
call    0 returned 1
        1: 3809:}
------------------
        -: 3810:
function _ZN7testing8internal17TestEventRepeater6AppendEPNS_17TestEventListenerE called 1 returned 100% blocks executed 100%
        1: 3811:void TestEventRepeater::Append(TestEventListener* listener) {
        1: 3812:  listeners_.push_back(listener);
        1: 3812-block  0
call    0 returned 1
        1: 3813:}
        -: 3814:
function _ZN7testing8internal17TestEventRepeater7ReleaseEPNS_17TestEventListenerE called 1 returned 100% blocks executed 38%
        1: 3815:TestEventListener* TestEventRepeater::Release(TestEventListener* listener) {
       1*: 3816:  for (size_t i = 0; i < listeners_.size(); ++i) {
        1: 3816-block  0
        1: 3816-block  1
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 3816-block  2
    #####: 3817:    if (listeners_[i] == listener) {
    %%%%%: 3817-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3818:      listeners_.erase(listeners_.begin() + static_cast<int>(i));
    %%%%%: 3818-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3818-block  1
    $$$$$: 3818-block  2
    #####: 3819:      return listener;
    %%%%%: 3819-block  0
        -: 3820:    }
        -: 3821:  }
        -: 3822:
        1: 3823:  return nullptr;
        1: 3823-block  0
        -: 3824:}
        -: 3825:
        -: 3826:// Since most methods are very similar, use macros to reduce boilerplate.
        -: 3827:// This defines a member that forwards the call to all listeners.
        -: 3828:#define GTEST_REPEATER_METHOD_(Name, Type)              \
        -: 3829:  void TestEventRepeater::Name(const Type& parameter) { \
        -: 3830:    if (forwarding_enabled_) {                          \
        -: 3831:      for (size_t i = 0; i < listeners_.size(); i++) {  \
        -: 3832:        listeners_[i]->Name(parameter);                 \
        -: 3833:      }                                                 \
        -: 3834:    }                                                   \
        -: 3835:  }
        -: 3836:// This defines a member that forwards the call to all listeners in reverse
        -: 3837:// order.
        -: 3838:#define GTEST_REVERSE_REPEATER_METHOD_(Name, Type)      \
        -: 3839:  void TestEventRepeater::Name(const Type& parameter) { \
        -: 3840:    if (forwarding_enabled_) {                          \
        -: 3841:      for (size_t i = listeners_.size(); i != 0; i--) { \
        -: 3842:        listeners_[i - 1]->Name(parameter);             \
        -: 3843:      }                                                 \
        -: 3844:    }                                                   \
        -: 3845:  }
        -: 3846:
function _ZN7testing8internal17TestEventRepeater18OnTestProgramStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3847:GTEST_REPEATER_METHOD_(OnTestProgramStart, UnitTest)
        1: 3847-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3847-block  1
        2: 3847-block  2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3847-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3848:GTEST_REPEATER_METHOD_(OnEnvironmentsSetUpStart, UnitTest)
        1: 3848-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3848-block  1
        2: 3848-block  2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3848-block  3
call    5 returned 1
call    6 returned 1
        -: 3849://  Legacy API is deprecated but still available
        -: 3850:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater15OnTestCaseStartERKNS_9TestSuiteE called 1 returned 100% blocks executed 100%
        2: 3851:GTEST_REPEATER_METHOD_(OnTestCaseStart, TestSuite)
        1: 3851-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3851-block  1
        2: 3851-block  2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3851-block  3
call    5 returned 1
call    6 returned 1
        -: 3852:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater16OnTestSuiteStartERKNS_9TestSuiteE called 1 returned 100% blocks executed 100%
        2: 3853:GTEST_REPEATER_METHOD_(OnTestSuiteStart, TestSuite)
        1: 3853-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3853-block  1
        2: 3853-block  2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3853-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater11OnTestStartERKNS_8TestInfoE called 5 returned 100% blocks executed 100%
       10: 3854:GTEST_REPEATER_METHOD_(OnTestStart, TestInfo)
        5: 3854-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5: 3854-block  1
       10: 3854-block  2
call    2 returned 10
branch  3 taken 5 (fallthrough)
branch  4 taken 5
        5: 3854-block  3
call    5 returned 5
call    6 returned 5
function _ZN7testing8internal17TestEventRepeater14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3855:GTEST_REPEATER_METHOD_(OnTestDisabled, TestInfo)
    %%%%%: 3855-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3855-block  1
    %%%%%: 3855-block  2
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3855-block  3
call    5 never executed
call    6 never executed
function _ZN7testing8internal17TestEventRepeater16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3856:GTEST_REPEATER_METHOD_(OnTestPartResult, TestPartResult)
    %%%%%: 3856-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3856-block  1
    %%%%%: 3856-block  2
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3856-block  3
call    5 never executed
call    6 never executed
function _ZN7testing8internal17TestEventRepeater27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3857:GTEST_REPEATER_METHOD_(OnEnvironmentsTearDownStart, UnitTest)
        1: 3857-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3857-block  1
        2: 3857-block  2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3857-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3858:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsSetUpEnd, UnitTest)
        1: 3858-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3858-block  1
call    2 returned 1
        2: 3858-block  2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3858-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3859:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsTearDownEnd, UnitTest)
        1: 3859-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3859-block  1
call    2 returned 1
        2: 3859-block  2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3859-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater9OnTestEndERKNS_8TestInfoE called 5 returned 100% blocks executed 100%
       10: 3860:GTEST_REVERSE_REPEATER_METHOD_(OnTestEnd, TestInfo)
        5: 3860-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5: 3860-block  1
call    2 returned 5
       10: 3860-block  2
branch  3 taken 5 (fallthrough)
branch  4 taken 5
        5: 3860-block  3
call    5 returned 5
call    6 returned 5
        -: 3861://  Legacy API is deprecated but still available
        -: 3862:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater13OnTestCaseEndERKNS_9TestSuiteE called 1 returned 100% blocks executed 100%
        2: 3863:GTEST_REVERSE_REPEATER_METHOD_(OnTestCaseEnd, TestSuite)
        1: 3863-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3863-block  1
call    2 returned 1
        2: 3863-block  2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3863-block  3
call    5 returned 1
call    6 returned 1
        -: 3864:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater14OnTestSuiteEndERKNS_9TestSuiteE called 1 returned 100% blocks executed 100%
        2: 3865:GTEST_REVERSE_REPEATER_METHOD_(OnTestSuiteEnd, TestSuite)
        1: 3865-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3865-block  1
call    2 returned 1
        2: 3865-block  2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3865-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater16OnTestProgramEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3866:GTEST_REVERSE_REPEATER_METHOD_(OnTestProgramEnd, UnitTest)
        1: 3866-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3866-block  1
call    2 returned 1
        2: 3866-block  2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3866-block  3
call    5 returned 1
call    6 returned 1
        -: 3867:
        -: 3868:#undef GTEST_REPEATER_METHOD_
        -: 3869:#undef GTEST_REVERSE_REPEATER_METHOD_
        -: 3870:
function _ZN7testing8internal17TestEventRepeater20OnTestIterationStartERKNS_8UnitTestEi called 1 returned 100% blocks executed 100%
        1: 3871:void TestEventRepeater::OnTestIterationStart(const UnitTest& unit_test,
        -: 3872:                                             int iteration) {
        1: 3873:  if (forwarding_enabled_) {
        1: 3873-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        2: 3874:    for (size_t i = 0; i < listeners_.size(); i++) {
        1: 3874-block  0
        2: 3874-block  1
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1: 3875:      listeners_[i]->OnTestIterationStart(unit_test, iteration);
        1: 3875-block  0
call    0 returned 1
call    1 returned 1
        -: 3876:    }
        -: 3877:  }
        1: 3878:}
        -: 3879:
function _ZN7testing8internal17TestEventRepeater18OnTestIterationEndERKNS_8UnitTestEi called 1 returned 100% blocks executed 100%
        1: 3880:void TestEventRepeater::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3881:                                           int iteration) {
        1: 3882:  if (forwarding_enabled_) {
        1: 3882-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        2: 3883:    for (size_t i = listeners_.size(); i > 0; i--) {
        1: 3883-block  0
call    0 returned 1
        2: 3883-block  1
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1: 3884:      listeners_[i - 1]->OnTestIterationEnd(unit_test, iteration);
        1: 3884-block  0
call    0 returned 1
call    1 returned 1
        -: 3885:    }
        -: 3886:  }
        1: 3887:}
        -: 3888:
        -: 3889:// End TestEventRepeater
        -: 3890:
        -: 3891:// This class generates an XML output file.
        -: 3892:class XmlUnitTestResultPrinter : public EmptyTestEventListener {
        -: 3893: public:
        -: 3894:  explicit XmlUnitTestResultPrinter(const char* output_file);
        -: 3895:
        -: 3896:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 3897:  void ListTestsMatchingFilter(const std::vector<TestSuite*>& test_suites);
        -: 3898:
        -: 3899:  // Prints an XML summary of all unit tests.
        -: 3900:  static void PrintXmlTestsList(std::ostream* stream,
        -: 3901:                                const std::vector<TestSuite*>& test_suites);
        -: 3902:
        -: 3903: private:
        -: 3904:  // Is c a whitespace character that is normalized to a space character
        -: 3905:  // when it appears in an XML attribute value?
function _ZN7testing8internal24XmlUnitTestResultPrinter24IsNormalizableWhitespaceEh called 0 returned 0% blocks executed 0%
    #####: 3906:  static bool IsNormalizableWhitespace(unsigned char c) {
    #####: 3907:    return c == '\t' || c == '\n' || c == '\r';
    %%%%%: 3907-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3907-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 3907-block  2
branch  4 never executed
branch  5 never executed
    %%%%%: 3907-block  3
    %%%%%: 3907-block  4
    %%%%%: 3907-block  5
        -: 3908:  }
        -: 3909:
        -: 3910:  // May c appear in a well-formed XML document?
        -: 3911:  // https://www.w3.org/TR/REC-xml/#charsets
function _ZN7testing8internal24XmlUnitTestResultPrinter19IsValidXmlCharacterEh called 0 returned 0% blocks executed 0%
    #####: 3912:  static bool IsValidXmlCharacter(unsigned char c) {
    #####: 3913:    return IsNormalizableWhitespace(c) || c >= 0x20;
    %%%%%: 3913-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3913-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 3913-block  2
    %%%%%: 3913-block  3
    %%%%%: 3913-block  4
        -: 3914:  }
        -: 3915:
        -: 3916:  // Returns an XML-escaped copy of the input string str.  If
        -: 3917:  // is_attribute is true, the text is meant to appear as an attribute
        -: 3918:  // value, and normalizable whitespace is preserved by replacing it
        -: 3919:  // with character references.
        -: 3920:  static std::string EscapeXml(const std::string& str, bool is_attribute);
        -: 3921:
        -: 3922:  // Returns the given string with all characters invalid in XML removed.
        -: 3923:  static std::string RemoveInvalidXmlCharacters(const std::string& str);
        -: 3924:
        -: 3925:  // Convenience wrapper around EscapeXml when str is an attribute value.
function _ZN7testing8internal24XmlUnitTestResultPrinter18EscapeXmlAttributeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 3926:  static std::string EscapeXmlAttribute(const std::string& str) {
    #####: 3927:    return EscapeXml(str, true);
    %%%%%: 3927-block  0
call    0 never executed
        -: 3928:  }
        -: 3929:
        -: 3930:  // Convenience wrapper around EscapeXml when str is not an attribute value.
        -: 3931:  static std::string EscapeXmlText(const char* str) {
        -: 3932:    return EscapeXml(str, false);
        -: 3933:  }
        -: 3934:
        -: 3935:  // Verifies that the given attribute belongs to the given element and
        -: 3936:  // streams the attribute as XML.
        -: 3937:  static void OutputXmlAttribute(std::ostream* stream,
        -: 3938:                                 const std::string& element_name,
        -: 3939:                                 const std::string& name,
        -: 3940:                                 const std::string& value);
        -: 3941:
        -: 3942:  // Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
        -: 3943:  static void OutputXmlCDataSection(::std::ostream* stream, const char* data);
        -: 3944:
        -: 3945:  // Streams a test suite XML stanza containing the given test result.
        -: 3946:  //
        -: 3947:  // Requires: result.Failed()
        -: 3948:  static void OutputXmlTestSuiteForTestResult(::std::ostream* stream,
        -: 3949:                                              const TestResult& result);
        -: 3950:
        -: 3951:  // Streams an XML representation of a TestResult object.
        -: 3952:  static void OutputXmlTestResult(::std::ostream* stream,
        -: 3953:                                  const TestResult& result);
        -: 3954:
        -: 3955:  // Streams an XML representation of a TestInfo object.
        -: 3956:  static void OutputXmlTestInfo(::std::ostream* stream,
        -: 3957:                                const char* test_suite_name,
        -: 3958:                                const TestInfo& test_info);
        -: 3959:
        -: 3960:  // Prints an XML representation of a TestSuite object
        -: 3961:  static void PrintXmlTestSuite(::std::ostream* stream,
        -: 3962:                                const TestSuite& test_suite);
        -: 3963:
        -: 3964:  // Prints an XML summary of unit_test to output stream out.
        -: 3965:  static void PrintXmlUnitTest(::std::ostream* stream,
        -: 3966:                               const UnitTest& unit_test);
        -: 3967:
        -: 3968:  // Produces a string representing the test properties in a result as space
        -: 3969:  // delimited XML attributes based on the property key="value" pairs.
        -: 3970:  // When the std::string is not empty, it includes a space at the beginning,
        -: 3971:  // to delimit this attribute from prior attributes.
        -: 3972:  static std::string TestPropertiesAsXmlAttributes(const TestResult& result);
        -: 3973:
        -: 3974:  // Streams an XML representation of the test properties of a TestResult
        -: 3975:  // object.
        -: 3976:  static void OutputXmlTestProperties(std::ostream* stream,
        -: 3977:                                      const TestResult& result);
        -: 3978:
        -: 3979:  // The output file.
        -: 3980:  const std::string output_file_;
        -: 3981:
        -: 3982:  XmlUnitTestResultPrinter(const XmlUnitTestResultPrinter&) = delete;
        -: 3983:  XmlUnitTestResultPrinter& operator=(const XmlUnitTestResultPrinter&) = delete;
        -: 3984:};
        -: 3985:
        -: 3986:// Creates a new XmlUnitTestResultPrinter.
function _ZN7testing8internal24XmlUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 3987:XmlUnitTestResultPrinter::XmlUnitTestResultPrinter(const char* output_file)
    #####: 3988:    : output_file_(output_file) {
    %%%%%: 3988-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3988-block  1
call    5 never executed
    $$$$$: 3988-block  2
call    6 never executed
    $$$$$: 3988-block  3
    $$$$$: 3988-block  4
call    7 never executed
    $$$$$: 3988-block  5
call    8 never executed
    #####: 3989:  if (output_file_.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3990:    GTEST_LOG_(FATAL) << "XML output file may not be null";
    %%%%%: 3990-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3990-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3990-block  2
call    7 never executed
    $$$$$: 3990-block  3
call    8 never executed
    $$$$$: 3990-block  4
        -: 3991:  }
    #####: 3992:}
    %%%%%: 3992-block  0
        -: 3993:
        -: 3994:// Called after the unit test ends.
function _ZN7testing8internal24XmlUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3995:void XmlUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3996:                                                  int /*iteration*/) {
    #####: 3997:  FILE* xmlout = OpenFileForWriting(output_file_);
    %%%%%: 3997-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3998:  std::stringstream stream;
    %%%%%: 3998-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3998-block  1
call    3 never executed
    $$$$$: 3998-block  2
call    4 never executed
    #####: 3999:  PrintXmlUnitTest(&stream, unit_test);
    %%%%%: 3999-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4000:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4000-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4000-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4000-block  2
call    7 never executed
    $$$$$: 4000-block  3
call    8 never executed
    $$$$$: 4000-block  4
    #####: 4001:  fclose(xmlout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4002:}
        -: 4003:
function _ZN7testing8internal24XmlUnitTestResultPrinter23ListTestsMatchingFilterERKSt6vectorIPNS_9TestSuiteESaIS4_EE called 0 returned 0% blocks executed 0%
    #####: 4004:void XmlUnitTestResultPrinter::ListTestsMatchingFilter(
        -: 4005:    const std::vector<TestSuite*>& test_suites) {
    #####: 4006:  FILE* xmlout = OpenFileForWriting(output_file_);
    %%%%%: 4006-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4007:  std::stringstream stream;
    %%%%%: 4007-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4007-block  1
call    3 never executed
    $$$$$: 4007-block  2
call    4 never executed
    #####: 4008:  PrintXmlTestsList(&stream, test_suites);
    %%%%%: 4008-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4009:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4009-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4009-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4009-block  2
call    7 never executed
    $$$$$: 4009-block  3
call    8 never executed
    $$$$$: 4009-block  4
    #####: 4010:  fclose(xmlout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4011:}
        -: 4012:
        -: 4013:// Returns an XML-escaped copy of the input string str.  If is_attribute
        -: 4014:// is true, the text is meant to appear as an attribute value, and
        -: 4015:// normalizable whitespace is preserved by replacing it with character
        -: 4016:// references.
        -: 4017://
        -: 4018:// Invalid XML characters in str, if any, are stripped from the output.
        -: 4019:// It is expected that most, if not all, of the text processed by this
        -: 4020:// module will consist of ordinary English text.
        -: 4021:// If this module is ever modified to produce version 1.1 XML output,
        -: 4022:// most invalid characters can be retained using character references.
function _ZN7testing8internal24XmlUnitTestResultPrinter9EscapeXmlERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####: 4023:std::string XmlUnitTestResultPrinter::EscapeXml(const std::string& str,
        -: 4024:                                                bool is_attribute) {
    #####: 4025:  Message m;
    %%%%%: 4025-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4025-block  1
call    3 never executed
    $$$$$: 4025-block  2
call    4 never executed
        -: 4026:
    #####: 4027:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 4027-block  0
    %%%%%: 4027-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4027-block  2
    #####: 4028:    const char ch = str[i];
    %%%%%: 4028-block  0
call    0 never executed
    #####: 4029:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4030:      case '<':
    #####: 4031:        m << "&lt;";
    %%%%%: 4031-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4032:        break;
    %%%%%: 4032-block  0
    #####: 4033:      case '>':
    #####: 4034:        m << "&gt;";
    %%%%%: 4034-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4035:        break;
    %%%%%: 4035-block  0
    #####: 4036:      case '&':
    #####: 4037:        m << "&amp;";
    %%%%%: 4037-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4038:        break;
    %%%%%: 4038-block  0
    #####: 4039:      case '\'':
    #####: 4040:        if (is_attribute)
    %%%%%: 4040-block  0
branch  0 never executed
branch  1 never executed
    #####: 4041:          m << "&apos;";
    %%%%%: 4041-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4042:        else
    #####: 4043:          m << '\'';
    %%%%%: 4043-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4043-block  1
    $$$$$: 4043-block  2
    #####: 4044:        break;
    %%%%%: 4044-block  0
    #####: 4045:      case '"':
    #####: 4046:        if (is_attribute)
    %%%%%: 4046-block  0
branch  0 never executed
branch  1 never executed
    #####: 4047:          m << "&quot;";
    %%%%%: 4047-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4048:        else
    #####: 4049:          m << '"';
    %%%%%: 4049-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4049-block  1
    $$$$$: 4049-block  2
    #####: 4050:        break;
    %%%%%: 4050-block  0
    #####: 4051:      default:
    #####: 4052:        if (IsValidXmlCharacter(static_cast<unsigned char>(ch))) {
    %%%%%: 4052-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4053:          if (is_attribute &&
    %%%%%: 4053-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4053-block  1
    %%%%%: 4053-block  2
    %%%%%: 4053-block  3
branch  4 never executed
branch  5 never executed
    #####: 4054:              IsNormalizableWhitespace(static_cast<unsigned char>(ch)))
    %%%%%: 4054-block  0
call    0 never executed
    #####: 4055:            m << "&#x" << String::FormatByte(static_cast<unsigned char>(ch))
    %%%%%: 4055-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4055-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4055-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4055-block  3
call    9 never executed
    $$$$$: 4055-block  4
call   10 never executed
    $$$$$: 4055-block  5
    #####: 4056:              << ";";
    %%%%%: 4056-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4057:          else
    #####: 4058:            m << ch;
    %%%%%: 4058-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4059:        }
    #####: 4060:        break;
    %%%%%: 4060-block  0
        -: 4061:    }
        -: 4062:  }
        -: 4063:
    #####: 4064:  return m.GetString();
    %%%%%: 4064-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4064-block  1
        -: 4065:}
        -: 4066:
        -: 4067:// Returns the given string with all characters invalid in XML removed.
        -: 4068:// Currently invalid characters are dropped from the string. An
        -: 4069:// alternative is to replace them with certain characters such as . or ?.
function _ZN7testing8internal24XmlUnitTestResultPrinter26RemoveInvalidXmlCharactersERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4070:std::string XmlUnitTestResultPrinter::RemoveInvalidXmlCharacters(
        -: 4071:    const std::string& str) {
    #####: 4072:  std::string output;
    %%%%%: 4072-block  0
call    0 never executed
    #####: 4073:  output.reserve(str.size());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4074:  for (std::string::const_iterator it = str.begin(); it != str.end(); ++it)
    %%%%%: 4074-block  0
call    0 never executed
    %%%%%: 4074-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4074-block  2
call    5 never executed
    #####: 4075:    if (IsValidXmlCharacter(static_cast<unsigned char>(*it)))
    %%%%%: 4075-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4076:      output.push_back(*it);
    %%%%%: 4076-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4077:
    #####: 4078:  return output;
    %%%%%: 4078-block  0
    %%%%%: 4078-block  1
        -: 4079:}
        -: 4080:
        -: 4081:// The following routines generate an XML representation of a UnitTest
        -: 4082:// object.
        -: 4083://
        -: 4084:// This is how Google Test concepts map to the DTD:
        -: 4085://
        -: 4086:// <testsuites name="AllTests">        <-- corresponds to a UnitTest object
        -: 4087://   <testsuite name="testcase-name">  <-- corresponds to a TestSuite object
        -: 4088://     <testcase name="test-name">     <-- corresponds to a TestInfo object
        -: 4089://       <failure message="...">...</failure>
        -: 4090://       <failure message="...">...</failure>
        -: 4091://       <failure message="...">...</failure>
        -: 4092://                                     <-- individual assertion failures
        -: 4093://     </testcase>
        -: 4094://   </testsuite>
        -: 4095:// </testsuites>
        -: 4096:
        -: 4097:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internal27FormatTimeInMillisAsSecondsB5cxx11El called 0 returned 0% blocks executed 0%
    #####: 4098:std::string FormatTimeInMillisAsSeconds(TimeInMillis ms) {
    #####: 4099:  ::std::stringstream ss;
    %%%%%: 4099-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4099-block  1
call    3 never executed
    $$$$$: 4099-block  2
call    4 never executed
    #####: 4100:  ss << (static_cast<double>(ms) * 1e-3);
    %%%%%: 4100-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4101:  return ss.str();
    %%%%%: 4101-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4101-block  1
        -: 4102:}
        -: 4103:
function _ZN7testing8internalL17PortableLocaltimeElP2tm called 0 returned 0% blocks executed 0%
    #####: 4104:static bool PortableLocaltime(time_t seconds, struct tm* out) {
        -: 4105:#if defined(_MSC_VER)
        -: 4106:  return localtime_s(out, &seconds) == 0;
        -: 4107:#elif defined(__MINGW32__) || defined(__MINGW64__)
        -: 4108:  // MINGW <time.h> provides neither localtime_r nor localtime_s, but uses
        -: 4109:  // Windows' localtime(), which has a thread-local tm buffer.
        -: 4110:  struct tm* tm_ptr = localtime(&seconds);  // NOLINT
        -: 4111:  if (tm_ptr == nullptr) return false;
        -: 4112:  *out = *tm_ptr;
        -: 4113:  return true;
        -: 4114:#elif defined(__STDC_LIB_EXT1__)
        -: 4115:  // Uses localtime_s when available as localtime_r is only available from
        -: 4116:  // C23 standard.
        -: 4117:  return localtime_s(&seconds, out) != nullptr;
        -: 4118:#else
    #####: 4119:  return localtime_r(&seconds, out) != nullptr;
    %%%%%: 4119-block  0
call    0 never executed
        -: 4120:#endif
        -: 4121:}
        -: 4122:
        -: 4123:// Converts the given epoch time in milliseconds to a date string in the ISO
        -: 4124:// 8601 format, without the timezone information.
function _ZN7testing8internal32FormatEpochTimeInMillisAsIso8601B5cxx11El called 0 returned 0% blocks executed 0%
    #####: 4125:std::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms) {
        -: 4126:  struct tm time_struct;
    #####: 4127:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 4127-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4128:    return "";
    %%%%%: 4128-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4128-block  1
call    4 never executed
    $$$$$: 4128-block  2
call    5 never executed
    $$$$$: 4128-block  3
        -: 4129:  // YYYY-MM-DDThh:mm:ss.sss
    #####: 4130:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    %%%%%: 4130-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4130-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4130-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 4130-block  3
call   11 never executed
    $$$$$: 4130-block  4
    $$$$$: 4130-block  5
call   12 never executed
    $$$$$: 4130-block  6
    $$$$$: 4130-block  7
call   13 never executed
    $$$$$: 4130-block  8
    $$$$$: 4130-block  9
    #####: 4131:         String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    %%%%%: 4131-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4131-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4131-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4131-block  3
call   12 never executed
    $$$$$: 4131-block  4
    $$$$$: 4131-block  5
call   13 never executed
    $$$$$: 4131-block  6
    $$$$$: 4131-block  7
call   14 never executed
    $$$$$: 4131-block  8
    #####: 4132:         String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    %%%%%: 4132-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4132-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4132-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4132-block  3
call   12 never executed
    $$$$$: 4132-block  4
    $$$$$: 4132-block  5
call   13 never executed
    $$$$$: 4132-block  6
    $$$$$: 4132-block  7
call   14 never executed
    $$$$$: 4132-block  8
    #####: 4133:         String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    %%%%%: 4133-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4133-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4133-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4133-block  3
call   12 never executed
    $$$$$: 4133-block  4
    $$$$$: 4133-block  5
call   13 never executed
    $$$$$: 4133-block  6
    $$$$$: 4133-block  7
call   14 never executed
    $$$$$: 4133-block  8
    #####: 4134:         String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 4134-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4134-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4134-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4134-block  3
call   12 never executed
    $$$$$: 4134-block  4
    $$$$$: 4134-block  5
call   13 never executed
    $$$$$: 4134-block  6
    $$$$$: 4134-block  7
call   14 never executed
    $$$$$: 4134-block  8
    #####: 4135:         String::FormatIntWidth2(time_struct.tm_sec) + "." +
    %%%%%: 4135-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4135-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4135-block  2
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$: 4135-block  3
call    9 never executed
    $$$$$: 4135-block  4
    $$$$$: 4135-block  5
call   10 never executed
    $$$$$: 4135-block  6
    #####: 4136:         String::FormatIntWidthN(static_cast<int>(ms % 1000), 3);
    %%%%%: 4136-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4136-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4136-block  2
call    7 never executed
    $$$$$: 4136-block  3
        -: 4137:}
        -: 4138:
        -: 4139:// Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
function _ZN7testing8internal24XmlUnitTestResultPrinter21OutputXmlCDataSectionEPSoPKc called 0 returned 0% blocks executed 0%
    #####: 4140:void XmlUnitTestResultPrinter::OutputXmlCDataSection(::std::ostream* stream,
        -: 4141:                                                     const char* data) {
    #####: 4142:  const char* segment = data;
    #####: 4143:  *stream << "<![CDATA[";
    %%%%%: 4143-block  0
call    0 never executed
        -: 4144:  for (;;) {
    #####: 4145:    const char* const next_segment = strstr(segment, "]]>");
    #####: 4146:    if (next_segment != nullptr) {
    %%%%%: 4146-block  0
branch  0 never executed
branch  1 never executed
        -: 4147:      stream->write(segment,
    #####: 4148:                    static_cast<std::streamsize>(next_segment - segment));
    %%%%%: 4148-block  0
call    0 never executed
    #####: 4149:      *stream << "]]>]]&gt;<![CDATA[";
call    0 never executed
    #####: 4150:      segment = next_segment + strlen("]]>");
        -: 4151:    } else {
    #####: 4152:      *stream << segment;
    %%%%%: 4152-block  0
call    0 never executed
    #####: 4153:      break;
        -: 4154:    }
    #####: 4155:  }
    %%%%%: 4155-block  0
    #####: 4156:  *stream << "]]>";
    %%%%%: 4156-block  0
call    0 never executed
    #####: 4157:}
        -: 4158:
function _ZN7testing8internal24XmlUnitTestResultPrinter18OutputXmlAttributeEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_ called 0 returned 0% blocks executed 0%
    #####: 4159:void XmlUnitTestResultPrinter::OutputXmlAttribute(
        -: 4160:    std::ostream* stream, const std::string& element_name,
        -: 4161:    const std::string& name, const std::string& value) {
        -: 4162:  const std::vector<std::string>& allowed_names =
    #####: 4163:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4163-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4163-block  1
call    3 never executed
        -: 4164:
    #####: 4165:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4165-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4165-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4165-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4165-block  3
call   13 never executed
    %%%%%: 4165-block  4
call   14 never executed
    $$$$$: 4165-block  5
    $$$$$: 4165-block  6
call   15 never executed
    $$$$$: 4165-block  7
        -: 4166:               allowed_names.end())
        -: 4167:      << "Attribute " << name << " is not allowed for element <" << element_name
    #####: 4168:      << ">.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4168-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4168-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4168-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4168-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4168-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 4169:
    #####: 4170:  *stream << " " << name << "=\"" << EscapeXmlAttribute(value) << "\"";
    %%%%%: 4170-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4170-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4170-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4170-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4170-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4170-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4170-block  6
call   18 never executed
call   19 never executed
    $$$$$: 4170-block  7
call   20 never executed
    $$$$$: 4170-block  8
    #####: 4171:}
        -: 4172:
        -: 4173:// Streams a test suite XML stanza containing the given test result.
function _ZN7testing8internal24XmlUnitTestResultPrinter31OutputXmlTestSuiteForTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4174:void XmlUnitTestResultPrinter::OutputXmlTestSuiteForTestResult(
        -: 4175:    ::std::ostream* stream, const TestResult& result) {
        -: 4176:  // Output the boilerplate for a minimal test suite with one test.
    #####: 4177:  *stream << "  <testsuite";
    %%%%%: 4177-block  0
call    0 never executed
    #####: 4178:  OutputXmlAttribute(stream, "testsuite", "name", "NonTestSuiteFailure");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4178-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4178-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4178-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4178-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4178-block  4
call   21 never executed
    $$$$$: 4178-block  5
    $$$$$: 4178-block  6
call   22 never executed
    $$$$$: 4178-block  7
    $$$$$: 4178-block  8
call   23 never executed
    $$$$$: 4178-block  9
    $$$$$: 4178-block 10
call   24 never executed
    $$$$$: 4178-block 11
    $$$$$: 4178-block 12
call   25 never executed
    $$$$$: 4178-block 13
    $$$$$: 4178-block 14
call   26 never executed
    $$$$$: 4178-block 15
call   27 never executed
    #####: 4179:  OutputXmlAttribute(stream, "testsuite", "tests", "1");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4179-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4179-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4179-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4179-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4179-block  4
call   21 never executed
    $$$$$: 4179-block  5
    $$$$$: 4179-block  6
call   22 never executed
    $$$$$: 4179-block  7
    $$$$$: 4179-block  8
call   23 never executed
    $$$$$: 4179-block  9
    $$$$$: 4179-block 10
call   24 never executed
    $$$$$: 4179-block 11
    $$$$$: 4179-block 12
call   25 never executed
    $$$$$: 4179-block 13
    $$$$$: 4179-block 14
call   26 never executed
    $$$$$: 4179-block 15
call   27 never executed
    #####: 4180:  OutputXmlAttribute(stream, "testsuite", "failures", "1");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4180-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4180-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4180-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4180-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4180-block  4
call   21 never executed
    $$$$$: 4180-block  5
    $$$$$: 4180-block  6
call   22 never executed
    $$$$$: 4180-block  7
    $$$$$: 4180-block  8
call   23 never executed
    $$$$$: 4180-block  9
    $$$$$: 4180-block 10
call   24 never executed
    $$$$$: 4180-block 11
    $$$$$: 4180-block 12
call   25 never executed
    $$$$$: 4180-block 13
    $$$$$: 4180-block 14
call   26 never executed
    $$$$$: 4180-block 15
call   27 never executed
    #####: 4181:  OutputXmlAttribute(stream, "testsuite", "disabled", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4181-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4181-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4181-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4181-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4181-block  4
call   21 never executed
    $$$$$: 4181-block  5
    $$$$$: 4181-block  6
call   22 never executed
    $$$$$: 4181-block  7
    $$$$$: 4181-block  8
call   23 never executed
    $$$$$: 4181-block  9
    $$$$$: 4181-block 10
call   24 never executed
    $$$$$: 4181-block 11
    $$$$$: 4181-block 12
call   25 never executed
    $$$$$: 4181-block 13
    $$$$$: 4181-block 14
call   26 never executed
    $$$$$: 4181-block 15
call   27 never executed
    #####: 4182:  OutputXmlAttribute(stream, "testsuite", "skipped", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4182-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4182-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4182-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4182-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4182-block  4
call   21 never executed
    $$$$$: 4182-block  5
    $$$$$: 4182-block  6
call   22 never executed
    $$$$$: 4182-block  7
    $$$$$: 4182-block  8
call   23 never executed
    $$$$$: 4182-block  9
    $$$$$: 4182-block 10
call   24 never executed
    $$$$$: 4182-block 11
    $$$$$: 4182-block 12
call   25 never executed
    $$$$$: 4182-block 13
    $$$$$: 4182-block 14
call   26 never executed
    $$$$$: 4182-block 15
call   27 never executed
    #####: 4183:  OutputXmlAttribute(stream, "testsuite", "errors", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4183-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4183-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4183-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4183-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4183-block  4
call   21 never executed
    $$$$$: 4183-block  5
    $$$$$: 4183-block  6
call   22 never executed
    $$$$$: 4183-block  7
    $$$$$: 4183-block  8
call   23 never executed
    $$$$$: 4183-block  9
    $$$$$: 4183-block 10
call   24 never executed
    $$$$$: 4183-block 11
    $$$$$: 4183-block 12
call   25 never executed
    $$$$$: 4183-block 13
    $$$$$: 4183-block 14
call   26 never executed
    $$$$$: 4183-block 15
call   27 never executed
    #####: 4184:  OutputXmlAttribute(stream, "testsuite", "time",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4184-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4184-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4184-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4184-block  3
call   15 never executed
    $$$$$: 4184-block  4
    $$$$$: 4184-block  5
call   16 never executed
    $$$$$: 4184-block  6
    $$$$$: 4184-block  7
call   17 never executed
    $$$$$: 4184-block  8
    $$$$$: 4184-block  9
call   18 never executed
    $$$$$: 4184-block 10
    #####: 4185:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 4185-block  0
call    3 never executed
    $$$$$: 4185-block  1
call    4 never executed
    #####: 4186:  OutputXmlAttribute(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4186-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4186-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4186-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4186-block  3
call   15 never executed
    $$$$$: 4186-block  4
    $$$$$: 4186-block  5
call   16 never executed
    $$$$$: 4186-block  6
    $$$$$: 4186-block  7
call   17 never executed
    $$$$$: 4186-block  8
    $$$$$: 4186-block  9
call   18 never executed
    $$$$$: 4186-block 10
        -: 4187:      stream, "testsuite", "timestamp",
    #####: 4188:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 4188-block  0
call    3 never executed
    $$$$$: 4188-block  1
call    4 never executed
    #####: 4189:  *stream << ">";
call    0 never executed
        -: 4190:
        -: 4191:  // Output the boilerplate for a minimal test case with a single test.
    #####: 4192:  *stream << "    <testcase";
call    0 never executed
    #####: 4193:  OutputXmlAttribute(stream, "testcase", "name", "");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4193-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4193-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4193-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4193-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4193-block  4
call   21 never executed
    $$$$$: 4193-block  5
    $$$$$: 4193-block  6
call   22 never executed
    $$$$$: 4193-block  7
    $$$$$: 4193-block  8
call   23 never executed
    $$$$$: 4193-block  9
    $$$$$: 4193-block 10
call   24 never executed
    $$$$$: 4193-block 11
    $$$$$: 4193-block 12
call   25 never executed
    $$$$$: 4193-block 13
    $$$$$: 4193-block 14
call   26 never executed
    $$$$$: 4193-block 15
call   27 never executed
    #####: 4194:  OutputXmlAttribute(stream, "testcase", "status", "run");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4194-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4194-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4194-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4194-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4194-block  4
call   21 never executed
    $$$$$: 4194-block  5
    $$$$$: 4194-block  6
call   22 never executed
    $$$$$: 4194-block  7
    $$$$$: 4194-block  8
call   23 never executed
    $$$$$: 4194-block  9
    $$$$$: 4194-block 10
call   24 never executed
    $$$$$: 4194-block 11
    $$$$$: 4194-block 12
call   25 never executed
    $$$$$: 4194-block 13
    $$$$$: 4194-block 14
call   26 never executed
    $$$$$: 4194-block 15
call   27 never executed
    #####: 4195:  OutputXmlAttribute(stream, "testcase", "result", "completed");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4195-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4195-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4195-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4195-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4195-block  4
call   21 never executed
    $$$$$: 4195-block  5
    $$$$$: 4195-block  6
call   22 never executed
    $$$$$: 4195-block  7
    $$$$$: 4195-block  8
call   23 never executed
    $$$$$: 4195-block  9
    $$$$$: 4195-block 10
call   24 never executed
    $$$$$: 4195-block 11
    $$$$$: 4195-block 12
call   25 never executed
    $$$$$: 4195-block 13
    $$$$$: 4195-block 14
call   26 never executed
    $$$$$: 4195-block 15
call   27 never executed
    #####: 4196:  OutputXmlAttribute(stream, "testcase", "classname", "");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4196-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4196-block  1
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4196-block  2
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4196-block  3
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$: 4196-block  4
call   21 never executed
    $$$$$: 4196-block  5
    $$$$$: 4196-block  6
call   22 never executed
    $$$$$: 4196-block  7
    $$$$$: 4196-block  8
call   23 never executed
    $$$$$: 4196-block  9
    $$$$$: 4196-block 10
call   24 never executed
    $$$$$: 4196-block 11
    $$$$$: 4196-block 12
call   25 never executed
    $$$$$: 4196-block 13
    $$$$$: 4196-block 14
call   26 never executed
    $$$$$: 4196-block 15
call   27 never executed
    #####: 4197:  OutputXmlAttribute(stream, "testcase", "time",
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4197-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4197-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4197-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4197-block  3
call   15 never executed
    $$$$$: 4197-block  4
    $$$$$: 4197-block  5
call   16 never executed
    $$$$$: 4197-block  6
    $$$$$: 4197-block  7
call   17 never executed
    $$$$$: 4197-block  8
    $$$$$: 4197-block  9
call   18 never executed
    $$$$$: 4197-block 10
    #####: 4198:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 4198-block  0
call    3 never executed
    $$$$$: 4198-block  1
call    4 never executed
    #####: 4199:  OutputXmlAttribute(
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4199-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4199-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4199-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4199-block  3
call   15 never executed
    $$$$$: 4199-block  4
    $$$$$: 4199-block  5
call   16 never executed
    $$$$$: 4199-block  6
    $$$$$: 4199-block  7
call   17 never executed
    $$$$$: 4199-block  8
    $$$$$: 4199-block  9
call   18 never executed
    $$$$$: 4199-block 10
        -: 4200:      stream, "testcase", "timestamp",
    #####: 4201:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 4201-block  0
call    3 never executed
        -: 4202:
        -: 4203:  // Output the actual test result.
    #####: 4204:  OutputXmlTestResult(stream, result);
call    0 never executed
        -: 4205:
        -: 4206:  // Complete the test suite.
    #####: 4207:  *stream << "  </testsuite>\n";
call    0 never executed
    #####: 4208:}
        -: 4209:
        -: 4210:// Prints an XML representation of a TestInfo object.
function _ZN7testing8internal24XmlUnitTestResultPrinter17OutputXmlTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 4211:void XmlUnitTestResultPrinter::OutputXmlTestInfo(::std::ostream* stream,
        -: 4212:                                                 const char* test_suite_name,
        -: 4213:                                                 const TestInfo& test_info) {
    #####: 4214:  const TestResult& result = *test_info.result();
    %%%%%: 4214-block  0
call    0 never executed
    #####: 4215:  const std::string kTestsuite = "testcase";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4215-block  0
    $$$$$: 4215-block  1
call    4 never executed
        -: 4216:
    #####: 4217:  if (test_info.is_in_another_shard()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4218:    return;
    %%%%%: 4218-block  0
        -: 4219:  }
        -: 4220:
    #####: 4221:  *stream << "    <testcase";
    %%%%%: 4221-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4222:  OutputXmlAttribute(stream, kTestsuite, "name", test_info.name());
    %%%%%: 4222-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4222-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4222-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4222-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4222-block  4
call   16 never executed
    $$$$$: 4222-block  5
    $$$$$: 4222-block  6
call   17 never executed
    $$$$$: 4222-block  7
    $$$$$: 4222-block  8
call   18 never executed
    $$$$$: 4222-block  9
    $$$$$: 4222-block 10
call   19 never executed
    $$$$$: 4222-block 11
        -: 4223:
    #####: 4224:  if (test_info.value_param() != nullptr) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4225:    OutputXmlAttribute(stream, kTestsuite, "value_param",
    %%%%%: 4225-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4225-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4225-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4225-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4225-block  4
call   16 never executed
    $$$$$: 4225-block  5
    $$$$$: 4225-block  6
call   17 never executed
    $$$$$: 4225-block  7
    $$$$$: 4225-block  8
call   18 never executed
    $$$$$: 4225-block  9
    $$$$$: 4225-block 10
call   19 never executed
    $$$$$: 4225-block 11
        -: 4226:                       test_info.value_param());
        -: 4227:  }
    #####: 4228:  if (test_info.type_param() != nullptr) {
    %%%%%: 4228-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4229:    OutputXmlAttribute(stream, kTestsuite, "type_param",
    %%%%%: 4229-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4229-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4229-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4229-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4229-block  4
call   16 never executed
    $$$$$: 4229-block  5
    $$$$$: 4229-block  6
call   17 never executed
    $$$$$: 4229-block  7
    $$$$$: 4229-block  8
call   18 never executed
    $$$$$: 4229-block  9
    $$$$$: 4229-block 10
call   19 never executed
    $$$$$: 4229-block 11
        -: 4230:                       test_info.type_param());
        -: 4231:  }
        -: 4232:
    #####: 4233:  OutputXmlAttribute(stream, kTestsuite, "file", test_info.file());
    %%%%%: 4233-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4233-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4233-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4233-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4233-block  4
call   16 never executed
    $$$$$: 4233-block  5
    $$$$$: 4233-block  6
call   17 never executed
    $$$$$: 4233-block  7
    $$$$$: 4233-block  8
call   18 never executed
    $$$$$: 4233-block  9
    $$$$$: 4233-block 10
call   19 never executed
    $$$$$: 4233-block 11
    #####: 4234:  OutputXmlAttribute(stream, kTestsuite, "line",
    %%%%%: 4234-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4234-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4234-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4234-block  3
call    9 never executed
    $$$$$: 4234-block  4
    $$$$$: 4234-block  5
call   10 never executed
    $$$$$: 4234-block  6
    #####: 4235:                     StreamableToString(test_info.line()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4235-block  0
call    5 never executed
    $$$$$: 4235-block  1
    $$$$$: 4235-block  2
    #####: 4236:  if (GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4237:    *stream << " />\n";
    %%%%%: 4237-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4238:    return;
    %%%%%: 4238-block  0
        -: 4239:  }
        -: 4240:
    #####: 4241:  OutputXmlAttribute(stream, kTestsuite, "status",
    %%%%%: 4241-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4241-block  1
    %%%%%: 4241-block  2
    %%%%%: 4241-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4241-block  4
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4241-block  5
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4241-block  6
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4241-block  7
call   17 never executed
    $$$$$: 4241-block  8
    $$$$$: 4241-block  9
call   18 never executed
    $$$$$: 4241-block 10
    $$$$$: 4241-block 11
call   19 never executed
    $$$$$: 4241-block 12
    $$$$$: 4241-block 13
call   20 never executed
    $$$$$: 4241-block 14
    #####: 4242:                     test_info.should_run() ? "run" : "notrun");
call    0 never executed
    #####: 4243:  OutputXmlAttribute(stream, kTestsuite, "result",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4243-block  0
    %%%%%: 4243-block  1
    %%%%%: 4243-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4243-block  3
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4243-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4243-block  5
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4243-block  6
call   17 never executed
    $$$$$: 4243-block  7
    $$$$$: 4243-block  8
call   18 never executed
    $$$$$: 4243-block  9
    $$$$$: 4243-block 10
call   19 never executed
    $$$$$: 4243-block 11
    $$$$$: 4243-block 12
call   20 never executed
    $$$$$: 4243-block 13
    #####: 4244:                     test_info.should_run()
call    0 never executed
    #####: 4245:                         ? (result.Skipped() ? "skipped" : "completed")
    %%%%%: 4245-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4245-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 4245-block  2
    %%%%%: 4245-block  3
        -: 4246:                         : "suppressed");
    #####: 4247:  OutputXmlAttribute(stream, kTestsuite, "time",
    %%%%%: 4247-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4247-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4247-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4247-block  3
call    9 never executed
    $$$$$: 4247-block  4
    $$$$$: 4247-block  5
call   10 never executed
    $$$$$: 4247-block  6
    #####: 4248:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4248-block  0
call    5 never executed
    $$$$$: 4248-block  1
    #####: 4249:  OutputXmlAttribute(
    %%%%%: 4249-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4249-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4249-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4249-block  3
call    9 never executed
    $$$$$: 4249-block  4
    $$$$$: 4249-block  5
call   10 never executed
    $$$$$: 4249-block  6
        -: 4250:      stream, kTestsuite, "timestamp",
    #####: 4251:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4251-block  0
call    5 never executed
    $$$$$: 4251-block  1
    #####: 4252:  OutputXmlAttribute(stream, kTestsuite, "classname", test_suite_name);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4252-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4252-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4252-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4252-block  3
call   15 never executed
    $$$$$: 4252-block  4
    $$$$$: 4252-block  5
call   16 never executed
    $$$$$: 4252-block  6
    $$$$$: 4252-block  7
call   17 never executed
    $$$$$: 4252-block  8
    $$$$$: 4252-block  9
call   18 never executed
    $$$$$: 4252-block 10
        -: 4253:
    #####: 4254:  OutputXmlTestResult(stream, result);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4255:}
        -: 4256:
function _ZN7testing8internal24XmlUnitTestResultPrinter19OutputXmlTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4257:void XmlUnitTestResultPrinter::OutputXmlTestResult(::std::ostream* stream,
        -: 4258:                                                   const TestResult& result) {
    #####: 4259:  int failures = 0;
    #####: 4260:  int skips = 0;
    #####: 4261:  for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4261-block  0
    %%%%%: 4261-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4261-block  2
    #####: 4262:    const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4262-block  0
call    0 never executed
    #####: 4263:    if (part.failed()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4264:      if (++failures == 1 && skips == 0) {
    %%%%%: 4264-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4264-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4264-block  2
    %%%%%: 4264-block  3
    %%%%%: 4264-block  4
branch  4 never executed
branch  5 never executed
    #####: 4265:        *stream << ">\n";
    %%%%%: 4265-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4266:      }
        -: 4267:      const std::string location =
        -: 4268:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4269:                                                          part.line_number());
    %%%%%: 4269-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    $$$$$: 4269-block  1
call    6 never executed
    #####: 4270:      const std::string summary = location + "\n" + part.summary();
    %%%%%: 4270-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4270-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4270-block  2
    $$$$$: 4270-block  3
call    8 never executed
    #####: 4271:      *stream << "      <failure message=\"" << EscapeXmlAttribute(summary)
    %%%%%: 4271-block  0
call    0 never executed
    $$$$$: 4271-block  1
call    1 never executed
    $$$$$: 4271-block  2
    #####: 4272:              << "\" type=\"\">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4272-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4272-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4272-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 4273:      const std::string detail = location + "\n" + part.message();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4273-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4273-block  1
call    7 never executed
    $$$$$: 4273-block  2
    $$$$$: 4273-block  3
call    8 never executed
    #####: 4274:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4274-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4274-block  1
call    7 never executed
    $$$$$: 4274-block  2
call    8 never executed
    $$$$$: 4274-block  3
    #####: 4275:      *stream << "</failure>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4276:    } else if (part.skipped()) {
    %%%%%: 4276-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4277:      if (++skips == 1 && failures == 0) {
    %%%%%: 4277-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4277-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4277-block  2
    %%%%%: 4277-block  3
    %%%%%: 4277-block  4
branch  4 never executed
branch  5 never executed
    #####: 4278:        *stream << ">\n";
    %%%%%: 4278-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4279:      }
        -: 4280:      const std::string location =
        -: 4281:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4282:                                                          part.line_number());
    %%%%%: 4282-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    $$$$$: 4282-block  1
call    6 never executed
    #####: 4283:      const std::string summary = location + "\n" + part.summary();
    %%%%%: 4283-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4283-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4283-block  2
    $$$$$: 4283-block  3
call    8 never executed
        -: 4284:      *stream << "      <skipped message=\""
    #####: 4285:              << EscapeXmlAttribute(summary.c_str()) << "\">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4285-block  0
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4285-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4285-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4285-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4285-block  4
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4285-block  5
call   20 never executed
    $$$$$: 4285-block  6
    $$$$$: 4285-block  7
call   21 never executed
    $$$$$: 4285-block  8
    $$$$$: 4285-block  9
call   22 never executed
    $$$$$: 4285-block 10
    #####: 4286:      const std::string detail = location + "\n" + part.message();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4286-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4286-block  1
call    7 never executed
    $$$$$: 4286-block  2
    $$$$$: 4286-block  3
call    8 never executed
    #####: 4287:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4287-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4287-block  1
call    7 never executed
    $$$$$: 4287-block  2
call    8 never executed
    $$$$$: 4287-block  3
    #####: 4288:      *stream << "</skipped>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4289:    }
        -: 4290:  }
        -: 4291:
    #####: 4292:  if (failures == 0 && skips == 0 && result.test_property_count() == 0) {
    %%%%%: 4292-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4292-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4292-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4292-block  3
    %%%%%: 4292-block  4
    %%%%%: 4292-block  5
branch  7 never executed
branch  8 never executed
    #####: 4293:    *stream << " />\n";
    %%%%%: 4293-block  0
call    0 never executed
        -: 4294:  } else {
    #####: 4295:    if (failures == 0 && skips == 0) {
    %%%%%: 4295-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4295-block  1
branch  2 never executed
branch  3 never executed
    #####: 4296:      *stream << ">\n";
    %%%%%: 4296-block  0
call    0 never executed
        -: 4297:    }
    #####: 4298:    OutputXmlTestProperties(stream, result);
    %%%%%: 4298-block  0
call    0 never executed
    #####: 4299:    *stream << "    </testcase>\n";
call    0 never executed
        -: 4300:  }
    #####: 4301:}
    %%%%%: 4301-block  0
        -: 4302:
        -: 4303:// Prints an XML representation of a TestSuite object
function _ZN7testing8internal24XmlUnitTestResultPrinter17PrintXmlTestSuiteEPSoRKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 4304:void XmlUnitTestResultPrinter::PrintXmlTestSuite(std::ostream* stream,
        -: 4305:                                                 const TestSuite& test_suite) {
    #####: 4306:  const std::string kTestsuite = "testsuite";
    %%%%%: 4306-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4306-block  1
call    4 never executed
    $$$$$: 4306-block  2
    $$$$$: 4306-block  3
call    5 never executed
    #####: 4307:  *stream << "  <" << kTestsuite;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4307-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4308:  OutputXmlAttribute(stream, kTestsuite, "name", test_suite.name());
    %%%%%: 4308-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4308-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4308-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4308-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4308-block  4
call   16 never executed
    $$$$$: 4308-block  5
    $$$$$: 4308-block  6
call   17 never executed
    $$$$$: 4308-block  7
    $$$$$: 4308-block  8
call   18 never executed
    $$$$$: 4308-block  9
    $$$$$: 4308-block 10
call   19 never executed
    $$$$$: 4308-block 11
    #####: 4309:  OutputXmlAttribute(stream, kTestsuite, "tests",
    %%%%%: 4309-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4309-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4309-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4309-block  3
call    9 never executed
    $$$$$: 4309-block  4
    $$$$$: 4309-block  5
call   10 never executed
    $$$$$: 4309-block  6
    #####: 4310:                     StreamableToString(test_suite.reportable_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4310-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4310-block  1
call    7 never executed
    $$$$$: 4310-block  2
    $$$$$: 4310-block  3
    #####: 4311:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4312:    OutputXmlAttribute(stream, kTestsuite, "failures",
    %%%%%: 4312-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4312-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4312-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4312-block  3
call    9 never executed
    $$$$$: 4312-block  4
    $$$$$: 4312-block  5
call   10 never executed
    $$$$$: 4312-block  6
    #####: 4313:                       StreamableToString(test_suite.failed_test_count()));
    %%%%%: 4313-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4313-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4313-block  2
call    7 never executed
    $$$$$: 4313-block  3
    $$$$$: 4313-block  4
    #####: 4314:    OutputXmlAttribute(
    %%%%%: 4314-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4314-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4314-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4314-block  3
call    9 never executed
    $$$$$: 4314-block  4
    $$$$$: 4314-block  5
call   10 never executed
    $$$$$: 4314-block  6
        -: 4315:        stream, kTestsuite, "disabled",
    #####: 4316:        StreamableToString(test_suite.reportable_disabled_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4316-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4316-block  1
call    7 never executed
    $$$$$: 4316-block  2
    $$$$$: 4316-block  3
    #####: 4317:    OutputXmlAttribute(stream, kTestsuite, "skipped",
    %%%%%: 4317-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4317-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4317-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4317-block  3
call    9 never executed
    $$$$$: 4317-block  4
    $$$$$: 4317-block  5
call   10 never executed
    $$$$$: 4317-block  6
    #####: 4318:                       StreamableToString(test_suite.skipped_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4318-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4318-block  1
call    7 never executed
    $$$$$: 4318-block  2
    $$$$$: 4318-block  3
        -: 4319:
    #####: 4320:    OutputXmlAttribute(stream, kTestsuite, "errors", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4320-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4320-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4320-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4320-block  3
call   15 never executed
    $$$$$: 4320-block  4
    $$$$$: 4320-block  5
call   16 never executed
    $$$$$: 4320-block  6
    $$$$$: 4320-block  7
call   17 never executed
    $$$$$: 4320-block  8
    $$$$$: 4320-block  9
call   18 never executed
    $$$$$: 4320-block 10
        -: 4321:
    #####: 4322:    OutputXmlAttribute(stream, kTestsuite, "time",
    %%%%%: 4322-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4322-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4322-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4322-block  3
call    9 never executed
    $$$$$: 4322-block  4
    $$$$$: 4322-block  5
call   10 never executed
    $$$$$: 4322-block  6
    #####: 4323:                       FormatTimeInMillisAsSeconds(test_suite.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4323-block  0
call    5 never executed
    $$$$$: 4323-block  1
    #####: 4324:    OutputXmlAttribute(
    %%%%%: 4324-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4324-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4324-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4324-block  3
call    9 never executed
    $$$$$: 4324-block  4
    $$$$$: 4324-block  5
call   10 never executed
    $$$$$: 4324-block  6
        -: 4325:        stream, kTestsuite, "timestamp",
    #####: 4326:        FormatEpochTimeInMillisAsIso8601(test_suite.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4326-block  0
call    5 never executed
    $$$$$: 4326-block  1
    #####: 4327:    *stream << TestPropertiesAsXmlAttributes(test_suite.ad_hoc_test_result());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4327-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4327-block  1
call    7 never executed
    $$$$$: 4327-block  2
call    8 never executed
    $$$$$: 4327-block  3
        -: 4328:  }
    #####: 4329:  *stream << ">\n";
    %%%%%: 4329-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4330:  for (int i = 0; i < test_suite.total_test_count(); ++i) {
    %%%%%: 4330-block  0
    %%%%%: 4330-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4330-block  2
    #####: 4331:    if (test_suite.GetTestInfo(i)->is_reportable())
    %%%%%: 4331-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4331-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4332:      OutputXmlTestInfo(stream, test_suite.name(), *test_suite.GetTestInfo(i));
    %%%%%: 4332-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4332-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4333:  }
    #####: 4334:  *stream << "  </" << kTestsuite << ">\n";
    %%%%%: 4334-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4334-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4334-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4335:}
        -: 4336:
        -: 4337:// Prints an XML summary of unit_test to output stream out.
function _ZN7testing8internal24XmlUnitTestResultPrinter16PrintXmlUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 4338:void XmlUnitTestResultPrinter::PrintXmlUnitTest(std::ostream* stream,
        -: 4339:                                                const UnitTest& unit_test) {
    #####: 4340:  const std::string kTestsuites = "testsuites";
    %%%%%: 4340-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4340-block  1
call    4 never executed
    $$$$$: 4340-block  2
    $$$$$: 4340-block  3
call    5 never executed
        -: 4341:
    #####: 4342:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4343:  *stream << "<" << kTestsuites;
    %%%%%: 4343-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4343-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4344:
    #####: 4345:  OutputXmlAttribute(stream, kTestsuites, "tests",
    %%%%%: 4345-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4345-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4345-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4345-block  3
call    9 never executed
    $$$$$: 4345-block  4
    $$$$$: 4345-block  5
call   10 never executed
    $$$$$: 4345-block  6
    #####: 4346:                     StreamableToString(unit_test.reportable_test_count()));
    %%%%%: 4346-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4346-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4346-block  2
call    7 never executed
    $$$$$: 4346-block  3
    $$$$$: 4346-block  4
    #####: 4347:  OutputXmlAttribute(stream, kTestsuites, "failures",
    %%%%%: 4347-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4347-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4347-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4347-block  3
call    9 never executed
    $$$$$: 4347-block  4
    $$$$$: 4347-block  5
call   10 never executed
    $$$$$: 4347-block  6
    #####: 4348:                     StreamableToString(unit_test.failed_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4348-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4348-block  1
call    7 never executed
    $$$$$: 4348-block  2
    $$$$$: 4348-block  3
    #####: 4349:  OutputXmlAttribute(
    %%%%%: 4349-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4349-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4349-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4349-block  3
call    9 never executed
    $$$$$: 4349-block  4
    $$$$$: 4349-block  5
call   10 never executed
    $$$$$: 4349-block  6
        -: 4350:      stream, kTestsuites, "disabled",
    #####: 4351:      StreamableToString(unit_test.reportable_disabled_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4351-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4351-block  1
call    7 never executed
    $$$$$: 4351-block  2
    $$$$$: 4351-block  3
    #####: 4352:  OutputXmlAttribute(stream, kTestsuites, "errors", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4352-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4352-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4352-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4352-block  3
call   15 never executed
    $$$$$: 4352-block  4
    $$$$$: 4352-block  5
call   16 never executed
    $$$$$: 4352-block  6
    $$$$$: 4352-block  7
call   17 never executed
    $$$$$: 4352-block  8
    $$$$$: 4352-block  9
call   18 never executed
    $$$$$: 4352-block 10
    #####: 4353:  OutputXmlAttribute(stream, kTestsuites, "time",
    %%%%%: 4353-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4353-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4353-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4353-block  3
call    9 never executed
    $$$$$: 4353-block  4
    $$$$$: 4353-block  5
call   10 never executed
    $$$$$: 4353-block  6
    #####: 4354:                     FormatTimeInMillisAsSeconds(unit_test.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4354-block  0
call    5 never executed
    $$$$$: 4354-block  1
    #####: 4355:  OutputXmlAttribute(
    %%%%%: 4355-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4355-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4355-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4355-block  3
call    9 never executed
    $$$$$: 4355-block  4
    $$$$$: 4355-block  5
call   10 never executed
    $$$$$: 4355-block  6
        -: 4356:      stream, kTestsuites, "timestamp",
    #####: 4357:      FormatEpochTimeInMillisAsIso8601(unit_test.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4357-block  0
call    5 never executed
    $$$$$: 4357-block  1
        -: 4358:
    #####: 4359:  if (GTEST_FLAG_GET(shuffle)) {
branch  0 never executed
branch  1 never executed
    #####: 4360:    OutputXmlAttribute(stream, kTestsuites, "random_seed",
    %%%%%: 4360-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4360-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4360-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4360-block  3
call    9 never executed
    $$$$$: 4360-block  4
    $$$$$: 4360-block  5
call   10 never executed
    $$$$$: 4360-block  6
    #####: 4361:                       StreamableToString(unit_test.random_seed()));
    %%%%%: 4361-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4361-block  1
call    5 never executed
    $$$$$: 4361-block  2
    $$$$$: 4361-block  3
        -: 4362:  }
    #####: 4363:  *stream << TestPropertiesAsXmlAttributes(unit_test.ad_hoc_test_result());
    %%%%%: 4363-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4363-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4363-block  2
call    7 never executed
    $$$$$: 4363-block  3
call    8 never executed
    $$$$$: 4363-block  4
        -: 4364:
    #####: 4365:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4365-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4365-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4365-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4365-block  3
call   15 never executed
    $$$$$: 4365-block  4
    $$$$$: 4365-block  5
call   16 never executed
    $$$$$: 4365-block  6
    $$$$$: 4365-block  7
call   17 never executed
    $$$$$: 4365-block  8
    $$$$$: 4365-block  9
call   18 never executed
    $$$$$: 4365-block 10
    #####: 4366:  *stream << ">\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4367:
    #####: 4368:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 4368-block  0
    %%%%%: 4368-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4368-block  2
    #####: 4369:    if (unit_test.GetTestSuite(i)->reportable_test_count() > 0)
    %%%%%: 4369-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4369-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4369-block  2
branch  6 never executed
branch  7 never executed
    #####: 4370:      PrintXmlTestSuite(stream, *unit_test.GetTestSuite(i));
    %%%%%: 4370-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4370-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4371:  }
        -: 4372:
        -: 4373:  // If there was a test failure outside of one of the test suites (like in a
        -: 4374:  // test environment) include that in the output.
    #####: 4375:  if (unit_test.ad_hoc_test_result().Failed()) {
    %%%%%: 4375-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4375-block  1
branch  4 never executed
branch  5 never executed
    #####: 4376:    OutputXmlTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());
    %%%%%: 4376-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4377:  }
        -: 4378:
    #####: 4379:  *stream << "</" << kTestsuites << ">\n";
    %%%%%: 4379-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4379-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4379-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4380:}
        -: 4381:
function _ZN7testing8internal24XmlUnitTestResultPrinter17PrintXmlTestsListEPSoRKSt6vectorIPNS_9TestSuiteESaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 4382:void XmlUnitTestResultPrinter::PrintXmlTestsList(
        -: 4383:    std::ostream* stream, const std::vector<TestSuite*>& test_suites) {
    #####: 4384:  const std::string kTestsuites = "testsuites";
    %%%%%: 4384-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4384-block  1
call    4 never executed
    $$$$$: 4384-block  2
    $$$$$: 4384-block  3
call    5 never executed
        -: 4385:
    #####: 4386:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4387:  *stream << "<" << kTestsuites;
    %%%%%: 4387-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4387-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4388:
    #####: 4389:  int total_tests = 0;
    #####: 4390:  for (auto test_suite : test_suites) {
    %%%%%: 4390-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4390-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4390-block  2
call    5 never executed
    #####: 4391:    total_tests += test_suite->total_test_count();
call    0 never executed
call    1 never executed
        -: 4392:  }
    #####: 4393:  OutputXmlAttribute(stream, kTestsuites, "tests",
    %%%%%: 4393-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4393-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4393-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4393-block  3
call    9 never executed
    $$$$$: 4393-block  4
    $$$$$: 4393-block  5
call   10 never executed
    $$$$$: 4393-block  6
    #####: 4394:                     StreamableToString(total_tests));
    %%%%%: 4394-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 4394-block  1
call    4 never executed
    $$$$$: 4394-block  2
    #####: 4395:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4395-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4395-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4395-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4395-block  3
call   15 never executed
    $$$$$: 4395-block  4
    $$$$$: 4395-block  5
call   16 never executed
    $$$$$: 4395-block  6
    $$$$$: 4395-block  7
call   17 never executed
    $$$$$: 4395-block  8
    $$$$$: 4395-block  9
call   18 never executed
    $$$$$: 4395-block 10
    #####: 4396:  *stream << ">\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4397:
    #####: 4398:  for (auto test_suite : test_suites) {
    %%%%%: 4398-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4398-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4398-block  2
call    5 never executed
    %%%%%: 4398-block  3
call    6 never executed
    #####: 4399:    PrintXmlTestSuite(stream, *test_suite);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4400:  }
    #####: 4401:  *stream << "</" << kTestsuites << ">\n";
    %%%%%: 4401-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4401-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4401-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4402:}
        -: 4403:
        -: 4404:// Produces a string representing the test properties in a result as space
        -: 4405:// delimited XML attributes based on the property key="value" pairs.
function _ZN7testing8internal24XmlUnitTestResultPrinter29TestPropertiesAsXmlAttributesB5cxx11ERKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4406:std::string XmlUnitTestResultPrinter::TestPropertiesAsXmlAttributes(
        -: 4407:    const TestResult& result) {
    #####: 4408:  Message attributes;
    %%%%%: 4408-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4408-block  1
call    3 never executed
    $$$$$: 4408-block  2
call    4 never executed
    #####: 4409:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4409-block  0
    %%%%%: 4409-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4410:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4410-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4411:    attributes << " " << property.key() << "="
    %%%%%: 4411-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4411-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4411-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 4411-block  3
    #####: 4412:               << "\"" << EscapeXmlAttribute(property.value()) << "\"";
    %%%%%: 4412-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4412-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4412-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4412-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4412-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4412-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4412-block  6
call   20 never executed
    $$$$$: 4412-block  7
    $$$$$: 4412-block  8
call   21 never executed
    $$$$$: 4412-block  9
    $$$$$: 4412-block 10
call   22 never executed
    $$$$$: 4412-block 11
        -: 4413:  }
    #####: 4414:  return attributes.GetString();
    %%%%%: 4414-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4414-block  1
        -: 4415:}
        -: 4416:
function _ZN7testing8internal24XmlUnitTestResultPrinter23OutputXmlTestPropertiesEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4417:void XmlUnitTestResultPrinter::OutputXmlTestProperties(
        -: 4418:    std::ostream* stream, const TestResult& result) {
    #####: 4419:  const std::string kProperties = "properties";
    %%%%%: 4419-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4419-block  1
    $$$$$: 4419-block  2
call    4 never executed
    #####: 4420:  const std::string kProperty = "property";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4420-block  0
    $$$$$: 4420-block  1
call    4 never executed
        -: 4421:
    #####: 4422:  if (result.test_property_count() <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4423:    return;
    %%%%%: 4423-block  0
        -: 4424:  }
        -: 4425:
    #####: 4426:  *stream << "      <" << kProperties << ">\n";
    %%%%%: 4426-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4426-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4426-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4427:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4427-block  0
    %%%%%: 4427-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4427-block  2
    #####: 4428:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4428-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4429:    *stream << "        <" << kProperty;
    %%%%%: 4429-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4429-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4430:    *stream << " name=\"" << EscapeXmlAttribute(property.key()) << "\"";
    %%%%%: 4430-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4430-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4430-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4430-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4430-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4430-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4430-block  6
call   20 never executed
    $$$$$: 4430-block  7
    $$$$$: 4430-block  8
call   21 never executed
    $$$$$: 4430-block  9
    $$$$$: 4430-block 10
call   22 never executed
    $$$$$: 4430-block 11
    #####: 4431:    *stream << " value=\"" << EscapeXmlAttribute(property.value()) << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4431-block  0
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4431-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4431-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4431-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4431-block  4
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4431-block  5
call   20 never executed
    $$$$$: 4431-block  6
    $$$$$: 4431-block  7
call   21 never executed
    $$$$$: 4431-block  8
    $$$$$: 4431-block  9
call   22 never executed
    $$$$$: 4431-block 10
    #####: 4432:    *stream << "/>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4433:  }
    #####: 4434:  *stream << "      </" << kProperties << ">\n";
    %%%%%: 4434-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4434-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4434-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 4435:}
        -: 4436:
        -: 4437:// End XmlUnitTestResultPrinter
        -: 4438:
        -: 4439:// This class generates an JSON output file.
        -: 4440:class JsonUnitTestResultPrinter : public EmptyTestEventListener {
        -: 4441: public:
        -: 4442:  explicit JsonUnitTestResultPrinter(const char* output_file);
        -: 4443:
        -: 4444:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 4445:
        -: 4446:  // Prints an JSON summary of all unit tests.
        -: 4447:  static void PrintJsonTestList(::std::ostream* stream,
        -: 4448:                                const std::vector<TestSuite*>& test_suites);
        -: 4449:
        -: 4450: private:
        -: 4451:  // Returns an JSON-escaped copy of the input string str.
        -: 4452:  static std::string EscapeJson(const std::string& str);
        -: 4453:
        -: 4454:  //// Verifies that the given attribute belongs to the given element and
        -: 4455:  //// streams the attribute as JSON.
        -: 4456:  static void OutputJsonKey(std::ostream* stream,
        -: 4457:                            const std::string& element_name,
        -: 4458:                            const std::string& name, const std::string& value,
        -: 4459:                            const std::string& indent, bool comma = true);
        -: 4460:  static void OutputJsonKey(std::ostream* stream,
        -: 4461:                            const std::string& element_name,
        -: 4462:                            const std::string& name, int value,
        -: 4463:                            const std::string& indent, bool comma = true);
        -: 4464:
        -: 4465:  // Streams a test suite JSON stanza containing the given test result.
        -: 4466:  //
        -: 4467:  // Requires: result.Failed()
        -: 4468:  static void OutputJsonTestSuiteForTestResult(::std::ostream* stream,
        -: 4469:                                               const TestResult& result);
        -: 4470:
        -: 4471:  // Streams a JSON representation of a TestResult object.
        -: 4472:  static void OutputJsonTestResult(::std::ostream* stream,
        -: 4473:                                   const TestResult& result);
        -: 4474:
        -: 4475:  // Streams a JSON representation of a TestInfo object.
        -: 4476:  static void OutputJsonTestInfo(::std::ostream* stream,
        -: 4477:                                 const char* test_suite_name,
        -: 4478:                                 const TestInfo& test_info);
        -: 4479:
        -: 4480:  // Prints a JSON representation of a TestSuite object
        -: 4481:  static void PrintJsonTestSuite(::std::ostream* stream,
        -: 4482:                                 const TestSuite& test_suite);
        -: 4483:
        -: 4484:  // Prints a JSON summary of unit_test to output stream out.
        -: 4485:  static void PrintJsonUnitTest(::std::ostream* stream,
        -: 4486:                                const UnitTest& unit_test);
        -: 4487:
        -: 4488:  // Produces a string representing the test properties in a result as
        -: 4489:  // a JSON dictionary.
        -: 4490:  static std::string TestPropertiesAsJson(const TestResult& result,
        -: 4491:                                          const std::string& indent);
        -: 4492:
        -: 4493:  // The output file.
        -: 4494:  const std::string output_file_;
        -: 4495:
        -: 4496:  JsonUnitTestResultPrinter(const JsonUnitTestResultPrinter&) = delete;
        -: 4497:  JsonUnitTestResultPrinter& operator=(const JsonUnitTestResultPrinter&) =
        -: 4498:      delete;
        -: 4499:};
        -: 4500:
        -: 4501:// Creates a new JsonUnitTestResultPrinter.
function _ZN7testing8internal25JsonUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 4502:JsonUnitTestResultPrinter::JsonUnitTestResultPrinter(const char* output_file)
    #####: 4503:    : output_file_(output_file) {
    %%%%%: 4503-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4503-block  1
call    5 never executed
    $$$$$: 4503-block  2
call    6 never executed
    $$$$$: 4503-block  3
    $$$$$: 4503-block  4
call    7 never executed
    $$$$$: 4503-block  5
call    8 never executed
    #####: 4504:  if (output_file_.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4505:    GTEST_LOG_(FATAL) << "JSON output file may not be null";
    %%%%%: 4505-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4505-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4505-block  2
call    7 never executed
    $$$$$: 4505-block  3
call    8 never executed
    $$$$$: 4505-block  4
        -: 4506:  }
    #####: 4507:}
    %%%%%: 4507-block  0
        -: 4508:
function _ZN7testing8internal25JsonUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 4509:void JsonUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 4510:                                                   int /*iteration*/) {
    #####: 4511:  FILE* jsonout = OpenFileForWriting(output_file_);
    %%%%%: 4511-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4512:  std::stringstream stream;
    %%%%%: 4512-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4512-block  1
call    3 never executed
    $$$$$: 4512-block  2
call    4 never executed
    #####: 4513:  PrintJsonUnitTest(&stream, unit_test);
    %%%%%: 4513-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4514:  fprintf(jsonout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4514-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4514-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4514-block  2
call    7 never executed
    $$$$$: 4514-block  3
call    8 never executed
    $$$$$: 4514-block  4
    #####: 4515:  fclose(jsonout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4516:}
        -: 4517:
        -: 4518:// Returns an JSON-escaped copy of the input string str.
function _ZN7testing8internal25JsonUnitTestResultPrinter10EscapeJsonERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4519:std::string JsonUnitTestResultPrinter::EscapeJson(const std::string& str) {
    #####: 4520:  Message m;
    %%%%%: 4520-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4520-block  1
call    3 never executed
    $$$$$: 4520-block  2
call    4 never executed
        -: 4521:
    #####: 4522:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 4522-block  0
    %%%%%: 4522-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4522-block  2
    #####: 4523:    const char ch = str[i];
    %%%%%: 4523-block  0
call    0 never executed
    #####: 4524:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4525:      case '\\':
        -: 4526:      case '"':
        -: 4527:      case '/':
    #####: 4528:        m << '\\' << ch;
    %%%%%: 4528-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4528-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4528-block  2
    #####: 4529:        break;
    %%%%%: 4529-block  0
    #####: 4530:      case '\b':
    #####: 4531:        m << "\\b";
    %%%%%: 4531-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4532:        break;
    %%%%%: 4532-block  0
    #####: 4533:      case '\t':
    #####: 4534:        m << "\\t";
    %%%%%: 4534-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4535:        break;
    %%%%%: 4535-block  0
    #####: 4536:      case '\n':
    #####: 4537:        m << "\\n";
    %%%%%: 4537-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4538:        break;
    %%%%%: 4538-block  0
    #####: 4539:      case '\f':
    #####: 4540:        m << "\\f";
    %%%%%: 4540-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4541:        break;
    %%%%%: 4541-block  0
    #####: 4542:      case '\r':
    #####: 4543:        m << "\\r";
    %%%%%: 4543-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4544:        break;
    %%%%%: 4544-block  0
    #####: 4545:      default:
    #####: 4546:        if (ch < ' ') {
    %%%%%: 4546-block  0
branch  0 never executed
branch  1 never executed
    #####: 4547:          m << "\\u00" << String::FormatByte(static_cast<unsigned char>(ch));
    %%%%%: 4547-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4547-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4547-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4547-block  3
call    9 never executed
    $$$$$: 4547-block  4
call   10 never executed
    $$$$$: 4547-block  5
        -: 4548:        } else {
    #####: 4549:          m << ch;
    %%%%%: 4549-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4550:        }
    #####: 4551:        break;
    %%%%%: 4551-block  0
        -: 4552:    }
        -: 4553:  }
        -: 4554:
    #####: 4555:  return m.GetString();
    %%%%%: 4555-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4555-block  1
        -: 4556:}
        -: 4557:
        -: 4558:// The following routines generate an JSON representation of a UnitTest
        -: 4559:// object.
        -: 4560:
        -: 4561:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internalL28FormatTimeInMillisAsDurationEl called 0 returned 0% blocks executed 0%
    #####: 4562:static std::string FormatTimeInMillisAsDuration(TimeInMillis ms) {
    #####: 4563:  ::std::stringstream ss;
    %%%%%: 4563-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4563-block  1
call    3 never executed
    $$$$$: 4563-block  2
call    4 never executed
    #####: 4564:  ss << (static_cast<double>(ms) * 1e-3) << "s";
    %%%%%: 4564-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4564-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4565:  return ss.str();
    %%%%%: 4565-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4565-block  1
        -: 4566:}
        -: 4567:
        -: 4568:// Converts the given epoch time in milliseconds to a date string in the
        -: 4569:// RFC3339 format, without the timezone information.
function _ZN7testing8internalL32FormatEpochTimeInMillisAsRFC3339El called 0 returned 0% blocks executed 0%
    #####: 4570:static std::string FormatEpochTimeInMillisAsRFC3339(TimeInMillis ms) {
        -: 4571:  struct tm time_struct;
    #####: 4572:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 4572-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4573:    return "";
    %%%%%: 4573-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4573-block  1
call    4 never executed
    $$$$$: 4573-block  2
call    5 never executed
    $$$$$: 4573-block  3
        -: 4574:  // YYYY-MM-DDThh:mm:ss
    #####: 4575:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    %%%%%: 4575-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4575-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4575-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 4575-block  3
call   11 never executed
    $$$$$: 4575-block  4
    $$$$$: 4575-block  5
call   12 never executed
    $$$$$: 4575-block  6
    $$$$$: 4575-block  7
call   13 never executed
    $$$$$: 4575-block  8
    $$$$$: 4575-block  9
    #####: 4576:         String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    %%%%%: 4576-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4576-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4576-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4576-block  3
call   12 never executed
    $$$$$: 4576-block  4
    $$$$$: 4576-block  5
call   13 never executed
    $$$$$: 4576-block  6
    $$$$$: 4576-block  7
call   14 never executed
    $$$$$: 4576-block  8
    #####: 4577:         String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    %%%%%: 4577-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4577-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4577-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4577-block  3
call   12 never executed
    $$$$$: 4577-block  4
    $$$$$: 4577-block  5
call   13 never executed
    $$$$$: 4577-block  6
    $$$$$: 4577-block  7
call   14 never executed
    $$$$$: 4577-block  8
    #####: 4578:         String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    %%%%%: 4578-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4578-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4578-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4578-block  3
call   12 never executed
    $$$$$: 4578-block  4
    $$$$$: 4578-block  5
call   13 never executed
    $$$$$: 4578-block  6
    $$$$$: 4578-block  7
call   14 never executed
    $$$$$: 4578-block  8
    #####: 4579:         String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 4579-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4579-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4579-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4579-block  3
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$: 4579-block  4
call   13 never executed
    $$$$$: 4579-block  5
    $$$$$: 4579-block  6
call   14 never executed
    $$$$$: 4579-block  7
    $$$$$: 4579-block  8
call   15 never executed
    $$$$$: 4579-block  9
    #####: 4580:         String::FormatIntWidth2(time_struct.tm_sec) + "Z";
    %%%%%: 4580-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4580-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4580-block  2
call    7 never executed
    $$$$$: 4580-block  3
        -: 4581:}
        -: 4582:
function _ZN7testing8internalL6IndentEm called 0 returned 0% blocks executed 0%
    #####: 4583:static inline std::string Indent(size_t width) {
    #####: 4584:  return std::string(width, ' ');
    %%%%%: 4584-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4584-block  1
call    4 never executed
    %%%%%: 4584-block  2
    $$$$$: 4584-block  3
call    5 never executed
        -: 4585:}
        -: 4586:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_SA_b called 0 returned 0% blocks executed 0%
    #####: 4587:void JsonUnitTestResultPrinter::OutputJsonKey(std::ostream* stream,
        -: 4588:                                              const std::string& element_name,
        -: 4589:                                              const std::string& name,
        -: 4590:                                              const std::string& value,
        -: 4591:                                              const std::string& indent,
        -: 4592:                                              bool comma) {
        -: 4593:  const std::vector<std::string>& allowed_names =
    #####: 4594:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4594-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4594-block  1
call    3 never executed
    $$$$$: 4594-block  2
call    4 never executed
        -: 4595:
    #####: 4596:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4596-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4596-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4596-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4596-block  3
call   13 never executed
    %%%%%: 4596-block  4
call   14 never executed
    $$$$$: 4596-block  5
    $$$$$: 4596-block  6
call   15 never executed
    $$$$$: 4596-block  7
        -: 4597:               allowed_names.end())
        -: 4598:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 4599:      << "\".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4599-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4599-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4599-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4599-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4599-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 4600:
    #####: 4601:  *stream << indent << "\"" << name << "\": \"" << EscapeJson(value) << "\"";
    %%%%%: 4601-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4601-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4601-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4601-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4601-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4601-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4601-block  6
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 4601-block  7
call   21 never executed
    $$$$$: 4601-block  8
call   22 never executed
    $$$$$: 4601-block  9
    #####: 4602:  if (comma) *stream << ",\n";
branch  0 never executed
branch  1 never executed
    %%%%%: 4602-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4603:}
        -: 4604:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_iSA_b called 0 returned 0% blocks executed 0%
    #####: 4605:void JsonUnitTestResultPrinter::OutputJsonKey(
        -: 4606:    std::ostream* stream, const std::string& element_name,
        -: 4607:    const std::string& name, int value, const std::string& indent, bool comma) {
        -: 4608:  const std::vector<std::string>& allowed_names =
    #####: 4609:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4609-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4609-block  1
call    3 never executed
    $$$$$: 4609-block  2
call    4 never executed
        -: 4610:
    #####: 4611:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4611-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4611-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4611-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4611-block  3
call   13 never executed
    %%%%%: 4611-block  4
call   14 never executed
    $$$$$: 4611-block  5
    $$$$$: 4611-block  6
call   15 never executed
    $$$$$: 4611-block  7
        -: 4612:               allowed_names.end())
        -: 4613:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 4614:      << "\".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4614-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4614-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4614-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4614-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4614-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 4615:
    #####: 4616:  *stream << indent << "\"" << name << "\": " << StreamableToString(value);
    %%%%%: 4616-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4616-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4616-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4616-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4616-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4616-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4616-block  6
call   18 never executed
    $$$$$: 4616-block  7
call   19 never executed
    $$$$$: 4616-block  8
    #####: 4617:  if (comma) *stream << ",\n";
branch  0 never executed
branch  1 never executed
    %%%%%: 4617-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4618:}
        -: 4619:
        -: 4620:// Streams a test suite JSON stanza containing the given test result.
function _ZN7testing8internal25JsonUnitTestResultPrinter32OutputJsonTestSuiteForTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4621:void JsonUnitTestResultPrinter::OutputJsonTestSuiteForTestResult(
        -: 4622:    ::std::ostream* stream, const TestResult& result) {
        -: 4623:  // Output the boilerplate for a new test suite.
    #####: 4624:  *stream << Indent(4) << "{\n";
    %%%%%: 4624-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4624-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4624-block  2
call    7 never executed
    $$$$$: 4624-block  3
call    8 never executed
    $$$$$: 4624-block  4
call    9 never executed
    #####: 4625:  OutputJsonKey(stream, "testsuite", "name", "NonTestSuiteFailure", Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4625-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4625-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4625-block  2
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4625-block  3
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    $$$$$: 4625-block  4
call   23 never executed
    $$$$$: 4625-block  5
    $$$$$: 4625-block  6
call   24 never executed
    $$$$$: 4625-block  7
    $$$$$: 4625-block  8
call   25 never executed
    $$$$$: 4625-block  9
    $$$$$: 4625-block 10
call   26 never executed
    $$$$$: 4625-block 11
    $$$$$: 4625-block 12
call   27 never executed
    $$$$$: 4625-block 13
    $$$$$: 4625-block 14
call   28 never executed
    $$$$$: 4625-block 15
    $$$$$: 4625-block 16
call   29 never executed
    $$$$$: 4625-block 17
call   30 never executed
    #####: 4626:  OutputJsonKey(stream, "testsuite", "tests", 1, Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4626-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4626-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4626-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4626-block  3
call   17 never executed
    $$$$$: 4626-block  4
    $$$$$: 4626-block  5
call   18 never executed
    $$$$$: 4626-block  6
    $$$$$: 4626-block  7
call   19 never executed
    $$$$$: 4626-block  8
    $$$$$: 4626-block  9
call   20 never executed
    $$$$$: 4626-block 10
    $$$$$: 4626-block 11
call   21 never executed
    $$$$$: 4626-block 12
call   22 never executed
    #####: 4627:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4628:    OutputJsonKey(stream, "testsuite", "failures", 1, Indent(6));
    %%%%%: 4628-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4628-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4628-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4628-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4628-block  4
call   17 never executed
    $$$$$: 4628-block  5
    $$$$$: 4628-block  6
call   18 never executed
    $$$$$: 4628-block  7
    $$$$$: 4628-block  8
call   19 never executed
    $$$$$: 4628-block  9
    $$$$$: 4628-block 10
call   20 never executed
    $$$$$: 4628-block 11
    $$$$$: 4628-block 12
call   21 never executed
    $$$$$: 4628-block 13
call   22 never executed
    #####: 4629:    OutputJsonKey(stream, "testsuite", "disabled", 0, Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4629-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4629-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4629-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4629-block  3
call   17 never executed
    $$$$$: 4629-block  4
    $$$$$: 4629-block  5
call   18 never executed
    $$$$$: 4629-block  6
    $$$$$: 4629-block  7
call   19 never executed
    $$$$$: 4629-block  8
    $$$$$: 4629-block  9
call   20 never executed
    $$$$$: 4629-block 10
    $$$$$: 4629-block 11
call   21 never executed
    $$$$$: 4629-block 12
call   22 never executed
    #####: 4630:    OutputJsonKey(stream, "testsuite", "skipped", 0, Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4630-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4630-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4630-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4630-block  3
call   17 never executed
    $$$$$: 4630-block  4
    $$$$$: 4630-block  5
call   18 never executed
    $$$$$: 4630-block  6
    $$$$$: 4630-block  7
call   19 never executed
    $$$$$: 4630-block  8
    $$$$$: 4630-block  9
call   20 never executed
    $$$$$: 4630-block 10
    $$$$$: 4630-block 11
call   21 never executed
    $$$$$: 4630-block 12
call   22 never executed
    #####: 4631:    OutputJsonKey(stream, "testsuite", "errors", 0, Indent(6));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4631-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4631-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4631-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4631-block  3
call   17 never executed
    $$$$$: 4631-block  4
    $$$$$: 4631-block  5
call   18 never executed
    $$$$$: 4631-block  6
    $$$$$: 4631-block  7
call   19 never executed
    $$$$$: 4631-block  8
    $$$$$: 4631-block  9
call   20 never executed
    $$$$$: 4631-block 10
    $$$$$: 4631-block 11
call   21 never executed
    $$$$$: 4631-block 12
call   22 never executed
    #####: 4632:    OutputJsonKey(stream, "testsuite", "time",
    %%%%%: 4632-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4632-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4632-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4632-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4632-block  4
call   15 never executed
    $$$$$: 4632-block  5
    $$$$$: 4632-block  6
call   16 never executed
    $$$$$: 4632-block  7
    $$$$$: 4632-block  8
call   17 never executed
    $$$$$: 4632-block  9
    $$$$$: 4632-block 10
call   18 never executed
    $$$$$: 4632-block 11
    #####: 4633:                  FormatTimeInMillisAsDuration(result.elapsed_time()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4633-block  0
call    5 never executed
    $$$$$: 4633-block  1
    #####: 4634:                  Indent(6));
call    0 never executed
call    1 never executed
    $$$$$: 4634-block  0
call    2 never executed
    $$$$$: 4634-block  1
call    3 never executed
    #####: 4635:    OutputJsonKey(stream, "testsuite", "timestamp",
    %%%%%: 4635-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4635-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4635-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4635-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4635-block  4
call   15 never executed
    $$$$$: 4635-block  5
    $$$$$: 4635-block  6
call   16 never executed
    $$$$$: 4635-block  7
    $$$$$: 4635-block  8
call   17 never executed
    $$$$$: 4635-block  9
    $$$$$: 4635-block 10
call   18 never executed
    $$$$$: 4635-block 11
    #####: 4636:                  FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4636-block  0
call    5 never executed
    $$$$$: 4636-block  1
    #####: 4637:                  Indent(6));
call    0 never executed
call    1 never executed
    $$$$$: 4637-block  0
call    2 never executed
    $$$$$: 4637-block  1
call    3 never executed
        -: 4638:  }
    #####: 4639:  *stream << Indent(6) << "\"testsuite\": [\n";
    %%%%%: 4639-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4639-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4639-block  2
call    7 never executed
    $$$$$: 4639-block  3
call    8 never executed
    $$$$$: 4639-block  4
call    9 never executed
        -: 4640:
        -: 4641:  // Output the boilerplate for a new test case.
    #####: 4642:  *stream << Indent(8) << "{\n";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4642-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4642-block  1
call    7 never executed
    $$$$$: 4642-block  2
call    8 never executed
    $$$$$: 4642-block  3
call    9 never executed
    #####: 4643:  OutputJsonKey(stream, "testcase", "name", "", Indent(10));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4643-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4643-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4643-block  2
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4643-block  3
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    $$$$$: 4643-block  4
call   23 never executed
    $$$$$: 4643-block  5
    $$$$$: 4643-block  6
call   24 never executed
    $$$$$: 4643-block  7
    $$$$$: 4643-block  8
call   25 never executed
    $$$$$: 4643-block  9
    $$$$$: 4643-block 10
call   26 never executed
    $$$$$: 4643-block 11
    $$$$$: 4643-block 12
call   27 never executed
    $$$$$: 4643-block 13
    $$$$$: 4643-block 14
call   28 never executed
    $$$$$: 4643-block 15
    $$$$$: 4643-block 16
call   29 never executed
    $$$$$: 4643-block 17
call   30 never executed
    #####: 4644:  OutputJsonKey(stream, "testcase", "status", "RUN", Indent(10));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4644-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4644-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4644-block  2
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4644-block  3
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    $$$$$: 4644-block  4
call   23 never executed
    $$$$$: 4644-block  5
    $$$$$: 4644-block  6
call   24 never executed
    $$$$$: 4644-block  7
    $$$$$: 4644-block  8
call   25 never executed
    $$$$$: 4644-block  9
    $$$$$: 4644-block 10
call   26 never executed
    $$$$$: 4644-block 11
    $$$$$: 4644-block 12
call   27 never executed
    $$$$$: 4644-block 13
    $$$$$: 4644-block 14
call   28 never executed
    $$$$$: 4644-block 15
    $$$$$: 4644-block 16
call   29 never executed
    $$$$$: 4644-block 17
call   30 never executed
    #####: 4645:  OutputJsonKey(stream, "testcase", "result", "COMPLETED", Indent(10));
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4645-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4645-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4645-block  2
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4645-block  3
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    $$$$$: 4645-block  4
call   23 never executed
    $$$$$: 4645-block  5
    $$$$$: 4645-block  6
call   24 never executed
    $$$$$: 4645-block  7
    $$$$$: 4645-block  8
call   25 never executed
    $$$$$: 4645-block  9
    $$$$$: 4645-block 10
call   26 never executed
    $$$$$: 4645-block 11
    $$$$$: 4645-block 12
call   27 never executed
    $$$$$: 4645-block 13
    $$$$$: 4645-block 14
call   28 never executed
    $$$$$: 4645-block 15
    $$$$$: 4645-block 16
call   29 never executed
    $$$$$: 4645-block 17
call   30 never executed
    #####: 4646:  OutputJsonKey(stream, "testcase", "timestamp",
    %%%%%: 4646-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4646-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4646-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4646-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4646-block  4
call   15 never executed
    $$$$$: 4646-block  5
    $$$$$: 4646-block  6
call   16 never executed
    $$$$$: 4646-block  7
    $$$$$: 4646-block  8
call   17 never executed
    $$$$$: 4646-block  9
    $$$$$: 4646-block 10
call   18 never executed
    $$$$$: 4646-block 11
    #####: 4647:                FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4647-block  0
call    5 never executed
    $$$$$: 4647-block  1
    #####: 4648:                Indent(10));
call    0 never executed
call    1 never executed
    $$$$$: 4648-block  0
call    2 never executed
    $$$$$: 4648-block  1
call    3 never executed
    #####: 4649:  OutputJsonKey(stream, "testcase", "time",
    %%%%%: 4649-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4649-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4649-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4649-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4649-block  4
call   15 never executed
    $$$$$: 4649-block  5
    $$$$$: 4649-block  6
call   16 never executed
    $$$$$: 4649-block  7
    $$$$$: 4649-block  8
call   17 never executed
    $$$$$: 4649-block  9
    $$$$$: 4649-block 10
call   18 never executed
    $$$$$: 4649-block 11
    #####: 4650:                FormatTimeInMillisAsDuration(result.elapsed_time()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4650-block  0
call    5 never executed
    $$$$$: 4650-block  1
    #####: 4651:                Indent(10));
call    0 never executed
call    1 never executed
    $$$$$: 4651-block  0
call    2 never executed
    $$$$$: 4651-block  1
call    3 never executed
    #####: 4652:  OutputJsonKey(stream, "testcase", "classname", "", Indent(10), false);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4652-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4652-block  1
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4652-block  2
call   13 never executed
branch 14 never executed
branch 15 never executed
    %%%%%: 4652-block  3
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
    $$$$$: 4652-block  4
call   23 never executed
    $$$$$: 4652-block  5
    $$$$$: 4652-block  6
call   24 never executed
    $$$$$: 4652-block  7
    $$$$$: 4652-block  8
call   25 never executed
    $$$$$: 4652-block  9
    $$$$$: 4652-block 10
call   26 never executed
    $$$$$: 4652-block 11
    $$$$$: 4652-block 12
call   27 never executed
    $$$$$: 4652-block 13
    $$$$$: 4652-block 14
call   28 never executed
    $$$$$: 4652-block 15
    $$$$$: 4652-block 16
call   29 never executed
    $$$$$: 4652-block 17
call   30 never executed
    #####: 4653:  *stream << TestPropertiesAsJson(result, Indent(10));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4653-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4653-block  1
call    7 never executed
call    8 never executed
    $$$$$: 4653-block  2
call    9 never executed
    $$$$$: 4653-block  3
    $$$$$: 4653-block  4
call   10 never executed
    $$$$$: 4653-block  5
call   11 never executed
        -: 4654:
        -: 4655:  // Output the actual test result.
    #####: 4656:  OutputJsonTestResult(stream, result);
call    0 never executed
        -: 4657:
        -: 4658:  // Finish the test suite.
    #####: 4659:  *stream << "\n" << Indent(6) << "]\n" << Indent(4) << "}";
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4659-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4659-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4659-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4659-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4659-block  4
call   17 never executed
call   18 never executed
    $$$$$: 4659-block  5
call   19 never executed
    $$$$$: 4659-block  6
    $$$$$: 4659-block  7
call   20 never executed
    #####: 4660:}
        -: 4661:
        -: 4662:// Prints a JSON representation of a TestInfo object.
function _ZN7testing8internal25JsonUnitTestResultPrinter18OutputJsonTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 4663:void JsonUnitTestResultPrinter::OutputJsonTestInfo(::std::ostream* stream,
        -: 4664:                                                   const char* test_suite_name,
        -: 4665:                                                   const TestInfo& test_info) {
    #####: 4666:  const TestResult& result = *test_info.result();
    %%%%%: 4666-block  0
call    0 never executed
    #####: 4667:  const std::string kTestsuite = "testcase";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4667-block  0
    $$$$$: 4667-block  1
call    4 never executed
    #####: 4668:  const std::string kIndent = Indent(10);
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4668-block  0
call    3 never executed
        -: 4669:
    #####: 4670:  *stream << Indent(8) << "{\n";
    %%%%%: 4670-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4670-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4670-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4670-block  3
call    9 never executed
    $$$$$: 4670-block  4
call   10 never executed
    $$$$$: 4670-block  5
    #####: 4671:  OutputJsonKey(stream, kTestsuite, "name", test_info.name(), kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4671-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4671-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4671-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4671-block  3
call   16 never executed
    $$$$$: 4671-block  4
    $$$$$: 4671-block  5
call   17 never executed
    $$$$$: 4671-block  6
    $$$$$: 4671-block  7
call   18 never executed
    $$$$$: 4671-block  8
    $$$$$: 4671-block  9
call   19 never executed
    $$$$$: 4671-block 10
        -: 4672:
    #####: 4673:  if (test_info.value_param() != nullptr) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4674:    OutputJsonKey(stream, kTestsuite, "value_param", test_info.value_param(),
    %%%%%: 4674-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4674-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4674-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4674-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4674-block  4
call   16 never executed
    $$$$$: 4674-block  5
    $$$$$: 4674-block  6
call   17 never executed
    $$$$$: 4674-block  7
    $$$$$: 4674-block  8
call   18 never executed
    $$$$$: 4674-block  9
    $$$$$: 4674-block 10
call   19 never executed
    $$$$$: 4674-block 11
        -: 4675:                  kIndent);
        -: 4676:  }
    #####: 4677:  if (test_info.type_param() != nullptr) {
    %%%%%: 4677-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4678:    OutputJsonKey(stream, kTestsuite, "type_param", test_info.type_param(),
    %%%%%: 4678-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4678-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4678-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4678-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4678-block  4
call   16 never executed
    $$$$$: 4678-block  5
    $$$$$: 4678-block  6
call   17 never executed
    $$$$$: 4678-block  7
    $$$$$: 4678-block  8
call   18 never executed
    $$$$$: 4678-block  9
    $$$$$: 4678-block 10
call   19 never executed
    $$$$$: 4678-block 11
        -: 4679:                  kIndent);
        -: 4680:  }
        -: 4681:
    #####: 4682:  OutputJsonKey(stream, kTestsuite, "file", test_info.file(), kIndent);
    %%%%%: 4682-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4682-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4682-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4682-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4682-block  4
call   16 never executed
    $$$$$: 4682-block  5
    $$$$$: 4682-block  6
call   17 never executed
    $$$$$: 4682-block  7
    $$$$$: 4682-block  8
call   18 never executed
    $$$$$: 4682-block  9
    $$$$$: 4682-block 10
call   19 never executed
    $$$$$: 4682-block 11
    #####: 4683:  OutputJsonKey(stream, kTestsuite, "line", test_info.line(), kIndent, false);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4683-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4683-block  1
call    8 never executed
call    9 never executed
    $$$$$: 4683-block  2
call   10 never executed
    $$$$$: 4683-block  3
    $$$$$: 4683-block  4
call   11 never executed
    $$$$$: 4683-block  5
    #####: 4684:  if (GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4685:    *stream << "\n" << Indent(8) << "}";
    %%%%%: 4685-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4685-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4685-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4685-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4685-block  4
call   12 never executed
    $$$$$: 4685-block  5
call   13 never executed
    $$$$$: 4685-block  6
    #####: 4686:    return;
        -: 4687:  } else {
    #####: 4688:    *stream << ",\n";
    %%%%%: 4688-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4689:  }
        -: 4690:
    #####: 4691:  OutputJsonKey(stream, kTestsuite, "status",
    %%%%%: 4691-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4691-block  1
    %%%%%: 4691-block  2
    %%%%%: 4691-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4691-block  4
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4691-block  5
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4691-block  6
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4691-block  7
call   17 never executed
    $$$$$: 4691-block  8
    $$$$$: 4691-block  9
call   18 never executed
    $$$$$: 4691-block 10
    $$$$$: 4691-block 11
call   19 never executed
    $$$$$: 4691-block 12
    $$$$$: 4691-block 13
call   20 never executed
    $$$$$: 4691-block 14
    #####: 4692:                test_info.should_run() ? "RUN" : "NOTRUN", kIndent);
call    0 never executed
    #####: 4693:  OutputJsonKey(stream, kTestsuite, "result",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4693-block  0
    %%%%%: 4693-block  1
    %%%%%: 4693-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4693-block  3
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4693-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4693-block  5
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4693-block  6
call   17 never executed
    $$$$$: 4693-block  7
    $$$$$: 4693-block  8
call   18 never executed
    $$$$$: 4693-block  9
    $$$$$: 4693-block 10
call   19 never executed
    $$$$$: 4693-block 11
    $$$$$: 4693-block 12
call   20 never executed
    $$$$$: 4693-block 13
    #####: 4694:                test_info.should_run()
call    0 never executed
    #####: 4695:                    ? (result.Skipped() ? "SKIPPED" : "COMPLETED")
    %%%%%: 4695-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4695-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 4695-block  2
    %%%%%: 4695-block  3
        -: 4696:                    : "SUPPRESSED",
        -: 4697:                kIndent);
    #####: 4698:  OutputJsonKey(stream, kTestsuite, "timestamp",
    %%%%%: 4698-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4698-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4698-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4698-block  3
call    9 never executed
    $$$$$: 4698-block  4
    $$$$$: 4698-block  5
call   10 never executed
    $$$$$: 4698-block  6
    #####: 4699:                FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4699-block  0
call    5 never executed
    $$$$$: 4699-block  1
        -: 4700:                kIndent);
    #####: 4701:  OutputJsonKey(stream, kTestsuite, "time",
    %%%%%: 4701-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4701-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4701-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4701-block  3
call    9 never executed
    $$$$$: 4701-block  4
    $$$$$: 4701-block  5
call   10 never executed
    $$$$$: 4701-block  6
    #####: 4702:                FormatTimeInMillisAsDuration(result.elapsed_time()), kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4702-block  0
call    5 never executed
    $$$$$: 4702-block  1
    #####: 4703:  OutputJsonKey(stream, kTestsuite, "classname", test_suite_name, kIndent,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4703-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4703-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4703-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4703-block  3
call   15 never executed
    $$$$$: 4703-block  4
    $$$$$: 4703-block  5
call   16 never executed
    $$$$$: 4703-block  6
    $$$$$: 4703-block  7
call   17 never executed
    $$$$$: 4703-block  8
    $$$$$: 4703-block  9
call   18 never executed
    $$$$$: 4703-block 10
        -: 4704:                false);
    #####: 4705:  *stream << TestPropertiesAsJson(result, kIndent);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4705-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4705-block  1
call    6 never executed
    $$$$$: 4705-block  2
call    7 never executed
    $$$$$: 4705-block  3
        -: 4706:
    #####: 4707:  OutputJsonTestResult(stream, result);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4708:}
        -: 4709:
function _ZN7testing8internal25JsonUnitTestResultPrinter20OutputJsonTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4710:void JsonUnitTestResultPrinter::OutputJsonTestResult(::std::ostream* stream,
        -: 4711:                                                     const TestResult& result) {
    #####: 4712:  const std::string kIndent = Indent(10);
    %%%%%: 4712-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4712-block  1
call    3 never executed
        -: 4713:
    #####: 4714:  int failures = 0;
    #####: 4715:  for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4715-block  0
    %%%%%: 4715-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4715-block  2
    #####: 4716:    const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4716-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4717:    if (part.failed()) {
    %%%%%: 4717-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4718:      *stream << ",\n";
    %%%%%: 4718-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4719:      if (++failures == 1) {
    %%%%%: 4719-block  0
branch  0 never executed
branch  1 never executed
        -: 4720:        *stream << kIndent << "\""
        -: 4721:                << "failures"
    #####: 4722:                << "\": [\n";
    %%%%%: 4722-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4722-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4722-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4722-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4723:      }
        -: 4724:      const std::string location =
        -: 4725:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4726:                                                          part.line_number());
    %%%%%: 4726-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    $$$$$: 4726-block  1
call    6 never executed
    #####: 4727:      const std::string message = EscapeJson(location + "\n" + part.message());
    %%%%%: 4727-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4727-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4727-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    %%%%%: 4727-block  3
call   11 never executed
    $$$$$: 4727-block  4
    $$$$$: 4727-block  5
    $$$$$: 4727-block  6
call   12 never executed
        -: 4728:      *stream << kIndent << "  {\n"
        -: 4729:              << kIndent << "    \"failure\": \"" << message << "\",\n"
        -: 4730:              << kIndent << "    \"type\": \"\"\n"
    #####: 4731:              << kIndent << "  }";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4731-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4731-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4731-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4731-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4731-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4731-block  5
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 4731-block  6
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%: 4731-block  7
call   24 never executed
branch 25 never executed
branch 26 never executed
    %%%%%: 4731-block  8
call   27 never executed
branch 28 never executed
branch 29 never executed
        -: 4732:    }
        -: 4733:  }
        -: 4734:
    #####: 4735:  if (failures > 0) *stream << "\n" << kIndent << "]";
    %%%%%: 4735-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4735-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4735-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4735-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 4736:  *stream << "\n" << Indent(8) << "}";
    %%%%%: 4736-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4736-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4736-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4736-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4736-block  4
call   12 never executed
call   13 never executed
    $$$$$: 4736-block  5
call   14 never executed
    $$$$$: 4736-block  6
    #####: 4737:}
        -: 4738:
        -: 4739:// Prints an JSON representation of a TestSuite object
function _ZN7testing8internal25JsonUnitTestResultPrinter18PrintJsonTestSuiteEPSoRKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 4740:void JsonUnitTestResultPrinter::PrintJsonTestSuite(
        -: 4741:    std::ostream* stream, const TestSuite& test_suite) {
    #####: 4742:  const std::string kTestsuite = "testsuite";
    %%%%%: 4742-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4742-block  1
    $$$$$: 4742-block  2
call    5 never executed
    #####: 4743:  const std::string kIndent = Indent(6);
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4743-block  0
call    3 never executed
        -: 4744:
    #####: 4745:  *stream << Indent(4) << "{\n";
    %%%%%: 4745-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4745-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4745-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4745-block  3
call    9 never executed
    $$$$$: 4745-block  4
call   10 never executed
    $$$$$: 4745-block  5
    #####: 4746:  OutputJsonKey(stream, kTestsuite, "name", test_suite.name(), kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4746-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4746-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4746-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4746-block  3
call   16 never executed
    $$$$$: 4746-block  4
    $$$$$: 4746-block  5
call   17 never executed
    $$$$$: 4746-block  6
    $$$$$: 4746-block  7
call   18 never executed
    $$$$$: 4746-block  8
    $$$$$: 4746-block  9
call   19 never executed
    $$$$$: 4746-block 10
    #####: 4747:  OutputJsonKey(stream, kTestsuite, "tests", test_suite.reportable_test_count(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4747-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4747-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4747-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4747-block  3
call   12 never executed
    $$$$$: 4747-block  4
    $$$$$: 4747-block  5
call   13 never executed
    $$$$$: 4747-block  6
        -: 4748:                kIndent);
    #####: 4749:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4750:    OutputJsonKey(stream, kTestsuite, "failures",
    %%%%%: 4750-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4750-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4750-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4750-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4750-block  4
call   12 never executed
    $$$$$: 4750-block  5
    $$$$$: 4750-block  6
call   13 never executed
    $$$$$: 4750-block  7
        -: 4751:                  test_suite.failed_test_count(), kIndent);
    #####: 4752:    OutputJsonKey(stream, kTestsuite, "disabled",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4752-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4752-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4752-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4752-block  3
call   12 never executed
    $$$$$: 4752-block  4
    $$$$$: 4752-block  5
call   13 never executed
    $$$$$: 4752-block  6
        -: 4753:                  test_suite.reportable_disabled_test_count(), kIndent);
    #####: 4754:    OutputJsonKey(stream, kTestsuite, "errors", 0, kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4754-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4754-block  1
call    7 never executed
call    8 never executed
    $$$$$: 4754-block  2
call    9 never executed
    $$$$$: 4754-block  3
    $$$$$: 4754-block  4
call   10 never executed
    $$$$$: 4754-block  5
    #####: 4755:    OutputJsonKey(
    %%%%%: 4755-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4755-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4755-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4755-block  3
call    9 never executed
    $$$$$: 4755-block  4
    $$$$$: 4755-block  5
call   10 never executed
    $$$$$: 4755-block  6
        -: 4756:        stream, kTestsuite, "timestamp",
    #####: 4757:        FormatEpochTimeInMillisAsRFC3339(test_suite.start_timestamp()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4757-block  0
call    5 never executed
    $$$$$: 4757-block  1
        -: 4758:        kIndent);
    #####: 4759:    OutputJsonKey(stream, kTestsuite, "time",
    %%%%%: 4759-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4759-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4759-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4759-block  3
call    9 never executed
    $$$$$: 4759-block  4
    $$$$$: 4759-block  5
call   10 never executed
    $$$$$: 4759-block  6
    #####: 4760:                  FormatTimeInMillisAsDuration(test_suite.elapsed_time()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4760-block  0
call    5 never executed
    $$$$$: 4760-block  1
        -: 4761:                  kIndent, false);
    #####: 4762:    *stream << TestPropertiesAsJson(test_suite.ad_hoc_test_result(), kIndent)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4762-block  0
call    4 never executed
    $$$$$: 4762-block  1
call    5 never executed
    $$$$$: 4762-block  2
    #####: 4763:            << ",\n";
    %%%%%: 4763-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4763-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4764:  }
        -: 4765:
    #####: 4766:  *stream << kIndent << "\"" << kTestsuite << "\": [\n";
    %%%%%: 4766-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4766-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4766-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4766-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4767:
    #####: 4768:  bool comma = false;
    #####: 4769:  for (int i = 0; i < test_suite.total_test_count(); ++i) {
    %%%%%: 4769-block  0
    %%%%%: 4769-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4769-block  2
    #####: 4770:    if (test_suite.GetTestInfo(i)->is_reportable()) {
    %%%%%: 4770-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4770-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4771:      if (comma) {
    %%%%%: 4771-block  0
branch  0 never executed
branch  1 never executed
    #####: 4772:        *stream << ",\n";
    %%%%%: 4772-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4773:      } else {
    #####: 4774:        comma = true;
    %%%%%: 4774-block  0
        -: 4775:      }
    #####: 4776:      OutputJsonTestInfo(stream, test_suite.name(), *test_suite.GetTestInfo(i));
    %%%%%: 4776-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4776-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4777:    }
        -: 4778:  }
    #####: 4779:  *stream << "\n" << kIndent << "]\n" << Indent(4) << "}";
    %%%%%: 4779-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4779-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4779-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4779-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4779-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4779-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4779-block  6
call   18 never executed
call   19 never executed
    $$$$$: 4779-block  7
call   20 never executed
    $$$$$: 4779-block  8
    #####: 4780:}
        -: 4781:
        -: 4782:// Prints a JSON summary of unit_test to output stream out.
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 4783:void JsonUnitTestResultPrinter::PrintJsonUnitTest(std::ostream* stream,
        -: 4784:                                                  const UnitTest& unit_test) {
    #####: 4785:  const std::string kTestsuites = "testsuites";
    %%%%%: 4785-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4785-block  1
    $$$$$: 4785-block  2
call    5 never executed
    #####: 4786:  const std::string kIndent = Indent(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4786-block  0
call    3 never executed
    $$$$$: 4786-block  1
call    4 never executed
    #####: 4787:  *stream << "{\n";
    %%%%%: 4787-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4788:
    #####: 4789:  OutputJsonKey(stream, kTestsuites, "tests", unit_test.reportable_test_count(),
    %%%%%: 4789-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4789-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4789-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4789-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4789-block  4
call   12 never executed
    $$$$$: 4789-block  5
    $$$$$: 4789-block  6
call   13 never executed
    $$$$$: 4789-block  7
        -: 4790:                kIndent);
    #####: 4791:  OutputJsonKey(stream, kTestsuites, "failures", unit_test.failed_test_count(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4791-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4791-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4791-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4791-block  3
call   12 never executed
    $$$$$: 4791-block  4
    $$$$$: 4791-block  5
call   13 never executed
    $$$$$: 4791-block  6
        -: 4792:                kIndent);
    #####: 4793:  OutputJsonKey(stream, kTestsuites, "disabled",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4793-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4793-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4793-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4793-block  3
call   12 never executed
    $$$$$: 4793-block  4
    $$$$$: 4793-block  5
call   13 never executed
    $$$$$: 4793-block  6
        -: 4794:                unit_test.reportable_disabled_test_count(), kIndent);
    #####: 4795:  OutputJsonKey(stream, kTestsuites, "errors", 0, kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4795-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4795-block  1
call    7 never executed
call    8 never executed
    $$$$$: 4795-block  2
call    9 never executed
    $$$$$: 4795-block  3
    $$$$$: 4795-block  4
call   10 never executed
    $$$$$: 4795-block  5
    #####: 4796:  if (GTEST_FLAG_GET(shuffle)) {
branch  0 never executed
branch  1 never executed
    #####: 4797:    OutputJsonKey(stream, kTestsuites, "random_seed", unit_test.random_seed(),
    %%%%%: 4797-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4797-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4797-block  2
call    8 never executed
call    9 never executed
    $$$$$: 4797-block  3
call   10 never executed
    $$$$$: 4797-block  4
    $$$$$: 4797-block  5
call   11 never executed
    $$$$$: 4797-block  6
        -: 4798:                  kIndent);
        -: 4799:  }
    #####: 4800:  OutputJsonKey(stream, kTestsuites, "timestamp",
    %%%%%: 4800-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4800-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4800-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4800-block  3
call    9 never executed
    $$$$$: 4800-block  4
    $$$$$: 4800-block  5
call   10 never executed
    $$$$$: 4800-block  6
    #####: 4801:                FormatEpochTimeInMillisAsRFC3339(unit_test.start_timestamp()),
    %%%%%: 4801-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4801-block  1
call    5 never executed
    $$$$$: 4801-block  2
        -: 4802:                kIndent);
    #####: 4803:  OutputJsonKey(stream, kTestsuites, "time",
    %%%%%: 4803-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4803-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4803-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4803-block  3
call    9 never executed
    $$$$$: 4803-block  4
    $$$$$: 4803-block  5
call   10 never executed
    $$$$$: 4803-block  6
    #####: 4804:                FormatTimeInMillisAsDuration(unit_test.elapsed_time()), kIndent,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4804-block  0
call    5 never executed
    $$$$$: 4804-block  1
        -: 4805:                false);
        -: 4806:
    #####: 4807:  *stream << TestPropertiesAsJson(unit_test.ad_hoc_test_result(), kIndent)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4807-block  0
call    4 never executed
    $$$$$: 4807-block  1
call    5 never executed
    $$$$$: 4807-block  2
    #####: 4808:          << ",\n";
    %%%%%: 4808-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4808-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4809:
    #####: 4810:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4810-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4810-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4810-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4810-block  3
call   15 never executed
    $$$$$: 4810-block  4
    $$$$$: 4810-block  5
call   16 never executed
    $$$$$: 4810-block  6
    $$$$$: 4810-block  7
call   17 never executed
    $$$$$: 4810-block  8
    $$$$$: 4810-block  9
call   18 never executed
    $$$$$: 4810-block 10
    #####: 4811:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4811-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4811-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4811-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4812:
    #####: 4813:  bool comma = false;
    #####: 4814:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 4814-block  0
    %%%%%: 4814-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4814-block  2
    #####: 4815:    if (unit_test.GetTestSuite(i)->reportable_test_count() > 0) {
    %%%%%: 4815-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4815-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4815-block  2
branch  6 never executed
branch  7 never executed
    #####: 4816:      if (comma) {
    %%%%%: 4816-block  0
branch  0 never executed
branch  1 never executed
    #####: 4817:        *stream << ",\n";
    %%%%%: 4817-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4818:      } else {
    #####: 4819:        comma = true;
    %%%%%: 4819-block  0
        -: 4820:      }
    #####: 4821:      PrintJsonTestSuite(stream, *unit_test.GetTestSuite(i));
    %%%%%: 4821-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4821-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4822:    }
        -: 4823:  }
        -: 4824:
        -: 4825:  // If there was a test failure outside of one of the test suites (like in a
        -: 4826:  // test environment) include that in the output.
    #####: 4827:  if (unit_test.ad_hoc_test_result().Failed()) {
    %%%%%: 4827-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4827-block  1
branch  4 never executed
branch  5 never executed
    #####: 4828:    OutputJsonTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());
    %%%%%: 4828-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4829:  }
        -: 4830:
        -: 4831:  *stream << "\n"
        -: 4832:          << kIndent << "]\n"
    #####: 4833:          << "}\n";
    %%%%%: 4833-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4833-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4833-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4833-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 4834:}
        -: 4835:
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonTestListEPSoRKSt6vectorIPNS_9TestSuiteESaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 4836:void JsonUnitTestResultPrinter::PrintJsonTestList(
        -: 4837:    std::ostream* stream, const std::vector<TestSuite*>& test_suites) {
    #####: 4838:  const std::string kTestsuites = "testsuites";
    %%%%%: 4838-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4838-block  1
    $$$$$: 4838-block  2
call    5 never executed
    #####: 4839:  const std::string kIndent = Indent(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4839-block  0
call    3 never executed
    $$$$$: 4839-block  1
call    4 never executed
    #####: 4840:  *stream << "{\n";
    %%%%%: 4840-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4841:  int total_tests = 0;
    #####: 4842:  for (auto test_suite : test_suites) {
    %%%%%: 4842-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4842-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4842-block  2
call    5 never executed
    #####: 4843:    total_tests += test_suite->total_test_count();
call    0 never executed
call    1 never executed
        -: 4844:  }
    #####: 4845:  OutputJsonKey(stream, kTestsuites, "tests", total_tests, kIndent);
    %%%%%: 4845-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4845-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4845-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4845-block  3
call    9 never executed
    $$$$$: 4845-block  4
    $$$$$: 4845-block  5
call   10 never executed
    $$$$$: 4845-block  6
        -: 4846:
    #####: 4847:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4847-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4847-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4847-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4847-block  3
call   15 never executed
    $$$$$: 4847-block  4
    $$$$$: 4847-block  5
call   16 never executed
    $$$$$: 4847-block  6
    $$$$$: 4847-block  7
call   17 never executed
    $$$$$: 4847-block  8
    $$$$$: 4847-block  9
call   18 never executed
    $$$$$: 4847-block 10
    #####: 4848:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4848-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4848-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4848-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4849:
    #####: 4850:  for (size_t i = 0; i < test_suites.size(); ++i) {
    %%%%%: 4850-block  0
    %%%%%: 4850-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4850-block  2
    #####: 4851:    if (i != 0) {
    %%%%%: 4851-block  0
branch  0 never executed
branch  1 never executed
    #####: 4852:      *stream << ",\n";
    %%%%%: 4852-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4853:    }
    #####: 4854:    PrintJsonTestSuite(stream, *test_suites[i]);
    %%%%%: 4854-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4855:  }
        -: 4856:
        -: 4857:  *stream << "\n"
        -: 4858:          << kIndent << "]\n"
    #####: 4859:          << "}\n";
    %%%%%: 4859-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4859-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4859-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4859-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 4860:}
        -: 4861:// Produces a string representing the test properties in a result as
        -: 4862:// a JSON dictionary.
function _ZN7testing8internal25JsonUnitTestResultPrinter20TestPropertiesAsJsonERKNS_10TestResultERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4863:std::string JsonUnitTestResultPrinter::TestPropertiesAsJson(
        -: 4864:    const TestResult& result, const std::string& indent) {
    #####: 4865:  Message attributes;
    %%%%%: 4865-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4865-block  1
call    3 never executed
    $$$$$: 4865-block  2
call    4 never executed
    #####: 4866:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4866-block  0
    %%%%%: 4866-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4867:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4867-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4868:    attributes << ",\n"
    %%%%%: 4868-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4869:               << indent << "\"" << property.key() << "\": "
    %%%%%: 4869-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4869-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4869-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4869-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$: 4869-block  4
    #####: 4870:               << "\"" << EscapeJson(property.value()) << "\"";
    %%%%%: 4870-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4870-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4870-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4870-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4870-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4870-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4870-block  6
call   20 never executed
    $$$$$: 4870-block  7
    $$$$$: 4870-block  8
call   21 never executed
    $$$$$: 4870-block  9
    $$$$$: 4870-block 10
call   22 never executed
    $$$$$: 4870-block 11
        -: 4871:  }
    #####: 4872:  return attributes.GetString();
    %%%%%: 4872-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4872-block  1
        -: 4873:}
        -: 4874:
        -: 4875:// End JsonUnitTestResultPrinter
        -: 4876:
        -: 4877:#if GTEST_CAN_STREAM_RESULTS_
        -: 4878:
        -: 4879:// Checks if str contains '=', '&', '%' or '\n' characters. If yes,
        -: 4880:// replaces them by "%xx" where xx is their hexadecimal value. For
        -: 4881:// example, replaces "=" with "%3D".  This algorithm is O(strlen(str))
        -: 4882:// in both time and space -- important as the input str may contain an
        -: 4883:// arbitrarily long test failure message and stack trace.
function _ZN7testing8internal17StreamingListener9UrlEncodeB5cxx11EPKc called 0 returned 0% blocks executed 0%
    #####: 4884:std::string StreamingListener::UrlEncode(const char* str) {
    #####: 4885:  std::string result;
    %%%%%: 4885-block  0
call    0 never executed
    #####: 4886:  result.reserve(strlen(str) + 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4887:  for (char ch = *str; ch != '\0'; ch = *++str) {
    %%%%%: 4887-block  0
    %%%%%: 4887-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 4887-block  2
    #####: 4888:    switch (ch) {
    %%%%%: 4888-block  0
branch  0 never executed
branch  1 never executed
    #####: 4889:      case '%':
        -: 4890:      case '=':
        -: 4891:      case '&':
        -: 4892:      case '\n':
    #####: 4893:        result.append("%" + String::FormatByte(static_cast<unsigned char>(ch)));
    %%%%%: 4893-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4893-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4893-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4893-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4893-block  4
call   11 never executed
    $$$$$: 4893-block  5
    $$$$$: 4893-block  6
call   12 never executed
    $$$$$: 4893-block  7
    #####: 4894:        break;
    #####: 4895:      default:
    #####: 4896:        result.push_back(ch);
    %%%%%: 4896-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4897:        break;
    %%%%%: 4897-block  0
        -: 4898:    }
        -: 4899:  }
    #####: 4900:  return result;
    %%%%%: 4900-block  0
    %%%%%: 4900-block  1
        -: 4901:}
        -: 4902:
function _ZN7testing8internal17StreamingListener12SocketWriter14MakeConnectionEv called 0 returned 0% blocks executed 0%
    #####: 4903:void StreamingListener::SocketWriter::MakeConnection() {
    #####: 4904:  GTEST_CHECK_(sockfd_ == -1)
    %%%%%: 4904-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4904-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4904-block  2
call    6 never executed
    %%%%%: 4904-block  3
call    7 never executed
    $$$$$: 4904-block  4
call    8 never executed
    $$$$$: 4904-block  5
    #####: 4905:      << "MakeConnection() can't be called when there is already a connection.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4905-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4906:
        -: 4907:  addrinfo hints;
    #####: 4908:  memset(&hints, 0, sizeof(hints));
    #####: 4909:  hints.ai_family = AF_UNSPEC;  // To allow both IPv4 and IPv6 addresses.
    #####: 4910:  hints.ai_socktype = SOCK_STREAM;
    #####: 4911:  addrinfo* servinfo = nullptr;
        -: 4912:
        -: 4913:  // Use the getaddrinfo() to get a linked list of IP addresses for
        -: 4914:  // the given host name.
        -: 4915:  const int error_num =
    #####: 4916:      getaddrinfo(host_name_.c_str(), port_num_.c_str(), &hints, &servinfo);
    %%%%%: 4916-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4917:  if (error_num != 0) {
    %%%%%: 4917-block  0
branch  0 never executed
branch  1 never executed
    #####: 4918:    GTEST_LOG_(WARNING) << "stream_result_to: getaddrinfo() failed: "
    %%%%%: 4918-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4918-block  1
call    3 never executed
    %%%%%: 4918-block  2
call    4 never executed
    $$$$$: 4918-block  3
call    5 never executed
    $$$$$: 4918-block  4
    #####: 4919:                        << gai_strerror(error_num);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4919-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4920:  }
        -: 4921:
        -: 4922:  // Loop through all the results and connect to the first we can.
    #####: 4923:  for (addrinfo* cur_addr = servinfo; sockfd_ == -1 && cur_addr != nullptr;
    %%%%%: 4923-block  0
    %%%%%: 4923-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 4923-block  2
branch  2 never executed
branch  3 never executed
    #####: 4924:       cur_addr = cur_addr->ai_next) {
    %%%%%: 4924-block  0
    #####: 4925:    sockfd_ = socket(cur_addr->ai_family, cur_addr->ai_socktype,
    %%%%%: 4925-block  0
call    0 never executed
        -: 4926:                     cur_addr->ai_protocol);
    #####: 4927:    if (sockfd_ != -1) {
branch  0 never executed
branch  1 never executed
        -: 4928:      // Connect the client socket to the server socket.
    #####: 4929:      if (connect(sockfd_, cur_addr->ai_addr, cur_addr->ai_addrlen) == -1) {
    %%%%%: 4929-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4929-block  1
branch  3 never executed
branch  4 never executed
    #####: 4930:        close(sockfd_);
    %%%%%: 4930-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4931:        sockfd_ = -1;
    %%%%%: 4931-block  0
        -: 4932:      }
        -: 4933:    }
        -: 4934:  }
        -: 4935:
    #####: 4936:  freeaddrinfo(servinfo);  // all done with this structure
    %%%%%: 4936-block  0
call    0 never executed
        -: 4937:
    #####: 4938:  if (sockfd_ == -1) {
branch  0 never executed
branch  1 never executed
    #####: 4939:    GTEST_LOG_(WARNING) << "stream_result_to: failed to connect to "
    %%%%%: 4939-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4939-block  1
call    3 never executed
    %%%%%: 4939-block  2
call    4 never executed
    $$$$$: 4939-block  3
call    5 never executed
    $$$$$: 4939-block  4
    #####: 4940:                        << host_name_ << ":" << port_num_;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4940-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4940-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4940-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4941:  }
    #####: 4942:}
    %%%%%: 4942-block  0
        -: 4943:
        -: 4944:// End of class Streaming Listener
        -: 4945:#endif  // GTEST_CAN_STREAM_RESULTS__
        -: 4946:
        -: 4947:// class OsStackTraceGetter
        -: 4948:
        -: 4949:const char* const OsStackTraceGetterInterface::kElidedFramesMarker =
        -: 4950:    "... " GTEST_NAME_ " internal frames ...";
        -: 4951:
function _ZN7testing8internal18OsStackTraceGetter17CurrentStackTraceB5cxx11Eii called 0 returned 0% blocks executed 0%
    #####: 4952:std::string OsStackTraceGetter::CurrentStackTrace(int max_depth, int skip_count)
        -: 4953:    GTEST_LOCK_EXCLUDED_(mutex_) {
        -: 4954:#if GTEST_HAS_ABSL
        -: 4955:  std::string result;
        -: 4956:
        -: 4957:  if (max_depth <= 0) {
        -: 4958:    return result;
        -: 4959:  }
        -: 4960:
        -: 4961:  max_depth = std::min(max_depth, kMaxStackTraceDepth);
        -: 4962:
        -: 4963:  std::vector<void*> raw_stack(max_depth);
        -: 4964:  // Skips the frames requested by the caller, plus this function.
        -: 4965:  const int raw_stack_size =
        -: 4966:      absl::GetStackTrace(&raw_stack[0], max_depth, skip_count + 1);
        -: 4967:
        -: 4968:  void* caller_frame = nullptr;
        -: 4969:  {
        -: 4970:    MutexLock lock(&mutex_);
        -: 4971:    caller_frame = caller_frame_;
        -: 4972:  }
        -: 4973:
        -: 4974:  for (int i = 0; i < raw_stack_size; ++i) {
        -: 4975:    if (raw_stack[i] == caller_frame &&
        -: 4976:        !GTEST_FLAG_GET(show_internal_stack_frames)) {
        -: 4977:      // Add a marker to the trace and stop adding frames.
        -: 4978:      absl::StrAppend(&result, kElidedFramesMarker, "\n");
        -: 4979:      break;
        -: 4980:    }
        -: 4981:
        -: 4982:    char tmp[1024];
        -: 4983:    const char* symbol = "(unknown)";
        -: 4984:    if (absl::Symbolize(raw_stack[i], tmp, sizeof(tmp))) {
        -: 4985:      symbol = tmp;
        -: 4986:    }
        -: 4987:
        -: 4988:    char line[1024];
        -: 4989:    snprintf(line, sizeof(line), "  %p: %s\n", raw_stack[i], symbol);
        -: 4990:    result += line;
        -: 4991:  }
        -: 4992:
        -: 4993:  return result;
        -: 4994:
        -: 4995:#else   // !GTEST_HAS_ABSL
        -: 4996:  static_cast<void>(max_depth);
        -: 4997:  static_cast<void>(skip_count);
    #####: 4998:  return "";
    %%%%%: 4998-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4998-block  1
call    4 never executed
    %%%%%: 4998-block  2
    $$$$$: 4998-block  3
call    5 never executed
        -: 4999:#endif  // GTEST_HAS_ABSL
        -: 5000:}
        -: 5001:
function _ZN7testing8internal18OsStackTraceGetter16UponLeavingGTestEv called 27 returned 100% blocks executed 100%
       27: 5002:void OsStackTraceGetter::UponLeavingGTest() GTEST_LOCK_EXCLUDED_(mutex_) {
        -: 5003:#if GTEST_HAS_ABSL
        -: 5004:  void* caller_frame = nullptr;
        -: 5005:  if (absl::GetStackTrace(&caller_frame, 1, 3) <= 0) {
        -: 5006:    caller_frame = nullptr;
        -: 5007:  }
        -: 5008:
        -: 5009:  MutexLock lock(&mutex_);
        -: 5010:  caller_frame_ = caller_frame;
        -: 5011:#endif  // GTEST_HAS_ABSL
       27: 5012:}
        -: 5013:
        -: 5014:// A helper class that creates the premature-exit file in its
        -: 5015:// constructor and deletes the file in its destructor.
        -: 5016:class ScopedPrematureExitFile {
        -: 5017: public:
function _ZN7testing8internal23ScopedPrematureExitFileC2EPKc called 1 returned 100% blocks executed 50%
        1: 5018:  explicit ScopedPrematureExitFile(const char* premature_exit_filepath)
        1: 5019:      : premature_exit_filepath_(
       1*: 5020:            premature_exit_filepath ? premature_exit_filepath : "") {
        1: 5020-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 5020-block  1
        1: 5020-block  2
        1: 5020-block  3
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 5020-block  4
call    6 returned 1
    $$$$$: 5020-block  5
call    7 never executed
    $$$$$: 5020-block  6
call    8 never executed
    $$$$$: 5020-block  7
call    9 never executed
        -: 5021:    // If a path to the premature-exit file is specified...
        1: 5022:    if (!premature_exit_filepath_.empty()) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -: 5023:      // create the file with a single "0" character in it.  I/O
        -: 5024:      // errors are ignored as there's nothing better we can do and we
        -: 5025:      // don't want to fail the test because of this.
    #####: 5026:      FILE* pfile = posix::FOpen(premature_exit_filepath_.c_str(), "w");
    %%%%%: 5026-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5027:      fwrite("0", 1, 1, pfile);
    %%%%%: 5027-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5028:      fclose(pfile);
    %%%%%: 5028-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5029:    }
        1: 5030:  }
        1: 5030-block  0
        -: 5031:
function _ZN7testing8internal23ScopedPrematureExitFileD2Ev called 1 returned 100% blocks executed 27%
        1: 5032:  ~ScopedPrematureExitFile() {
        1: 5032-block  0
call    0 returned 1
        -: 5033:#if !defined GTEST_OS_ESP8266
        1: 5034:    if (!premature_exit_filepath_.empty()) {
        1: 5034-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5035:      int retval = remove(premature_exit_filepath_.c_str());
    %%%%%: 5035-block  0
call    0 never executed
call    1 never executed
    #####: 5036:      if (retval) {
branch  0 never executed
branch  1 never executed
    #####: 5037:        GTEST_LOG_(ERROR) << "Failed to remove premature exit filepath \""
    %%%%%: 5037-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5038:                          << premature_exit_filepath_ << "\" with error "
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5039:                          << retval;
call    0 never executed
        -: 5040:      }
        -: 5041:    }
        -: 5042:#endif
        1: 5043:  }
        -: 5044:
        -: 5045: private:
        -: 5046:  const std::string premature_exit_filepath_;
        -: 5047:
        -: 5048:  ScopedPrematureExitFile(const ScopedPrematureExitFile&) = delete;
        -: 5049:  ScopedPrematureExitFile& operator=(const ScopedPrematureExitFile&) = delete;
        -: 5050:};
        -: 5051:
        -: 5052:}  // namespace internal
        -: 5053:
        -: 5054:// class TestEventListeners
        -: 5055:
function _ZN7testing18TestEventListenersC2Ev called 1 returned 100% blocks executed 100%
        1: 5056:TestEventListeners::TestEventListeners()
        1: 5057:    : repeater_(new internal::TestEventRepeater()),
        1: 5057-block  0
call    0 returned 1
call    1 returned 1
        -: 5058:      default_result_printer_(nullptr),
        1: 5059:      default_xml_generator_(nullptr) {}
        -: 5060:
function _ZN7testing18TestEventListenersD2Ev called 1 returned 100% blocks executed 100%
        1: 5061:TestEventListeners::~TestEventListeners() { delete repeater_; }
        1: 5061-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5061-block  1
call    2 returned 1
        -: 5062:
        -: 5063:// Returns the standard listener responsible for the default console
        -: 5064:// output.  Can be removed from the listeners list to shut down default
        -: 5065:// console output.  Note that removing this object from the listener list
        -: 5066:// with Release transfers its ownership to the user.
function _ZN7testing18TestEventListeners6AppendEPNS_17TestEventListenerE called 1 returned 100% blocks executed 100%
        1: 5067:void TestEventListeners::Append(TestEventListener* listener) {
        1: 5068:  repeater_->Append(listener);
        1: 5068-block  0
call    0 returned 1
        1: 5069:}
        -: 5070:
        -: 5071:// Removes the given event listener from the list and returns it.  It then
        -: 5072:// becomes the caller's responsibility to delete the listener. Returns
        -: 5073:// NULL if the listener is not found in the list.
function _ZN7testing18TestEventListeners7ReleaseEPNS_17TestEventListenerE called 1 returned 100% blocks executed 71%
        1: 5074:TestEventListener* TestEventListeners::Release(TestEventListener* listener) {
        1: 5075:  if (listener == default_result_printer_)
        1: 5075-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5076:    default_result_printer_ = nullptr;
        1: 5076-block  0
    #####: 5077:  else if (listener == default_xml_generator_)
    %%%%%: 5077-block  0
branch  0 never executed
branch  1 never executed
    #####: 5078:    default_xml_generator_ = nullptr;
    %%%%%: 5078-block  0
        1: 5079:  return repeater_->Release(listener);
        1: 5079-block  0
call    0 returned 1
        -: 5080:}
        -: 5081:
        -: 5082:// Returns repeater that broadcasts the TestEventListener events to all
        -: 5083:// subscribers.
function _ZN7testing18TestEventListeners8repeaterEv called 7 returned 100% blocks executed 100%
        7: 5084:TestEventListener* TestEventListeners::repeater() { return repeater_; }
        7: 5084-block  0
        -: 5085:
        -: 5086:// Sets the default_result_printer attribute to the provided listener.
        -: 5087:// The listener is also added to the listener list and previous
        -: 5088:// default_result_printer is removed from it and deleted. The listener can
        -: 5089:// also be NULL in which case it will not be added to the list. Does
        -: 5090:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners23SetDefaultResultPrinterEPNS_17TestEventListenerE called 1 returned 100% blocks executed 86%
        1: 5091:void TestEventListeners::SetDefaultResultPrinter(TestEventListener* listener) {
        1: 5092:  if (default_result_printer_ != listener) {
        1: 5092-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 5093:    // It is an error to pass this method a listener that is already in the
        -: 5094:    // list.
       1*: 5095:    delete Release(default_result_printer_);
        1: 5095-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 5095-block  1
call    3 never executed
        1: 5096:    default_result_printer_ = listener;
        1: 5097:    if (listener != nullptr) Append(listener);
        1: 5097-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5097-block  1
call    2 returned 1
        -: 5098:  }
        1: 5099:}
        -: 5100:
        -: 5101:// Sets the default_xml_generator attribute to the provided listener.  The
        -: 5102:// listener is also added to the listener list and previous
        -: 5103:// default_xml_generator is removed from it and deleted. The listener can
        -: 5104:// also be NULL in which case it will not be added to the list. Does
        -: 5105:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners22SetDefaultXmlGeneratorEPNS_17TestEventListenerE called 0 returned 0% blocks executed 0%
    #####: 5106:void TestEventListeners::SetDefaultXmlGenerator(TestEventListener* listener) {
    #####: 5107:  if (default_xml_generator_ != listener) {
    %%%%%: 5107-block  0
branch  0 never executed
branch  1 never executed
        -: 5108:    // It is an error to pass this method a listener that is already in the
        -: 5109:    // list.
    #####: 5110:    delete Release(default_xml_generator_);
    %%%%%: 5110-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5110-block  1
call    3 never executed
    #####: 5111:    default_xml_generator_ = listener;
    #####: 5112:    if (listener != nullptr) Append(listener);
    %%%%%: 5112-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5112-block  1
call    2 never executed
        -: 5113:  }
    #####: 5114:}
        -: 5115:
        -: 5116:// Controls whether events will be forwarded by the repeater to the
        -: 5117:// listeners in the list.
function _ZNK7testing18TestEventListeners22EventForwardingEnabledEv called 0 returned 0% blocks executed 0%
    #####: 5118:bool TestEventListeners::EventForwardingEnabled() const {
    #####: 5119:  return repeater_->forwarding_enabled();
    %%%%%: 5119-block  0
call    0 never executed
        -: 5120:}
        -: 5121:
function _ZN7testing18TestEventListeners23SuppressEventForwardingEv called 0 returned 0% blocks executed 0%
    #####: 5122:void TestEventListeners::SuppressEventForwarding() {
    #####: 5123:  repeater_->set_forwarding_enabled(false);
    %%%%%: 5123-block  0
call    0 never executed
    #####: 5124:}
        -: 5125:
        -: 5126:// class UnitTest
        -: 5127:
        -: 5128:// Gets the singleton UnitTest object.  The first time this method is
        -: 5129:// called, a UnitTest object is constructed and returned.  Consecutive
        -: 5130:// calls will return the same object.
        -: 5131://
        -: 5132:// We don't protect this under mutex_ as a user is not supposed to
        -: 5133:// call this before main() starts, from which point on the return
        -: 5134:// value will never change.
function _ZN7testing8UnitTest11GetInstanceEv called 80 returned 100% blocks executed 82%
       80: 5135:UnitTest* UnitTest::GetInstance() {
        -: 5136:  // CodeGear C++Builder insists on a public destructor for the
        -: 5137:  // default implementation.  Use this implementation to keep good OO
        -: 5138:  // design with private destructor.
        -: 5139:
        -: 5140:#if defined(__BORLANDC__)
        -: 5141:  static UnitTest* const instance = new UnitTest;
        -: 5142:  return instance;
        -: 5143:#else
       80: 5144:  static UnitTest instance;
       80: 5144-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 79
        1: 5144-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 5144-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 5144-block  3
call    8 returned 1
call    9 returned 1
    $$$$$: 5144-block  4
branch 10 never executed
branch 11 never executed
    $$$$$: 5144-block  5
call   12 never executed
       80: 5145:  return &instance;
       80: 5145-block  0
       80: 5145-block  1
        -: 5146:#endif  // defined(__BORLANDC__)
        -: 5147:}
        -: 5148:
        -: 5149:// Gets the number of successful test suites.
function _ZNK7testing8UnitTest27successful_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5150:int UnitTest::successful_test_suite_count() const {
    #####: 5151:  return impl()->successful_test_suite_count();
    %%%%%: 5151-block  0
call    0 never executed
call    1 never executed
        -: 5152:}
        -: 5153:
        -: 5154:// Gets the number of failed test suites.
function _ZNK7testing8UnitTest23failed_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5155:int UnitTest::failed_test_suite_count() const {
    #####: 5156:  return impl()->failed_test_suite_count();
    %%%%%: 5156-block  0
call    0 never executed
call    1 never executed
        -: 5157:}
        -: 5158:
        -: 5159:// Gets the number of all test suites.
function _ZNK7testing8UnitTest22total_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5160:int UnitTest::total_test_suite_count() const {
    #####: 5161:  return impl()->total_test_suite_count();
    %%%%%: 5161-block  0
call    0 never executed
call    1 never executed
        -: 5162:}
        -: 5163:
        -: 5164:// Gets the number of all test suites that contain at least one test
        -: 5165:// that should run.
function _ZNK7testing8UnitTest23test_suite_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 5166:int UnitTest::test_suite_to_run_count() const {
        2: 5167:  return impl()->test_suite_to_run_count();
        2: 5167-block  0
call    0 returned 2
call    1 returned 2
        -: 5168:}
        -: 5169:
        -: 5170://  Legacy API is deprecated but still available
        -: 5171:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest26successful_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5172:int UnitTest::successful_test_case_count() const {
    #####: 5173:  return impl()->successful_test_suite_count();
    %%%%%: 5173-block  0
call    0 never executed
call    1 never executed
        -: 5174:}
function _ZNK7testing8UnitTest22failed_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5175:int UnitTest::failed_test_case_count() const {
    #####: 5176:  return impl()->failed_test_suite_count();
    %%%%%: 5176-block  0
call    0 never executed
call    1 never executed
        -: 5177:}
function _ZNK7testing8UnitTest21total_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5178:int UnitTest::total_test_case_count() const {
    #####: 5179:  return impl()->total_test_suite_count();
    %%%%%: 5179-block  0
call    0 never executed
call    1 never executed
        -: 5180:}
function _ZNK7testing8UnitTest22test_case_to_run_countEv called 0 returned 0% blocks executed 0%
    #####: 5181:int UnitTest::test_case_to_run_count() const {
    #####: 5182:  return impl()->test_suite_to_run_count();
    %%%%%: 5182-block  0
call    0 never executed
call    1 never executed
        -: 5183:}
        -: 5184:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 5185:
        -: 5186:// Gets the number of successful tests.
function _ZNK7testing8UnitTest21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 5187:int UnitTest::successful_test_count() const {
        1: 5188:  return impl()->successful_test_count();
        1: 5188-block  0
call    0 returned 1
call    1 returned 1
        -: 5189:}
        -: 5190:
        -: 5191:// Gets the number of skipped tests.
function _ZNK7testing8UnitTest18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1: 5192:int UnitTest::skipped_test_count() const {
        1: 5193:  return impl()->skipped_test_count();
        1: 5193-block  0
call    0 returned 1
call    1 returned 1
        -: 5194:}
        -: 5195:
        -: 5196:// Gets the number of failed tests.
function _ZNK7testing8UnitTest17failed_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5197:int UnitTest::failed_test_count() const { return impl()->failed_test_count(); }
    %%%%%: 5197-block  0
call    0 never executed
call    1 never executed
        -: 5198:
        -: 5199:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8UnitTest30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 5200:int UnitTest::reportable_disabled_test_count() const {
        1: 5201:  return impl()->reportable_disabled_test_count();
        1: 5201-block  0
call    0 returned 1
call    1 returned 1
        -: 5202:}
        -: 5203:
        -: 5204:// Gets the number of disabled tests.
function _ZNK7testing8UnitTest19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5205:int UnitTest::disabled_test_count() const {
    #####: 5206:  return impl()->disabled_test_count();
    %%%%%: 5206-block  0
call    0 never executed
call    1 never executed
        -: 5207:}
        -: 5208:
        -: 5209:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8UnitTest21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5210:int UnitTest::reportable_test_count() const {
    #####: 5211:  return impl()->reportable_test_count();
    %%%%%: 5211-block  0
call    0 never executed
call    1 never executed
        -: 5212:}
        -: 5213:
        -: 5214:// Gets the number of all tests.
function _ZNK7testing8UnitTest16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5215:int UnitTest::total_test_count() const { return impl()->total_test_count(); }
    %%%%%: 5215-block  0
call    0 never executed
call    1 never executed
        -: 5216:
        -: 5217:// Gets the number of tests that should run.
function _ZNK7testing8UnitTest17test_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 5218:int UnitTest::test_to_run_count() const { return impl()->test_to_run_count(); }
        2: 5218-block  0
call    0 returned 2
call    1 returned 2
        -: 5219:
        -: 5220:// Gets the time of the test program start, in ms from the start of the
        -: 5221:// UNIX epoch.
function _ZNK7testing8UnitTest15start_timestampEv called 0 returned 0% blocks executed 0%
    #####: 5222:internal::TimeInMillis UnitTest::start_timestamp() const {
    #####: 5223:  return impl()->start_timestamp();
    %%%%%: 5223-block  0
call    0 never executed
call    1 never executed
        -: 5224:}
        -: 5225:
        -: 5226:// Gets the elapsed time, in milliseconds.
function _ZNK7testing8UnitTest12elapsed_timeEv called 1 returned 100% blocks executed 100%
        1: 5227:internal::TimeInMillis UnitTest::elapsed_time() const {
        1: 5228:  return impl()->elapsed_time();
        1: 5228-block  0
call    0 returned 1
call    1 returned 1
        -: 5229:}
        -: 5230:
        -: 5231:// Returns true if and only if the unit test passed (i.e. all test suites
        -: 5232:// passed).
function _ZNK7testing8UnitTest6PassedEv called 1 returned 100% blocks executed 100%
        1: 5233:bool UnitTest::Passed() const { return impl()->Passed(); }
        1: 5233-block  0
call    0 returned 1
call    1 returned 1
        -: 5234:
        -: 5235:// Returns true if and only if the unit test failed (i.e. some test suite
        -: 5236:// failed or something outside of all tests failed).
function _ZNK7testing8UnitTest6FailedEv called 0 returned 0% blocks executed 0%
    #####: 5237:bool UnitTest::Failed() const { return impl()->Failed(); }
    %%%%%: 5237-block  0
call    0 never executed
call    1 never executed
        -: 5238:
        -: 5239:// Gets the i-th test suite among all the test suites. i can range from 0 to
        -: 5240:// total_test_suite_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing8UnitTest12GetTestSuiteEi called 0 returned 0% blocks executed 0%
    #####: 5241:const TestSuite* UnitTest::GetTestSuite(int i) const {
    #####: 5242:  return impl()->GetTestSuite(i);
    %%%%%: 5242-block  0
call    0 never executed
call    1 never executed
        -: 5243:}
        -: 5244:
        -: 5245://  Legacy API is deprecated but still available
        -: 5246:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest11GetTestCaseEi called 0 returned 0% blocks executed 0%
    #####: 5247:const TestCase* UnitTest::GetTestCase(int i) const {
    #####: 5248:  return impl()->GetTestCase(i);
    %%%%%: 5248-block  0
call    0 never executed
call    1 never executed
        -: 5249:}
        -: 5250:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 5251:
        -: 5252:// Returns the TestResult containing information on test failures and
        -: 5253:// properties logged outside of individual test suites.
function _ZNK7testing8UnitTest18ad_hoc_test_resultEv called 0 returned 0% blocks executed 0%
    #####: 5254:const TestResult& UnitTest::ad_hoc_test_result() const {
    #####: 5255:  return *impl()->ad_hoc_test_result();
    %%%%%: 5255-block  0
call    0 never executed
call    1 never executed
        -: 5256:}
        -: 5257:
        -: 5258:// Gets the i-th test suite among all the test suites. i can range from 0 to
        -: 5259:// total_test_suite_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing8UnitTest19GetMutableTestSuiteEi called 0 returned 0% blocks executed 0%
    #####: 5260:TestSuite* UnitTest::GetMutableTestSuite(int i) {
    #####: 5261:  return impl()->GetMutableSuiteCase(i);
    %%%%%: 5261-block  0
call    0 never executed
call    1 never executed
        -: 5262:}
        -: 5263:
        -: 5264:// Returns the list of event listeners that can be used to track events
        -: 5265:// inside Google Test.
function _ZN7testing8UnitTest9listenersEv called 6 returned 100% blocks executed 100%
        6: 5266:TestEventListeners& UnitTest::listeners() { return *impl()->listeners(); }
        6: 5266-block  0
call    0 returned 6
call    1 returned 6
        -: 5267:
        -: 5268:// Registers and returns a global test environment.  When a test
        -: 5269:// program is run, all global test environments will be set-up in the
        -: 5270:// order they were registered.  After all tests in the program have
        -: 5271:// finished, all global test environments will be torn-down in the
        -: 5272:// *reverse* order they were registered.
        -: 5273://
        -: 5274:// The UnitTest object takes ownership of the given environment.
        -: 5275://
        -: 5276:// We don't protect this under mutex_, as we only support calling it
        -: 5277:// from the main thread.
function _ZN7testing8UnitTest14AddEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5278:Environment* UnitTest::AddEnvironment(Environment* env) {
    #####: 5279:  if (env == nullptr) {
    %%%%%: 5279-block  0
branch  0 never executed
branch  1 never executed
    #####: 5280:    return nullptr;
    %%%%%: 5280-block  0
        -: 5281:  }
        -: 5282:
    #####: 5283:  impl_->environments().push_back(env);
    %%%%%: 5283-block  0
call    0 never executed
call    1 never executed
    #####: 5284:  return env;
        -: 5285:}
        -: 5286:
        -: 5287:// Adds a TestPartResult to the current TestResult object.  All Google Test
        -: 5288:// assertion macros (e.g. ASSERT_TRUE, EXPECT_EQ, etc) eventually call
        -: 5289:// this to report their results.  The user code should use the
        -: 5290:// assertion macros instead of calling this directly.
function _ZN7testing8UnitTest17AddTestPartResultENS_14TestPartResult4TypeEPKciRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESC_ called 0 returned 0% blocks executed 0%
    #####: 5291:void UnitTest::AddTestPartResult(TestPartResult::Type result_type,
        -: 5292:                                 const char* file_name, int line_number,
        -: 5293:                                 const std::string& message,
        -: 5294:                                 const std::string& os_stack_trace)
        -: 5295:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5296:  Message msg;
    %%%%%: 5296-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 5296-block  1
call    4 never executed
    #####: 5297:  msg << message;
    %%%%%: 5297-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5298:
    #####: 5299:  internal::MutexLock lock(&mutex_);
    %%%%%: 5299-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 5299-block  1
call    4 never executed
    #####: 5300:  if (impl_->gtest_trace_stack().size() > 0) {
    %%%%%: 5300-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5300-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5301:    msg << "\n" << GTEST_NAME_ << " trace:";
    %%%%%: 5301-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5301-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5301-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5302:
    #####: 5303:    for (size_t i = impl_->gtest_trace_stack().size(); i > 0; --i) {
    %%%%%: 5303-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5303-block  1
call    3 never executed
    %%%%%: 5303-block  2
branch  4 never executed
branch  5 never executed
    #####: 5304:      const internal::TraceInfo& trace = impl_->gtest_trace_stack()[i - 1];
    %%%%%: 5304-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5304-block  1
call    3 never executed
    #####: 5305:      msg << "\n"
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5306:          << internal::FormatFileLocation(trace.file, trace.line) << " "
    %%%%%: 5306-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5306-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5306-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5306-block  3
call    9 never executed
    $$$$$: 5306-block  4
call   10 never executed
    $$$$$: 5306-block  5
    #####: 5307:          << trace.message;
    %%%%%: 5307-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5308:    }
        -: 5309:  }
        -: 5310:
    #####: 5311:  if (os_stack_trace.c_str() != nullptr && !os_stack_trace.empty()) {
    %%%%%: 5311-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5311-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5311-block  2
    %%%%%: 5311-block  3
    %%%%%: 5311-block  4
branch  6 never executed
branch  7 never executed
    #####: 5312:    msg << internal::kStackTraceMarker << os_stack_trace;
    %%%%%: 5312-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5312-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5313:  }
        -: 5314:
        -: 5315:  const TestPartResult result = TestPartResult(
    #####: 5316:      result_type, file_name, line_number, msg.GetString().c_str());
    %%%%%: 5316-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5316-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5316-block  2
call    7 never executed
    $$$$$: 5316-block  3
    $$$$$: 5316-block  4
call    8 never executed
    #####: 5317:  impl_->GetTestPartResultReporterForCurrentThread()->ReportTestPartResult(
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5318:      result);
    %%%%%: 5318-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5319:
    #####: 5320:  if (result_type != TestPartResult::kSuccess &&
    %%%%%: 5320-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5320-block  1
branch  2 never executed
branch  3 never executed
        -: 5321:      result_type != TestPartResult::kSkip) {
        -: 5322:    // gtest_break_on_failure takes precedence over
        -: 5323:    // gtest_throw_on_failure.  This allows a user to set the latter
        -: 5324:    // in the code (perhaps in order to use Google Test assertions
        -: 5325:    // with another testing framework) and specify the former on the
        -: 5326:    // command line for debugging.
    #####: 5327:    if (GTEST_FLAG_GET(break_on_failure)) {
    %%%%%: 5327-block  0
branch  0 never executed
branch  1 never executed
        -: 5328:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 5329:      // Using DebugBreak on Windows allows gtest to still break into a debugger
        -: 5330:      // when a failure happens and both the --gtest_break_on_failure and
        -: 5331:      // the --gtest_catch_exceptions flags are specified.
        -: 5332:      DebugBreak();
        -: 5333:#elif (!defined(__native_client__)) &&            \
        -: 5334:    ((defined(__clang__) || defined(__GNUC__)) && \
        -: 5335:     (defined(__x86_64__) || defined(__i386__)))
        -: 5336:      // with clang/gcc we can achieve the same effect on x86 by invoking int3
    #####: 5337:      asm("int3");
    %%%%%: 5337-block  0
call    0 never executed
        -: 5338:#else
        -: 5339:      // Dereference nullptr through a volatile pointer to prevent the compiler
        -: 5340:      // from removing. We use this rather than abort() or __builtin_trap() for
        -: 5341:      // portability: some debuggers don't correctly trap abort().
        -: 5342:      *static_cast<volatile int*>(nullptr) = 1;
        -: 5343:#endif  // GTEST_OS_WINDOWS
    #####: 5344:    } else if (GTEST_FLAG_GET(throw_on_failure)) {
    %%%%%: 5344-block  0
branch  0 never executed
branch  1 never executed
        -: 5345:#if GTEST_HAS_EXCEPTIONS
    #####: 5346:      throw internal::GoogleTestFailureException(result);
    %%%%%: 5346-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5346-block  1
call    4 never executed
    $$$$$: 5346-block  2
call    5 never executed
        -: 5347:#else
        -: 5348:      // We cannot call abort() as it generates a pop-up in debug mode
        -: 5349:      // that cannot be suppressed in VC 7.1 or below.
        -: 5350:      exit(1);
        -: 5351:#endif
        -: 5352:    }
        -: 5353:  }
    #####: 5354:}
        -: 5355:
        -: 5356:// Adds a TestProperty to the current TestResult object when invoked from
        -: 5357:// inside a test, to current TestSuite's ad_hoc_test_result_ when invoked
        -: 5358:// from SetUpTestSuite or TearDownTestSuite, or to the global property set
        -: 5359:// when invoked elsewhere.  If the result already contains a property with
        -: 5360:// the same key, the value will be updated.
function _ZN7testing8UnitTest14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 5361:void UnitTest::RecordProperty(const std::string& key,
        -: 5362:                              const std::string& value) {
    #####: 5363:  impl_->RecordProperty(TestProperty(key, value));
    %%%%%: 5363-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5363-block  1
call    4 never executed
    $$$$$: 5363-block  2
call    5 never executed
    #####: 5364:}
        -: 5365:
        -: 5366:// Runs all tests in this UnitTest object and prints the result.
        -: 5367:// Returns 0 if successful, or 1 otherwise.
        -: 5368://
        -: 5369:// We don't protect this under mutex_, as we only support calling it
        -: 5370:// from the main thread.
function _ZN7testing8UnitTest3RunEv called 1 returned 100% blocks executed 78%
        1: 5371:int UnitTest::Run() {
        -: 5372:  const bool in_death_test_child_process =
        1: 5373:      GTEST_FLAG_GET(internal_run_death_test).length() > 0;
        1: 5373-block  0
call    0 returned 1
        -: 5374:
        -: 5375:  // Google Test implements this protocol for catching that a test
        -: 5376:  // program exits before returning control to Google Test:
        -: 5377:  //
        -: 5378:  //   1. Upon start, Google Test creates a file whose absolute path
        -: 5379:  //      is specified by the environment variable
        -: 5380:  //      TEST_PREMATURE_EXIT_FILE.
        -: 5381:  //   2. When Google Test has finished its work, it deletes the file.
        -: 5382:  //
        -: 5383:  // This allows a test runner to set TEST_PREMATURE_EXIT_FILE before
        -: 5384:  // running a Google-Test-based test program and check the existence
        -: 5385:  // of the file at the end of the test execution to see if it has
        -: 5386:  // exited prematurely.
        -: 5387:
        -: 5388:  // If we are in the child process of a death test, don't
        -: 5389:  // create/delete the premature exit file, as doing so is unnecessary
        -: 5390:  // and will confuse the parent process.  Otherwise, create/delete
        -: 5391:  // the file upon entering/leaving this function.  If the program
        -: 5392:  // somehow exits before this function has a chance to return, the
        -: 5393:  // premature-exit file will be left undeleted, causing a test runner
        -: 5394:  // that understands the premature-exit-file protocol to report the
        -: 5395:  // test as having failed.
        -: 5396:  const internal::ScopedPrematureExitFile premature_exit_file(
        -: 5397:      in_death_test_child_process
        -: 5398:          ? nullptr
       1*: 5399:          : internal::posix::GetEnv("TEST_PREMATURE_EXIT_FILE"));
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5399-block  0
        1: 5399-block  1
call    2 returned 1
        1: 5399-block  2
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$: 5399-block  3
call    6 never executed
        -: 5400:
        -: 5401:  // Captures the value of GTEST_FLAG(catch_exceptions).  This value will be
        -: 5402:  // used for the duration of the program.
        1: 5403:  impl()->set_catch_exceptions(GTEST_FLAG_GET(catch_exceptions));
        1: 5403-block  0
call    0 returned 1
call    1 returned 1
        -: 5404:
        -: 5405:#if GTEST_OS_WINDOWS
        -: 5406:  // Either the user wants Google Test to catch exceptions thrown by the
        -: 5407:  // tests or this is executing in the context of death test child
        -: 5408:  // process. In either case the user does not want to see pop-up dialogs
        -: 5409:  // about crashes - they are expected.
        -: 5410:  if (impl()->catch_exceptions() || in_death_test_child_process) {
        -: 5411:#if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 5412:    // SetErrorMode doesn't exist on CE.
        -: 5413:    SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOALIGNMENTFAULTEXCEPT |
        -: 5414:                 SEM_NOGPFAULTERRORBOX | SEM_NOOPENFILEERRORBOX);
        -: 5415:#endif  // !GTEST_OS_WINDOWS_MOBILE
        -: 5416:
        -: 5417:#if (defined(_MSC_VER) || GTEST_OS_WINDOWS_MINGW) && !GTEST_OS_WINDOWS_MOBILE
        -: 5418:    // Death test children can be terminated with _abort().  On Windows,
        -: 5419:    // _abort() can show a dialog with a warning message.  This forces the
        -: 5420:    // abort message to go to stderr instead.
        -: 5421:    _set_error_mode(_OUT_TO_STDERR);
        -: 5422:#endif
        -: 5423:
        -: 5424:#if defined(_MSC_VER) && !GTEST_OS_WINDOWS_MOBILE
        -: 5425:    // In the debug version, Visual Studio pops up a separate dialog
        -: 5426:    // offering a choice to debug the aborted program. We need to suppress
        -: 5427:    // this dialog or it will pop up for every EXPECT/ASSERT_DEATH statement
        -: 5428:    // executed. Google Test will notify the user of any unexpected
        -: 5429:    // failure via stderr.
        -: 5430:    if (!GTEST_FLAG_GET(break_on_failure))
        -: 5431:      _set_abort_behavior(
        -: 5432:          0x0,                                    // Clear the following flags:
        -: 5433:          _WRITE_ABORT_MSG | _CALL_REPORTFAULT);  // pop-up window, core dump.
        -: 5434:
        -: 5435:    // In debug mode, the Windows CRT can crash with an assertion over invalid
        -: 5436:    // input (e.g. passing an invalid file descriptor).  The default handling
        -: 5437:    // for these assertions is to pop up a dialog and wait for user input.
        -: 5438:    // Instead ask the CRT to dump such assertions to stderr non-interactively.
        -: 5439:    if (!IsDebuggerPresent()) {
        -: 5440:      (void)_CrtSetReportMode(_CRT_ASSERT,
        -: 5441:                              _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG);
        -: 5442:      (void)_CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDERR);
        -: 5443:    }
        -: 5444:#endif
        -: 5445:  }
        -: 5446:#endif  // GTEST_OS_WINDOWS
        -: 5447:
        1: 5448:  return internal::HandleExceptionsInMethodIfSupported(
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -: 5449:             impl(), &internal::UnitTestImpl::RunAllTests,
        -: 5450:             "auxiliary test code (environments or event listeners)")
       1*: 5451:             ? 0
        1: 5451-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5451-block  1
    %%%%%: 5451-block  2
        2: 5452:             : 1;
        1: 5452-block  0
call    0 returned 1
        1: 5452-block  1
        -: 5453:}
        -: 5454:
        -: 5455:// Returns the working directory when the first TEST() or TEST_F() was
        -: 5456:// executed.
function _ZNK7testing8UnitTest20original_working_dirEv called 0 returned 0% blocks executed 0%
    #####: 5457:const char* UnitTest::original_working_dir() const {
    #####: 5458:  return impl_->original_working_dir_.c_str();
    %%%%%: 5458-block  0
call    0 never executed
        -: 5459:}
        -: 5460:
        -: 5461:// Returns the TestSuite object for the test that's currently running,
        -: 5462:// or NULL if no test is running.
function _ZNK7testing8UnitTest18current_test_suiteEv called 0 returned 0% blocks executed 0%
    #####: 5463:const TestSuite* UnitTest::current_test_suite() const
        -: 5464:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5465:  internal::MutexLock lock(&mutex_);
    %%%%%: 5465-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5466:  return impl_->current_test_suite();
    %%%%%: 5466-block  0
call    0 never executed
    %%%%%: 5466-block  1
        -: 5467:}
        -: 5468:
        -: 5469:// Legacy API is still available but deprecated
        -: 5470:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest17current_test_caseEv called 0 returned 0% blocks executed 0%
    #####: 5471:const TestCase* UnitTest::current_test_case() const
        -: 5472:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5473:  internal::MutexLock lock(&mutex_);
    %%%%%: 5473-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5474:  return impl_->current_test_suite();
    %%%%%: 5474-block  0
call    0 never executed
    %%%%%: 5474-block  1
        -: 5475:}
        -: 5476:#endif
        -: 5477:
        -: 5478:// Returns the TestInfo object for the test that's currently running,
        -: 5479:// or NULL if no test is running.
function _ZNK7testing8UnitTest17current_test_infoEv called 0 returned 0% blocks executed 0%
    #####: 5480:const TestInfo* UnitTest::current_test_info() const
        -: 5481:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5482:  internal::MutexLock lock(&mutex_);
    %%%%%: 5482-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5483:  return impl_->current_test_info();
    %%%%%: 5483-block  0
call    0 never executed
    %%%%%: 5483-block  1
        -: 5484:}
        -: 5485:
        -: 5486:// Returns the random seed used at the start of the current test run.
function _ZNK7testing8UnitTest11random_seedEv called 0 returned 0% blocks executed 0%
    #####: 5487:int UnitTest::random_seed() const { return impl_->random_seed(); }
    %%%%%: 5487-block  0
call    0 never executed
        -: 5488:
        -: 5489:// Returns ParameterizedTestSuiteRegistry object used to keep track of
        -: 5490:// value-parameterized tests and instantiate and register them.
        -: 5491:internal::ParameterizedTestSuiteRegistry&
function _ZN7testing8UnitTest27parameterized_test_registryEv called 0 returned 0% blocks executed 0%
    #####: 5492:UnitTest::parameterized_test_registry() GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5493:  return impl_->parameterized_test_registry();
    %%%%%: 5493-block  0
call    0 never executed
        -: 5494:}
        -: 5495:
        -: 5496:// Creates an empty UnitTest.
function _ZN7testing8UnitTestC2Ev called 1 returned 100% blocks executed 62%
        1: 5497:UnitTest::UnitTest() { impl_ = new internal::UnitTestImpl(this); }
        1: 5497-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5497-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 5497-block  2
    $$$$$: 5497-block  3
call    7 never executed
    $$$$$: 5497-block  4
call    8 never executed
        -: 5498:
        -: 5499:// Destructor of UnitTest.
       1*: 5500:UnitTest::~UnitTest() { delete impl_; }
------------------
_ZN7testing8UnitTestD0Ev:
function _ZN7testing8UnitTestD0Ev called 0 returned 0% blocks executed 0%
    #####: 5500:UnitTest::~UnitTest() { delete impl_; }
    %%%%%: 5500-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8UnitTestD2Ev:
function _ZN7testing8UnitTestD2Ev called 1 returned 100% blocks executed 100%
        1: 5500:UnitTest::~UnitTest() { delete impl_; }
        1: 5500-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5500-block  1
call    2 returned 1
        1: 5500-block  2
call    3 returned 1
------------------
        -: 5501:
        -: 5502:// Pushes a trace defined by SCOPED_TRACE() on to the per-thread
        -: 5503:// Google Test trace stack.
function _ZN7testing8UnitTest14PushGTestTraceERKNS_8internal9TraceInfoE called 0 returned 0% blocks executed 0%
    #####: 5504:void UnitTest::PushGTestTrace(const internal::TraceInfo& trace)
        -: 5505:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5506:  internal::MutexLock lock(&mutex_);
    %%%%%: 5506-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5506-block  1
call    3 never executed
    $$$$$: 5506-block  2
call    4 never executed
    #####: 5507:  impl_->gtest_trace_stack().push_back(trace);
    %%%%%: 5507-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5507-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5508:}
        -: 5509:
        -: 5510:// Pops a trace from the per-thread Google Test trace stack.
function _ZN7testing8UnitTest13PopGTestTraceEv called 0 returned 0% blocks executed 0%
    #####: 5511:void UnitTest::PopGTestTrace() GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5512:  internal::MutexLock lock(&mutex_);
    %%%%%: 5512-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 5512-block  1
call    4 never executed
    #####: 5513:  impl_->gtest_trace_stack().pop_back();
    %%%%%: 5513-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5513-block  1
call    3 never executed
    #####: 5514:}
        -: 5515:
        -: 5516:namespace internal {
        -: 5517:
function _ZN7testing8internal12UnitTestImplC2EPNS_8UnitTestE called 1 returned 100% blocks executed 44%
        1: 5518:UnitTestImpl::UnitTestImpl(UnitTest* parent)
        -: 5519:    : parent_(parent),
        -: 5520:      GTEST_DISABLE_MSC_WARNINGS_PUSH_(4355 /* using this in initializer */)
        -: 5521:          default_global_test_part_result_reporter_(this),
        -: 5522:      default_per_thread_test_part_result_reporter_(this),
        -: 5523:      GTEST_DISABLE_MSC_WARNINGS_POP_() global_test_part_result_repoter_(
        -: 5524:          &default_global_test_part_result_reporter_),
        -: 5525:      per_thread_test_part_result_reporter_(
        -: 5526:          &default_per_thread_test_part_result_reporter_),
        -: 5527:      parameterized_test_registry_(),
        -: 5528:      parameterized_tests_registered_(false),
        -: 5529:      last_death_test_suite_(-1),
        -: 5530:      current_test_suite_(nullptr),
        -: 5531:      current_test_info_(nullptr),
        -: 5532:      ad_hoc_test_result_(),
        -: 5533:      os_stack_trace_getter_(nullptr),
        -: 5534:      post_flag_parse_init_performed_(false),
        -: 5535:      random_seed_(0),  // Will be overridden by the flag before first use.
        -: 5536:      random_(0),       // Will be reseeded before first use.
        -: 5537:      start_timestamp_(0),
        -: 5538:      elapsed_time_(0),
        -: 5539:#if GTEST_HAS_DEATH_TEST
        1: 5540:      death_test_factory_(new DefaultDeathTestFactory),
        1: 5540-block  0
call    0 returned 1
        -: 5541:#endif
        -: 5542:      // Will be overridden by the flag before first use.
        2: 5543:      catch_exceptions_(false) {
        1: 5543-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 5543-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1: 5543-block  2
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 returned 1
call   14 returned 1
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0 (throw)
        1: 5543-block  3
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0 (throw)
        1: 5543-block  4
call   21 returned 1
call   22 returned 1
call   23 returned 1
branch 24 taken 1 (fallthrough)
branch 25 taken 0 (throw)
call   26 returned 1
call   27 returned 1
branch 28 taken 1 (fallthrough)
branch 29 taken 0 (throw)
    $$$$$: 5543-block  5
    $$$$$: 5543-block  6
call   30 never executed
    $$$$$: 5543-block  7
call   31 never executed
    $$$$$: 5543-block  8
call   32 never executed
    $$$$$: 5543-block  9
call   33 never executed
    $$$$$: 5543-block 10
call   34 never executed
    $$$$$: 5543-block 11
call   35 never executed
    $$$$$: 5543-block 12
call   36 never executed
    $$$$$: 5543-block 13
call   37 never executed
    $$$$$: 5543-block 14
call   38 never executed
    $$$$$: 5543-block 15
call   39 never executed
    $$$$$: 5543-block 16
call   40 never executed
    $$$$$: 5543-block 17
call   41 never executed
    $$$$$: 5543-block 18
call   42 never executed
    $$$$$: 5543-block 19
call   43 never executed
    $$$$$: 5543-block 20
call   44 never executed
    $$$$$: 5543-block 21
call   45 never executed
        1: 5544:  listeners()->SetDefaultResultPrinter(new PrettyUnitTestResultPrinter);
        1: 5544-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5544-block  1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 5545:}
        1: 5545-block  0
        -: 5546:
        2: 5547:UnitTestImpl::~UnitTestImpl() {
        -: 5548:  // Deletes every TestSuite.
        1: 5549:  ForEach(test_suites_, internal::Delete<TestSuite>);
        -: 5550:
        -: 5551:  // Deletes every Environment.
        1: 5552:  ForEach(environments_, internal::Delete<Environment>);
        -: 5553:
        1: 5554:  delete os_stack_trace_getter_;
        2: 5555:}
------------------
_ZN7testing8internal12UnitTestImplD0Ev:
function _ZN7testing8internal12UnitTestImplD0Ev called 1 returned 100% blocks executed 100%
        1: 5547:UnitTestImpl::~UnitTestImpl() {
        -: 5548:  // Deletes every TestSuite.
        -: 5549:  ForEach(test_suites_, internal::Delete<TestSuite>);
        -: 5550:
        -: 5551:  // Deletes every Environment.
        -: 5552:  ForEach(environments_, internal::Delete<Environment>);
        -: 5553:
        -: 5554:  delete os_stack_trace_getter_;
        1: 5555:}
        1: 5555-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN7testing8internal12UnitTestImplD2Ev:
function _ZN7testing8internal12UnitTestImplD2Ev called 1 returned 100% blocks executed 100%
        1: 5547:UnitTestImpl::~UnitTestImpl() {
        1: 5547-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 returned 1
call   14 returned 1
call   15 returned 1
        -: 5548:  // Deletes every TestSuite.
        1: 5549:  ForEach(test_suites_, internal::Delete<TestSuite>);
        1: 5549-block  0
call    0 returned 1
        -: 5550:
        -: 5551:  // Deletes every Environment.
        1: 5552:  ForEach(environments_, internal::Delete<Environment>);
call    0 returned 1
        -: 5553:
        1: 5554:  delete os_stack_trace_getter_;
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5554-block  0
call    2 returned 1
        1: 5555:}
------------------
        -: 5556:
        -: 5557:// Adds a TestProperty to the current TestResult object when invoked in a
        -: 5558:// context of a test, to current test suite's ad_hoc_test_result when invoke
        -: 5559:// from SetUpTestSuite/TearDownTestSuite, or to the global property set
        -: 5560:// otherwise.  If the result already contains a property with the same key,
        -: 5561:// the value will be updated.
function _ZN7testing8internal12UnitTestImpl14RecordPropertyERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 5562:void UnitTestImpl::RecordProperty(const TestProperty& test_property) {
    #####: 5563:  std::string xml_element;
    %%%%%: 5563-block  0
call    0 never executed
    %%%%%: 5563-block  1
call    1 never executed
    $$$$$: 5563-block  2
call    2 never executed
        -: 5564:  TestResult* test_result;  // TestResult appropriate for property recording.
        -: 5565:
    #####: 5566:  if (current_test_info_ != nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 5567:    xml_element = "testcase";
    %%%%%: 5567-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5568:    test_result = &(current_test_info_->result_);
    %%%%%: 5568-block  0
    #####: 5569:  } else if (current_test_suite_ != nullptr) {
    %%%%%: 5569-block  0
branch  0 never executed
branch  1 never executed
    #####: 5570:    xml_element = "testsuite";
    %%%%%: 5570-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5571:    test_result = &(current_test_suite_->ad_hoc_test_result_);
    %%%%%: 5571-block  0
        -: 5572:  } else {
    #####: 5573:    xml_element = "testsuites";
    %%%%%: 5573-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5574:    test_result = &ad_hoc_test_result_;
    %%%%%: 5574-block  0
        -: 5575:  }
    #####: 5576:  test_result->RecordProperty(xml_element, test_property);
    %%%%%: 5576-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5577:}
        -: 5578:
        -: 5579:#if GTEST_HAS_DEATH_TEST
        -: 5580:// Disables event forwarding if the control is currently in a death test
        -: 5581:// subprocess. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl32SuppressTestEventsIfInSubprocessEv called 1 returned 100% blocks executed 60%
        1: 5582:void UnitTestImpl::SuppressTestEventsIfInSubprocess() {
        1: 5583:  if (internal_run_death_test_flag_.get() != nullptr)
        1: 5583-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5584:    listeners()->SuppressEventForwarding();
    %%%%%: 5584-block  0
call    0 never executed
call    1 never executed
        1: 5585:}
        -: 5586:#endif  // GTEST_HAS_DEATH_TEST
        -: 5587:
        -: 5588:// Initializes event listeners performing XML output as specified by
        -: 5589:// UnitTestOptions. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl18ConfigureXmlOutputEv called 1 returned 100% blocks executed 21%
        1: 5590:void UnitTestImpl::ConfigureXmlOutput() {
        2: 5591:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
        1: 5591-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5591-block  1
call    3 returned 1
    $$$$$: 5591-block  2
call    4 never executed
        1: 5592:  if (output_format == "xml") {
        1: 5592-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5593:    listeners()->SetDefaultXmlGenerator(new XmlUnitTestResultPrinter(
    %%%%%: 5593-block  0
call    0 never executed
    %%%%%: 5593-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5594:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5594-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5594-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5594-block  2
call   10 never executed
    $$$$$: 5594-block  3
call   11 never executed
    $$$$$: 5594-block  4
call   12 never executed
    $$$$$: 5594-block  5
        1: 5595:  } else if (output_format == "json") {
        1: 5595-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5596:    listeners()->SetDefaultXmlGenerator(new JsonUnitTestResultPrinter(
    %%%%%: 5596-block  0
call    0 never executed
    %%%%%: 5596-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5597:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5597-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5597-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5597-block  2
call   10 never executed
    $$$$$: 5597-block  3
call   11 never executed
    $$$$$: 5597-block  4
call   12 never executed
    $$$$$: 5597-block  5
        1: 5598:  } else if (output_format != "") {
        1: 5598-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5599:    GTEST_LOG_(WARNING) << "WARNING: unrecognized output format \""
    %%%%%: 5599-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5599-block  1
call    3 never executed
    %%%%%: 5599-block  2
call    4 never executed
    $$$$$: 5599-block  3
call    5 never executed
    $$$$$: 5599-block  4
    #####: 5600:                        << output_format << "\" ignored.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5600-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5600-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5601:  }
        1: 5602:}
        -: 5603:
        -: 5604:#if GTEST_CAN_STREAM_RESULTS_
        -: 5605:// Initializes event listeners for streaming test results in string form.
        -: 5606:// Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl24ConfigureStreamingOutputEv called 1 returned 100% blocks executed 12%
        1: 5607:void UnitTestImpl::ConfigureStreamingOutput() {
        1: 5608:  const std::string& target = GTEST_FLAG_GET(stream_result_to);
        1: 5609:  if (!target.empty()) {
        1: 5609-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5610:    const size_t pos = target.find(':');
    %%%%%: 5610-block  0
call    0 never executed
    #####: 5611:    if (pos != std::string::npos) {
branch  0 never executed
branch  1 never executed
    #####: 5612:      listeners()->Append(
    %%%%%: 5612-block  0
call    0 never executed
    %%%%%: 5612-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5613:          new StreamingListener(target.substr(0, pos), target.substr(pos + 1)));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5613-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5613-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5613-block  2
call   10 never executed
call   11 never executed
    $$$$$: 5613-block  3
call   12 never executed
    $$$$$: 5613-block  4
call   13 never executed
    $$$$$: 5613-block  5
    $$$$$: 5613-block  6
call   14 never executed
    $$$$$: 5613-block  7
call   15 never executed
        -: 5614:    } else {
    #####: 5615:      GTEST_LOG_(WARNING) << "unrecognized streaming target \"" << target
    %%%%%: 5615-block  0
call    0 never executed
call    1 never executed
    %%%%%: 5615-block  1
call    2 never executed
    $$$$$: 5615-block  2
call    3 never executed
    #####: 5616:                          << "\" ignored.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5616-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5616-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5617:    }
        -: 5618:  }
        1: 5619:}
        1: 5619-block  0
        -: 5620:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 5621:
        -: 5622:// Performs initialization dependent upon flag values obtained in
        -: 5623:// ParseGoogleTestFlagsOnly.  Is called from InitGoogleTest after the call to
        -: 5624:// ParseGoogleTestFlagsOnly.  In case a user neglects to call InitGoogleTest
        -: 5625:// this function is also called from RunAllTests.  Since this function can be
        -: 5626:// called more than once, it has to be idempotent.
function _ZN7testing8internal12UnitTestImpl19PostFlagParsingInitEv called 2 returned 100% blocks executed 67%
        2: 5627:void UnitTestImpl::PostFlagParsingInit() {
        -: 5628:  // Ensures that this function does not execute more than once.
        2: 5629:  if (!post_flag_parse_init_performed_) {
        2: 5629-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 5630:    post_flag_parse_init_performed_ = true;
        -: 5631:
        -: 5632:#if defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 5633:    // Register to send notifications about key process state changes.
        -: 5634:    listeners()->Append(new GTEST_CUSTOM_TEST_EVENT_LISTENER_());
        -: 5635:#endif  // defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 5636:
        -: 5637:#if GTEST_HAS_DEATH_TEST
        1: 5638:    InitDeathTestSubprocessControlInfo();
        1: 5638-block  0
call    0 returned 1
        1: 5639:    SuppressTestEventsIfInSubprocess();
call    0 returned 1
        -: 5640:#endif  // GTEST_HAS_DEATH_TEST
        -: 5641:
        -: 5642:    // Registers parameterized tests. This makes parameterized tests
        -: 5643:    // available to the UnitTest reflection API without running
        -: 5644:    // RUN_ALL_TESTS.
        1: 5645:    RegisterParameterizedTests();
call    0 returned 1
        -: 5646:
        -: 5647:    // Configures listeners for XML output. This makes it possible for users
        -: 5648:    // to shut down the default XML output before invoking RUN_ALL_TESTS.
        1: 5649:    ConfigureXmlOutput();
call    0 returned 1
        -: 5650:
        1: 5651:    if (GTEST_FLAG_GET(brief)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5652:      listeners()->SetDefaultResultPrinter(new BriefUnitTestResultPrinter);
    %%%%%: 5652-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 5653:    }
        -: 5654:
        -: 5655:#if GTEST_CAN_STREAM_RESULTS_
        -: 5656:    // Configures listeners for streaming test results to the specified server.
        1: 5657:    ConfigureStreamingOutput();
        1: 5657-block  0
call    0 returned 1
        -: 5658:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 5659:
        -: 5660:#if GTEST_HAS_ABSL
        -: 5661:    if (GTEST_FLAG_GET(install_failure_signal_handler)) {
        -: 5662:      absl::FailureSignalHandlerOptions options;
        -: 5663:      absl::InstallFailureSignalHandler(options);
        -: 5664:    }
        -: 5665:#endif  // GTEST_HAS_ABSL
        -: 5666:  }
        2: 5667:}
        -: 5668:
        -: 5669:// A predicate that checks the name of a TestSuite against a known
        -: 5670:// value.
        -: 5671://
        -: 5672:// This is used for implementation of the UnitTest class only.  We put
        -: 5673:// it in the anonymous namespace to prevent polluting the outer
        -: 5674:// namespace.
        -: 5675://
        -: 5676:// TestSuiteNameIs is copyable.
        -: 5677:class TestSuiteNameIs {
        -: 5678: public:
        -: 5679:  // Constructor.
function _ZN7testing8internal15TestSuiteNameIsC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 5 returned 100% blocks executed 100%
        5: 5680:  explicit TestSuiteNameIs(const std::string& name) : name_(name) {}
        5: 5680-block  0
call    0 returned 5
        -: 5681:
        -: 5682:  // Returns true if and only if the name of test_suite matches name_.
function _ZNK7testing8internal15TestSuiteNameIsclEPKNS_9TestSuiteE called 4 returned 100% blocks executed 88%
        4: 5683:  bool operator()(const TestSuite* test_suite) const {
       8*: 5684:    return test_suite != nullptr &&
        4: 5684-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 5684-block  1
    %%%%%: 5684-block  2
        8: 5685:           strcmp(test_suite->name(), name_.c_str()) == 0;
        4: 5685-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0
        4: 5685-block  1
        -: 5686:  }
        -: 5687:
        -: 5688: private:
        -: 5689:  std::string name_;
        -: 5690:};
        -: 5691:
        -: 5692:// Finds and returns a TestSuite with the given name.  If one doesn't
        -: 5693:// exist, creates one and returns it.  It's the CALLER'S
        -: 5694:// RESPONSIBILITY to ensure that this function is only called WHEN THE
        -: 5695:// TESTS ARE NOT SHUFFLED.
        -: 5696://
        -: 5697:// Arguments:
        -: 5698://
        -: 5699://   test_suite_name: name of the test suite
        -: 5700://   type_param:      the name of the test suite's type parameter, or NULL if
        -: 5701://                    this is not a typed or a type-parameterized test suite.
        -: 5702://   set_up_tc:       pointer to the function that sets up the test suite
        -: 5703://   tear_down_tc:    pointer to the function that tears down the test suite
function _ZN7testing8internal12UnitTestImpl12GetTestSuiteEPKcS3_PFvvES5_ called 5 returned 100% blocks executed 48%
        5: 5704:TestSuite* UnitTestImpl::GetTestSuite(
        -: 5705:    const char* test_suite_name, const char* type_param,
        -: 5706:    internal::SetUpTestSuiteFunc set_up_tc,
        -: 5707:    internal::TearDownTestSuiteFunc tear_down_tc) {
        -: 5708:  // Can we find a TestSuite with the given name?
        -: 5709:  const auto test_suite =
        5: 5710:      std::find_if(test_suites_.rbegin(), test_suites_.rend(),
        5: 5710-block  0
call    0 returned 5
call    1 returned 5
    $$$$$: 5710-block  1
    $$$$$: 5710-block  2
       10: 5711:                   TestSuiteNameIs(test_suite_name));
        5: 5711-block  0
call    0 returned 5
call    1 returned 5
branch  2 taken 5 (fallthrough)
branch  3 taken 0 (throw)
        5: 5711-block  1
call    4 returned 5
branch  5 taken 5 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 5
branch  8 taken 5 (fallthrough)
branch  9 taken 0 (throw)
        5: 5711-block  2
call   10 returned 5
call   11 returned 5
call   12 returned 5
    $$$$$: 5711-block  3
call   13 never executed
    $$$$$: 5711-block  4
    $$$$$: 5711-block  5
call   14 never executed
    $$$$$: 5711-block  6
    $$$$$: 5711-block  7
call   15 never executed
    $$$$$: 5711-block  8
        -: 5712:
        5: 5713:  if (test_suite != test_suites_.rend()) return *test_suite;
call    0 returned 5
call    1 returned 5
branch  2 taken 5 (fallthrough)
branch  3 taken 0 (throw)
        5: 5713-block  0
branch  4 taken 4 (fallthrough)
branch  5 taken 1
        4: 5713-block  1
call    6 returned 4
    $$$$$: 5713-block  2
        -: 5714:
        -: 5715:  // No.  Let's create one.
        -: 5716:  auto* const new_test_suite =
        1: 5717:      new TestSuite(test_suite_name, type_param, set_up_tc, tear_down_tc);
        1: 5717-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5717-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$: 5717-block  2
call    6 never executed
        -: 5718:
        2: 5719:  const UnitTestFilter death_test_suite_filter(kDeathTestSuiteFilter);
        1: 5719-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5719-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
    $$$$$: 5719-block  2
    $$$$$: 5719-block  3
    $$$$$: 5719-block  4
call    8 never executed
        -: 5720:  // Is this a death test suite?
        1: 5721:  if (death_test_suite_filter.MatchesName(test_suite_name)) {
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5721-block  0
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 5721-block  1
call    7 returned 1
call    8 returned 1
branch  9 taken 0 (fallthrough)
branch 10 taken 1
    $$$$$: 5721-block  2
call   11 never executed
    $$$$$: 5721-block  3
    $$$$$: 5721-block  4
call   12 never executed
    $$$$$: 5721-block  5
        -: 5722:    // Yes.  Inserts the test suite after the last death test suite
        -: 5723:    // defined so far.  This only works when the test suites haven't
        -: 5724:    // been shuffled.  Otherwise we may end up running a death test
        -: 5725:    // after a non-death test.
    #####: 5726:    ++last_death_test_suite_;
    #####: 5727:    test_suites_.insert(test_suites_.begin() + last_death_test_suite_,
call    0 never executed
    $$$$$: 5727-block  0
    $$$$$: 5727-block  1
    #####: 5728:                        new_test_suite);
    %%%%%: 5728-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 5728-block  1
    $$$$$: 5728-block  2
        -: 5729:  } else {
        -: 5730:    // No.  Appends to the end of the list.
        1: 5731:    test_suites_.push_back(new_test_suite);
        1: 5731-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5732:  }
        -: 5733:
        1: 5734:  test_suite_indices_.push_back(static_cast<int>(test_suite_indices_.size()));
        1: 5734-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 5734-block  1
        1: 5735:  return new_test_suite;
        1: 5735-block  0
call    0 returned 1
        -: 5736:}
        -: 5737:
        -: 5738:// Helpers for setting up / tearing down the given environment.  They
        -: 5739:// are for use in the ForEach() function.
function _ZN7testing8internalL16SetUpEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5740:static void SetUpEnvironment(Environment* env) { env->SetUp(); }
    %%%%%: 5740-block  0
call    0 never executed
function _ZN7testing8internalL19TearDownEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5741:static void TearDownEnvironment(Environment* env) { env->TearDown(); }
    %%%%%: 5741-block  0
call    0 never executed
        -: 5742:
        -: 5743:// Runs all tests in this UnitTest object, prints the result, and
        -: 5744:// returns true if all tests are successful.  If any exception is
        -: 5745:// thrown during a test, the test is considered to be failed, but the
        -: 5746:// rest of the tests will still be run.
        -: 5747://
        -: 5748:// When parameterized tests are enabled, it expands and registers
        -: 5749:// parameterized tests first in RegisterParameterizedTests().
        -: 5750:// All other functions called from RunAllTests() may safely assume that
        -: 5751:// parameterized tests are ready to be counted and run.
function _ZN7testing8internal12UnitTestImpl11RunAllTestsEv called 1 returned 100% blocks executed 52%
        1: 5752:bool UnitTestImpl::RunAllTests() {
        -: 5753:  // True if and only if Google Test is initialized before RUN_ALL_TESTS() is
        -: 5754:  // called.
        1: 5755:  const bool gtest_is_initialized_before_run_all_tests = GTestIsInitialized();
        1: 5755-block  0
call    0 returned 1
        -: 5756:
        -: 5757:  // Do not run any test if the --help flag was specified.
       1*: 5758:  if (g_help_flag) return true;
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5758-block  0
        -: 5759:
        -: 5760:  // Repeats the call to the post-flag parsing initialization in case the
        -: 5761:  // user didn't call InitGoogleTest.
        1: 5762:  PostFlagParsingInit();
        1: 5762-block  0
call    0 returned 1
        -: 5763:
        -: 5764:  // Even if sharding is not on, test runners may want to use the
        -: 5765:  // GTEST_SHARD_STATUS_FILE to query whether the test supports the sharding
        -: 5766:  // protocol.
        1: 5767:  internal::WriteToShardStatusFileIfNeeded();
call    0 returned 1
        -: 5768:
        -: 5769:  // True if and only if we are in a subprocess for running a thread-safe-style
        -: 5770:  // death test.
        1: 5771:  bool in_subprocess_for_death_test = false;
        -: 5772:
        -: 5773:#if GTEST_HAS_DEATH_TEST
        1: 5774:  in_subprocess_for_death_test =
        1: 5775:      (internal_run_death_test_flag_.get() != nullptr);
call    0 returned 1
        -: 5776:#if defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 5777:  if (in_subprocess_for_death_test) {
        -: 5778:    GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_();
        -: 5779:  }
        -: 5780:#endif  // defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 5781:#endif  // GTEST_HAS_DEATH_TEST
        -: 5782:
        1: 5783:  const bool should_shard = ShouldShard(kTestTotalShards, kTestShardIndex,
call    0 returned 1
        -: 5784:                                        in_subprocess_for_death_test);
        -: 5785:
        -: 5786:  // Compares the full test names with the filter to decide which
        -: 5787:  // tests to run.
        -: 5788:  const bool has_tests_to_run =
       1*: 5789:      FilterTests(should_shard ? HONOR_SHARDING_PROTOCOL
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5789-block  0
        1: 5789-block  1
        1: 5789-block  2
call    2 returned 1
        1: 5790:                               : IGNORE_SHARDING_PROTOCOL) > 0;
        -: 5791:
        -: 5792:  // Lists the tests and exits if the --gtest_list_tests flag was specified.
        1: 5793:  if (GTEST_FLAG_GET(list_tests)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 5794:    // This must be called *after* FilterTests() has been called.
    #####: 5795:    ListTestsMatchingFilter();
    %%%%%: 5795-block  0
call    0 never executed
    #####: 5796:    return true;
        -: 5797:  }
        -: 5798:
        1: 5799:  random_seed_ = GetRandomSeedFromFlag(GTEST_FLAG_GET(random_seed));
        1: 5799-block  0
call    0 returned 1
        -: 5800:
        -: 5801:  // True if and only if at least one test has failed.
        1: 5802:  bool failed = false;
        -: 5803:
        1: 5804:  TestEventListener* repeater = listeners()->repeater();
call    0 returned 1
call    1 returned 1
        -: 5805:
        1: 5806:  start_timestamp_ = GetTimeInMillis();
call    0 returned 1
        1: 5807:  repeater->OnTestProgramStart(*parent_);
call    0 returned 1
        -: 5808:
        -: 5809:  // How many times to repeat the tests?  We don't want to repeat them
        -: 5810:  // when we are inside the subprocess of a death test.
       1*: 5811:  const int repeat = in_subprocess_for_death_test ? 1 : GTEST_FLAG_GET(repeat);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5811-block  0
        1: 5811-block  1
        -: 5812:
        -: 5813:  // Repeats forever if the repeat count is negative.
        1: 5814:  const bool gtest_repeat_forever = repeat < 0;
        -: 5815:
        -: 5816:  // Should test environments be set up and torn down for each repeat, or only
        -: 5817:  // set up on the first and torn down on the last iteration? If there is no
        -: 5818:  // "last" iteration because the tests will repeat forever, always recreate the
        -: 5819:  // environments to avoid leaks in case one of the environments is using
        -: 5820:  // resources that are external to this process. Without this check there would
        -: 5821:  // be no way to clean up those external resources automatically.
        1: 5822:  const bool recreate_environments_when_repeating =
       1*: 5823:      GTEST_FLAG_GET(recreate_environments_when_repeating) ||
        1: 5823-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5823-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%: 5823-block  2
        1: 5823-block  3
        -: 5824:      gtest_repeat_forever;
        -: 5825:
        2: 5826:  for (int i = 0; gtest_repeat_forever || i != repeat; i++) {
        1: 5826-block  0
        2: 5826-block  1
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 5826-block  2
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1: 5826-block  3
        -: 5827:    // We want to preserve failures generated by ad-hoc test
        -: 5828:    // assertions executed before RUN_ALL_TESTS().
        1: 5829:    ClearNonAdHocTestResult();
        1: 5829-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5830:
        1: 5831:    Timer timer;
        1: 5831-block  0
call    0 returned 1
        -: 5832:
        -: 5833:    // Shuffles test suites and tests if requested.
        1: 5834:    if (has_tests_to_run && GTEST_FLAG_GET(shuffle)) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5834-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 5835:      random()->Reseed(static_cast<uint32_t>(random_seed_));
    %%%%%: 5835-block  0
call    0 never executed
call    1 never executed
        -: 5836:      // This should be done before calling OnTestIterationStart(),
        -: 5837:      // such that a test event listener can see the actual test order
        -: 5838:      // in the event.
    #####: 5839:      ShuffleTests();
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5840:    }
        -: 5841:
        -: 5842:    // Tells the unit test event listeners that the tests are about to start.
        1: 5843:    repeater->OnTestIterationStart(*parent_, i);
        1: 5843-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5844:
        -: 5845:    // Runs each test suite if there is at least one test to run.
        1: 5846:    if (has_tests_to_run) {
        1: 5846-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 5847:      // Sets up all environments beforehand. If test environments aren't
        -: 5848:      // recreated for each iteration, only do so on the first iteration.
       1*: 5849:      if (i == 0 || recreate_environments_when_repeating) {
        1: 5849-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5849-block  1
branch  2 never executed
branch  3 never executed
        1: 5850:        repeater->OnEnvironmentsSetUpStart(*parent_);
        1: 5850-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5851:        ForEach(environments_, SetUpEnvironment);
        1: 5851-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5852:        repeater->OnEnvironmentsSetUpEnd(*parent_);
        1: 5852-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5853:      }
        -: 5854:
        -: 5855:      // Runs the tests only if there was no fatal failure or skip triggered
        -: 5856:      // during global set-up.
        1: 5857:      if (Test::IsSkipped()) {
        1: 5857-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5857-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
        -: 5858:        // Emit diagnostics when global set-up calls skip, as it will not be
        -: 5859:        // emitted by default.
        -: 5860:        TestResult& test_result =
    #####: 5861:            *internal::GetUnitTestImpl()->current_test_result();
    %%%%%: 5861-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5861-block  1
call    3 never executed
    #####: 5862:        for (int j = 0; j < test_result.total_part_count(); ++j) {
    %%%%%: 5862-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5862-block  1
        -: 5863:          const TestPartResult& test_part_result =
    #####: 5864:              test_result.GetTestPartResult(j);
    %%%%%: 5864-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5865:          if (test_part_result.type() == TestPartResult::kSkip) {
    %%%%%: 5865-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5866:            const std::string& result = test_part_result.message();
    %%%%%: 5866-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 5866-block  1
call    5 never executed
    %%%%%: 5866-block  2
call    6 never executed
    $$$$$: 5866-block  3
call    7 never executed
    $$$$$: 5866-block  4
    $$$$$: 5866-block  5
call    8 never executed
    #####: 5867:            printf("%s\n", result.c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 5868:          }
        -: 5869:        }
    #####: 5870:        fflush(stdout);
    %%%%%: 5870-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        1: 5871:      } else if (!Test::HasFatalFailure()) {
        1: 5871-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5871-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        2: 5872:        for (int test_index = 0; test_index < total_test_suite_count();
        1: 5872-block  0
        2: 5872-block  1
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1: 5872-block  2
        -: 5873:             test_index++) {
        1: 5874:          GetMutableSuiteCase(test_index)->Run();
        1: 5874-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5874-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
       1*: 5875:          if (GTEST_FLAG_GET(fail_fast) &&
        1: 5875-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5875-block  1
        1: 5875-block  2
        1: 5875-block  3
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 5876:              GetMutableSuiteCase(test_index)->Failed()) {
    %%%%%: 5876-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5876-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5876-block  2
branch  6 never executed
branch  7 never executed
    #####: 5877:            for (int j = test_index + 1; j < total_test_suite_count(); j++) {
    %%%%%: 5877-block  0
    %%%%%: 5877-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5877-block  2
    #####: 5878:              GetMutableSuiteCase(j)->Skip();
    %%%%%: 5878-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5878-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5879:            }
    #####: 5880:            break;
    %%%%%: 5880-block  0
        -: 5881:          }
        -: 5882:        }
    #####: 5883:      } else if (Test::HasFatalFailure()) {
    %%%%%: 5883-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5883-block  1
branch  3 never executed
branch  4 never executed
        -: 5884:        // If there was a fatal failure during the global setup then we know we
        -: 5885:        // aren't going to run any tests. Explicitly mark all of the tests as
        -: 5886:        // skipped to make this obvious in the output.
    #####: 5887:        for (int test_index = 0; test_index < total_test_suite_count();
    %%%%%: 5887-block  0
    %%%%%: 5887-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5887-block  2
        -: 5888:             test_index++) {
    #####: 5889:          GetMutableSuiteCase(test_index)->Skip();
    %%%%%: 5889-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5889-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5890:        }
        -: 5891:      }
        -: 5892:
        -: 5893:      // Tears down all environments in reverse order afterwards. If test
        -: 5894:      // environments aren't recreated for each iteration, only do so on the
        -: 5895:      // last iteration.
       1*: 5896:      if (i == repeat - 1 || recreate_environments_when_repeating) {
        1: 5896-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5896-block  1
branch  2 never executed
branch  3 never executed
        1: 5897:        repeater->OnEnvironmentsTearDownStart(*parent_);
        1: 5897-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5898:        std::for_each(environments_.rbegin(), environments_.rend(),
        1: 5898-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$: 5898-block  1
    $$$$$: 5898-block  2
        -: 5899:                      TearDownEnvironment);
        1: 5900:        repeater->OnEnvironmentsTearDownEnd(*parent_);
        1: 5900-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5901:      }
        -: 5902:    }
        -: 5903:
        1: 5904:    elapsed_time_ = timer.Elapsed();
        1: 5904-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5905:
        -: 5906:    // Tells the unit test event listener that the tests have just finished.
        1: 5907:    repeater->OnTestIterationEnd(*parent_, i);
        1: 5907-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -: 5908:
        -: 5909:    // Gets the result and clears it.
        1: 5910:    if (!Passed()) {
        1: 5910-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5910-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 5911:      failed = true;
    %%%%%: 5911-block  0
        -: 5912:    }
        -: 5913:
        -: 5914:    // Restores the original test order after the iteration.  This
        -: 5915:    // allows the user to quickly repro a failure that happens in the
        -: 5916:    // N-th iteration without repeating the first (N - 1) iterations.
        -: 5917:    // This is not enclosed in "if (GTEST_FLAG(shuffle)) { ... }", in
        -: 5918:    // case the user somehow changes the value of the flag somewhere
        -: 5919:    // (it's always safe to unshuffle the tests).
        1: 5920:    UnshuffleTests();
        1: 5920-block  0
call    0 returned 1
        -: 5921:
        1: 5922:    if (GTEST_FLAG_GET(shuffle)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 5923:      // Picks a new random seed for each iteration.
    #####: 5924:      random_seed_ = GetNextRandomSeed(random_seed_);
    %%%%%: 5924-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5924-block  1
        -: 5925:    }
        -: 5926:  }
        -: 5927:
        1: 5928:  repeater->OnTestProgramEnd(*parent_);
        1: 5928-block  0
call    0 returned 1
        -: 5929:
        1: 5930:  if (!gtest_is_initialized_before_run_all_tests) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5931:    ColoredPrintf(
    %%%%%: 5931-block  0
call    0 never executed
        -: 5932:        GTestColor::kRed,
        -: 5933:        "\nIMPORTANT NOTICE - DO NOT IGNORE:\n"
        -: 5934:        "This test program did NOT call " GTEST_INIT_GOOGLE_TEST_NAME_
        -: 5935:        "() before calling RUN_ALL_TESTS(). This is INVALID. Soon " GTEST_NAME_
        -: 5936:        " will start to enforce the valid usage. "
        -: 5937:        "Please fix it ASAP, or IT WILL START TO FAIL.\n");  // NOLINT
        -: 5938:#if GTEST_FOR_GOOGLE_
        -: 5939:    ColoredPrintf(GTestColor::kRed,
        -: 5940:                  "For more details, see http://wiki/Main/ValidGUnitMain.\n");
        -: 5941:#endif  // GTEST_FOR_GOOGLE_
        -: 5942:  }
        -: 5943:
        1: 5944:  return !failed;
        1: 5944-block  0
        -: 5945:}
        -: 5946:
        -: 5947:// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file
        -: 5948:// if the variable is present. If a file already exists at this location, this
        -: 5949:// function will write over it. If the variable is present, but the file cannot
        -: 5950:// be created, prints an error and exits.
function _ZN7testing8internal30WriteToShardStatusFileIfNeededEv called 1 returned 100% blocks executed 33%
        1: 5951:void WriteToShardStatusFileIfNeeded() {
        1: 5952:  const char* const test_shard_file = posix::GetEnv(kTestShardStatusFile);
        1: 5952-block  0
call    0 returned 1
        1: 5953:  if (test_shard_file != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5954:    FILE* const file = posix::FOpen(test_shard_file, "w");
    %%%%%: 5954-block  0
call    0 never executed
    #####: 5955:    if (file == nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 5956:      ColoredPrintf(GTestColor::kRed,
    %%%%%: 5956-block  0
call    0 never executed
        -: 5957:                    "Could not write to the test shard status file \"%s\" "
        -: 5958:                    "specified by the %s environment variable.\n",
        -: 5959:                    test_shard_file, kTestShardStatusFile);
    #####: 5960:      fflush(stdout);
call    0 never executed
    #####: 5961:      exit(EXIT_FAILURE);
call    0 never executed
        -: 5962:    }
    #####: 5963:    fclose(file);
    %%%%%: 5963-block  0
call    0 never executed
        -: 5964:  }
        1: 5965:}
        -: 5966:
        -: 5967:// Checks whether sharding is enabled by examining the relevant
        -: 5968:// environment variable values. If the variables are present,
        -: 5969:// but inconsistent (i.e., shard_index >= total_shards), prints
        -: 5970:// an error and exits. If in_subprocess_for_death_test, sharding is
        -: 5971:// disabled because it must only be applied to the original test
        -: 5972:// process. Otherwise, we could filter out death tests we intended to execute.
function _ZN7testing8internal11ShouldShardEPKcS2_b called 2 returned 100% blocks executed 9%
        2: 5973:bool ShouldShard(const char* total_shards_env, const char* shard_index_env,
        -: 5974:                 bool in_subprocess_for_death_test) {
        2: 5975:  if (in_subprocess_for_death_test) {
        2: 5975-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 5976:    return false;
    %%%%%: 5976-block  0
        -: 5977:  }
        -: 5978:
        2: 5979:  const int32_t total_shards = Int32FromEnvOrDie(total_shards_env, -1);
        2: 5979-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 5980:  const int32_t shard_index = Int32FromEnvOrDie(shard_index_env, -1);
        2: 5980-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -: 5981:
        2: 5982:  if (total_shards == -1 && shard_index == -1) {
        2: 5982-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 5982-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2: 5983:    return false;
        2: 5983-block  0
    #####: 5984:  } else if (total_shards == -1 && shard_index != -1) {
    %%%%%: 5984-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5984-block  1
branch  2 never executed
branch  3 never executed
    #####: 5985:    const Message msg = Message() << "Invalid environment variables: you have "
    %%%%%: 5985-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5985-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 5985-block  2
    #####: 5986:                                  << kTestShardIndex << " = " << shard_index
    %%%%%: 5986-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5986-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5986-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5987:                                  << ", but have left " << kTestTotalShards
    %%%%%: 5987-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5987-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5988:                                  << " unset.\n";
    %%%%%: 5988-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5988-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 5988-block  2
call    6 never executed
    #####: 5989:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5989-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5989-block  1
call    7 never executed
    $$$$$: 5989-block  2
call    8 never executed
    $$$$$: 5989-block  3
    #####: 5990:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5991:    exit(EXIT_FAILURE);
    %%%%%: 5991-block  0
call    0 never executed
    #####: 5992:  } else if (total_shards != -1 && shard_index == -1) {
    %%%%%: 5992-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5992-block  1
branch  2 never executed
branch  3 never executed
    #####: 5993:    const Message msg = Message()
    %%%%%: 5993-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5993-block  1
    #####: 5994:                        << "Invalid environment variables: you have "
    %%%%%: 5994-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5995:                        << kTestTotalShards << " = " << total_shards
    %%%%%: 5995-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5995-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5995-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5996:                        << ", but have left " << kTestShardIndex << " unset.\n";
    %%%%%: 5996-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5996-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5996-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5996-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 5996-block  4
call   12 never executed
    #####: 5997:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5997-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5997-block  1
call    7 never executed
    $$$$$: 5997-block  2
call    8 never executed
    $$$$$: 5997-block  3
    #####: 5998:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5999:    exit(EXIT_FAILURE);
    %%%%%: 5999-block  0
call    0 never executed
    #####: 6000:  } else if (shard_index < 0 || shard_index >= total_shards) {
    %%%%%: 6000-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6000-block  1
branch  2 never executed
branch  3 never executed
        -: 6001:    const Message msg =
    #####: 6002:        Message() << "Invalid environment variables: we require 0 <= "
    %%%%%: 6002-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6002-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 6002-block  2
    #####: 6003:                  << kTestShardIndex << " < " << kTestTotalShards
    %%%%%: 6003-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6003-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6003-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 6004:                  << ", but you have " << kTestShardIndex << "=" << shard_index
    %%%%%: 6004-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6004-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6004-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6004-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 6005:                  << ", " << kTestTotalShards << "=" << total_shards << ".\n";
    %%%%%: 6005-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6005-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6005-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6005-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 6005-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 6005-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    $$$$$: 6005-block  6
call   18 never executed
    #####: 6006:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6006-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6006-block  1
call    7 never executed
    $$$$$: 6006-block  2
call    8 never executed
    $$$$$: 6006-block  3
    #####: 6007:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6008:    exit(EXIT_FAILURE);
    %%%%%: 6008-block  0
call    0 never executed
        -: 6009:  }
        -: 6010:
    #####: 6011:  return total_shards > 1;
    %%%%%: 6011-block  0
        -: 6012:}
        -: 6013:
        -: 6014:// Parses the environment variable var as an Int32. If it is unset,
        -: 6015:// returns default_val. If it is not an Int32, prints an error
        -: 6016:// and aborts.
function _ZN7testing8internal17Int32FromEnvOrDieEPKci called 4 returned 100% blocks executed 35%
        4: 6017:int32_t Int32FromEnvOrDie(const char* var, int32_t default_val) {
        4: 6018:  const char* str_val = posix::GetEnv(var);
        4: 6018-block  0
call    0 returned 4
        4: 6019:  if (str_val == nullptr) {
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 6020:    return default_val;
        4: 6020-block  0
        -: 6021:  }
        -: 6022:
        -: 6023:  int32_t result;
    #####: 6024:  if (!ParseInt32(Message() << "The value of environment variable " << var,
    %%%%%: 6024-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6024-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6024-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 6024-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 6024-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$: 6024-block  5
call   15 never executed
    $$$$$: 6024-block  6
        -: 6025:                  str_val, &result)) {
    #####: 6026:    exit(EXIT_FAILURE);
    %%%%%: 6026-block  0
call    0 never executed
        -: 6027:  }
    #####: 6028:  return result;
    %%%%%: 6028-block  0
        -: 6029:}
        -: 6030:
        -: 6031:// Given the total number of shards, the shard index, and the test id,
        -: 6032:// returns true if and only if the test should be run on this shard. The test id
        -: 6033:// is some arbitrary but unique non-negative integer assigned to each test
        -: 6034:// method. Assumes that 0 <= shard_index < total_shards.
function _ZN7testing8internal20ShouldRunTestOnShardEiii called 0 returned 0% blocks executed 0%
    #####: 6035:bool ShouldRunTestOnShard(int total_shards, int shard_index, int test_id) {
    #####: 6036:  return (test_id % total_shards) == shard_index;
    %%%%%: 6036-block  0
        -: 6037:}
        -: 6038:
        -: 6039:// Compares the name of each test with the user-specified filter to
        -: 6040:// decide whether the test should be run, then records the result in
        -: 6041:// each TestSuite and TestInfo object.
        -: 6042:// If shard_tests == true, further filters tests based on sharding
        -: 6043:// variables in the environment - see
        -: 6044:// https://github.com/google/googletest/blob/master/googletest/docs/advanced.md
        -: 6045:// . Returns the number of tests that should run.
function _ZN7testing8internal12UnitTestImpl11FilterTestsENS1_18ReactionToShardingE called 1 returned 100% blocks executed 63%
        1: 6046:int UnitTestImpl::FilterTests(ReactionToSharding shard_tests) {
        -: 6047:  const int32_t total_shards = shard_tests == HONOR_SHARDING_PROTOCOL
       1*: 6048:                                   ? Int32FromEnvOrDie(kTestTotalShards, -1)
        1: 6048-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6048-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6048-block  2
        1: 6048-block  3
        1: 6049:                                   : -1;
        -: 6050:  const int32_t shard_index = shard_tests == HONOR_SHARDING_PROTOCOL
       1*: 6051:                                  ? Int32FromEnvOrDie(kTestShardIndex, -1)
        1: 6051-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6051-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6051-block  2
        1: 6051-block  3
        1: 6052:                                  : -1;
        -: 6053:
        -: 6054:  const PositiveAndNegativeUnitTestFilter gtest_flag_filter(
        2: 6055:      GTEST_FLAG_GET(filter));
        1: 6055-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$: 6055-block  1
call    4 never executed
        2: 6056:  const UnitTestFilter disable_test_filter(kDisableTestFilter);
        1: 6056-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 6056-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
    $$$$$: 6056-block  2
    $$$$$: 6056-block  3
    $$$$$: 6056-block  4
call    8 never executed
        -: 6057:  // num_runnable_tests are the number of tests that will
        -: 6058:  // run across all shards (i.e., match filter and are not disabled).
        -: 6059:  // num_selected_tests are the number of tests to be run on
        -: 6060:  // this shard.
        1: 6061:  int num_runnable_tests = 0;
        1: 6062:  int num_selected_tests = 0;
        2: 6063:  for (auto* test_suite : test_suites_) {
call    0 returned 1
call    1 returned 1
        2: 6063-block  0
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 6063-block  1
call    5 returned 1
call    6 returned 1
        2: 6064:    const std::string& test_suite_name = test_suite->name();
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1: 6064-block  0
call    5 returned 1
        1: 6064-block  1
call    6 returned 1
    $$$$$: 6064-block  2
call    7 never executed
    $$$$$: 6064-block  3
    $$$$$: 6064-block  4
call    8 never executed
        1: 6065:    test_suite->set_should_run(false);
call    0 returned 1
        -: 6066:
        6: 6067:    for (size_t j = 0; j < test_suite->test_info_list().size(); j++) {
        6: 6067-block  0
call    0 returned 6
call    1 returned 6
branch  2 taken 5 (fallthrough)
branch  3 taken 1
        5: 6068:      TestInfo* const test_info = test_suite->test_info_list()[j];
        5: 6068-block  0
call    0 returned 5
call    1 returned 5
       10: 6069:      const std::string test_name(test_info->name());
call    0 returned 5
call    1 returned 5
call    2 returned 5
branch  3 taken 5 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 5
    $$$$$: 6069-block  0
    $$$$$: 6069-block  1
call    6 never executed
        -: 6070:      // A test is disabled if test suite name or test name matches
        -: 6071:      // kDisableTestFilter.
        -: 6072:      const bool is_disabled =
      10*: 6073:          disable_test_filter.MatchesName(test_suite_name) ||
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5: 6073-block  0
branch  3 taken 5 (fallthrough)
branch  4 taken 0
    %%%%%: 6073-block  1
        5: 6073-block  2
        5: 6074:          disable_test_filter.MatchesName(test_name);
        5: 6074-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5: 6074-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 5
        5: 6075:      test_info->is_disabled_ = is_disabled;
        -: 6076:
        -: 6077:      const bool matches_filter =
        5: 6078:          gtest_flag_filter.MatchesTest(test_suite_name, test_name);
        5: 6078-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5: 6079:      test_info->matches_filter_ = matches_filter;
        -: 6080:
        5: 6081:      const bool is_runnable =
       5*: 6082:          (GTEST_FLAG_GET(also_run_disabled_tests) || !is_disabled) &&
        5: 6082-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5: 6082-block  1
branch  2 taken 5 (fallthrough)
branch  3 taken 0
        5: 6082-block  2
branch  4 taken 5 (fallthrough)
branch  5 taken 0
        5: 6082-block  3
    %%%%%: 6082-block  4
        -: 6083:          matches_filter;
        -: 6084:
        -: 6085:      const bool is_in_another_shard =
       5*: 6086:          shard_tests != IGNORE_SHARDING_PROTOCOL &&
        5: 6086-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
    %%%%%: 6086-block  1
        5: 6086-block  2
    #####: 6087:          !ShouldRunTestOnShard(total_shards, shard_index, num_runnable_tests);
    %%%%%: 6087-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        5: 6088:      test_info->is_in_another_shard_ = is_in_another_shard;
       5*: 6089:      const bool is_selected = is_runnable && !is_in_another_shard;
        5: 6089-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 0
        5: 6089-block  1
branch  2 taken 5 (fallthrough)
branch  3 taken 0
        5: 6089-block  2
    %%%%%: 6089-block  3
        -: 6090:
        5: 6091:      num_runnable_tests += is_runnable;
        5: 6092:      num_selected_tests += is_selected;
        -: 6093:
        5: 6094:      test_info->should_run_ = is_selected;
       5*: 6095:      test_suite->set_should_run(test_suite->should_run() || is_selected);
        5: 6095-block  0
call    0 returned 5
branch  1 taken 1 (fallthrough)
branch  2 taken 4
        1: 6095-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        5: 6095-block  2
    %%%%%: 6095-block  3
        5: 6095-block  4
call    5 returned 5
        -: 6096:    }
        -: 6097:  }
        2: 6098:  return num_selected_tests;
        1: 6098-block  0
call    0 returned 1
        1: 6098-block  1
        -: 6099:}
        -: 6100:
        -: 6101:// Prints the given C-string on a single line by replacing all '\n'
        -: 6102:// characters with string "\\n".  If the output takes more than
        -: 6103:// max_length characters, only prints the first max_length characters
        -: 6104:// and "...".
function _ZN7testing8internalL14PrintOnOneLineEPKci called 0 returned 0% blocks executed 0%
    #####: 6105:static void PrintOnOneLine(const char* str, int max_length) {
    #####: 6106:  if (str != nullptr) {
    %%%%%: 6106-block  0
branch  0 never executed
branch  1 never executed
    #####: 6107:    for (int i = 0; *str != '\0'; ++str) {
    %%%%%: 6107-block  0
    %%%%%: 6107-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 6107-block  2
    #####: 6108:      if (i >= max_length) {
    %%%%%: 6108-block  0
branch  0 never executed
branch  1 never executed
    #####: 6109:        printf("...");
    %%%%%: 6109-block  0
call    0 never executed
    #####: 6110:        break;
        -: 6111:      }
    #####: 6112:      if (*str == '\n') {
    %%%%%: 6112-block  0
branch  0 never executed
branch  1 never executed
    #####: 6113:        printf("\\n");
    %%%%%: 6113-block  0
call    0 never executed
    #####: 6114:        i += 2;
        -: 6115:      } else {
    #####: 6116:        printf("%c", *str);
    %%%%%: 6116-block  0
call    0 never executed
    #####: 6117:        ++i;
        -: 6118:      }
        -: 6119:    }
        -: 6120:  }
    #####: 6121:}
        -: 6122:
        -: 6123:// Prints the names of the tests matching the user-specified filter flag.
function _ZN7testing8internal12UnitTestImpl23ListTestsMatchingFilterEv called 0 returned 0% blocks executed 0%
    #####: 6124:void UnitTestImpl::ListTestsMatchingFilter() {
        -: 6125:  // Print at most this many characters for each type/value parameter.
    #####: 6126:  const int kMaxParamLength = 250;
        -: 6127:
    #####: 6128:  for (auto* test_suite : test_suites_) {
    %%%%%: 6128-block  0
call    0 never executed
call    1 never executed
    %%%%%: 6128-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6128-block  2
call    5 never executed
    %%%%%: 6128-block  3
call    6 never executed
    #####: 6129:    bool printed_test_suite_name = false;
        -: 6130:
    #####: 6131:    for (size_t j = 0; j < test_suite->test_info_list().size(); j++) {
    %%%%%: 6131-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6131-block  1
    #####: 6132:      const TestInfo* const test_info = test_suite->test_info_list()[j];
    %%%%%: 6132-block  0
call    0 never executed
call    1 never executed
    #####: 6133:      if (test_info->matches_filter_) {
branch  0 never executed
branch  1 never executed
    #####: 6134:        if (!printed_test_suite_name) {
    %%%%%: 6134-block  0
branch  0 never executed
branch  1 never executed
    #####: 6135:          printed_test_suite_name = true;
    #####: 6136:          printf("%s.", test_suite->name());
    %%%%%: 6136-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6137:          if (test_suite->type_param() != nullptr) {
    %%%%%: 6137-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6138:            printf("  # %s = ", kTypeParamLabel);
    %%%%%: 6138-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6139:            // We print the type parameter on a single line to make
        -: 6140:            // the output easy to parse by a program.
    #####: 6141:            PrintOnOneLine(test_suite->type_param(), kMaxParamLength);
    %%%%%: 6141-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6142:          }
    #####: 6143:          printf("\n");
    %%%%%: 6143-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6144:        }
    #####: 6145:        printf("  %s", test_info->name());
    %%%%%: 6145-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6146:        if (test_info->value_param() != nullptr) {
    %%%%%: 6146-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6147:          printf("  # %s = ", kValueParamLabel);
    %%%%%: 6147-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6148:          // We print the value parameter on a single line to make the
        -: 6149:          // output easy to parse by a program.
    #####: 6150:          PrintOnOneLine(test_info->value_param(), kMaxParamLength);
    %%%%%: 6150-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6151:        }
    #####: 6152:        printf("\n");
    %%%%%: 6152-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6153:      }
        -: 6154:    }
        -: 6155:  }
    #####: 6156:  fflush(stdout);
    %%%%%: 6156-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6157:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
    %%%%%: 6157-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6157-block  1
call    3 never executed
    $$$$$: 6157-block  2
call    4 never executed
    #####: 6158:  if (output_format == "xml" || output_format == "json") {
    %%%%%: 6158-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6158-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6158-block  2
    %%%%%: 6158-block  3
    %%%%%: 6158-block  4
branch  6 never executed
branch  7 never executed
    #####: 6159:    FILE* fileout = OpenFileForWriting(
    %%%%%: 6159-block  0
call    0 never executed
    %%%%%: 6159-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6159-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6159-block  3
call    8 never executed
    $$$$$: 6159-block  4
call    9 never executed
    $$$$$: 6159-block  5
    $$$$$: 6159-block  6
call   10 never executed
    $$$$$: 6159-block  7
    #####: 6160:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    $$$$$: 6160-block  0
call    5 never executed
    $$$$$: 6160-block  1
    #####: 6161:    std::stringstream stream;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6161-block  0
call    3 never executed
    $$$$$: 6161-block  1
call    4 never executed
    #####: 6162:    if (output_format == "xml") {
    %%%%%: 6162-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6163:      XmlUnitTestResultPrinter(
    %%%%%: 6163-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6163-block  1
call    4 never executed
    $$$$$: 6163-block  2
call    5 never executed
    $$$$$: 6163-block  3
    #####: 6164:          UnitTestOptions::GetAbsolutePathToOutputFile().c_str())
    %%%%%: 6164-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 6164-block  1
call    4 never executed
    $$$$$: 6164-block  2
    #####: 6165:          .PrintXmlTestsList(&stream, test_suites_);
    %%%%%: 6165-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6166:    } else if (output_format == "json") {
    %%%%%: 6166-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6167:      JsonUnitTestResultPrinter(
    %%%%%: 6167-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6167-block  1
call    4 never executed
    $$$$$: 6167-block  2
call    5 never executed
    $$$$$: 6167-block  3
    #####: 6168:          UnitTestOptions::GetAbsolutePathToOutputFile().c_str())
    %%%%%: 6168-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 6168-block  1
call    4 never executed
    $$$$$: 6168-block  2
    #####: 6169:          .PrintJsonTestList(&stream, test_suites_);
    %%%%%: 6169-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6170:    }
    #####: 6171:    fprintf(fileout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 6171-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6171-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6171-block  2
call    7 never executed
    $$$$$: 6171-block  3
call    8 never executed
    $$$$$: 6171-block  4
    #####: 6172:    fclose(fileout);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6173:  }
    #####: 6174:}
        -: 6175:
        -: 6176:// Sets the OS stack trace getter.
        -: 6177://
        -: 6178:// Does nothing if the input and the current OS stack trace getter are
        -: 6179:// the same; otherwise, deletes the old getter and makes the input the
        -: 6180:// current getter.
function _ZN7testing8internal12UnitTestImpl25set_os_stack_trace_getterEPNS0_27OsStackTraceGetterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 6181:void UnitTestImpl::set_os_stack_trace_getter(
        -: 6182:    OsStackTraceGetterInterface* getter) {
    #####: 6183:  if (os_stack_trace_getter_ != getter) {
    %%%%%: 6183-block  0
branch  0 never executed
branch  1 never executed
    #####: 6184:    delete os_stack_trace_getter_;
    %%%%%: 6184-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6184-block  1
call    2 never executed
    #####: 6185:    os_stack_trace_getter_ = getter;
    %%%%%: 6185-block  0
        -: 6186:  }
    #####: 6187:}
        -: 6188:
        -: 6189:// Returns the current OS stack trace getter if it is not NULL;
        -: 6190:// otherwise, creates an OsStackTraceGetter, makes it the current
        -: 6191:// getter, and returns it.
function _ZN7testing8internal12UnitTestImpl21os_stack_trace_getterEv called 27 returned 100% blocks executed 100%
       27: 6192:OsStackTraceGetterInterface* UnitTestImpl::os_stack_trace_getter() {
       27: 6193:  if (os_stack_trace_getter_ == nullptr) {
       27: 6193-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        -: 6194:#ifdef GTEST_OS_STACK_TRACE_GETTER_
        -: 6195:    os_stack_trace_getter_ = new GTEST_OS_STACK_TRACE_GETTER_;
        -: 6196:#else
        1: 6197:    os_stack_trace_getter_ = new OsStackTraceGetter;
        1: 6197-block  0
call    0 returned 1
call    1 returned 1
        -: 6198:#endif  // GTEST_OS_STACK_TRACE_GETTER_
        -: 6199:  }
        -: 6200:
       27: 6201:  return os_stack_trace_getter_;
       27: 6201-block  0
        -: 6202:}
        -: 6203:
        -: 6204:// Returns the most specific TestResult currently running.
function _ZN7testing8internal12UnitTestImpl19current_test_resultEv called 22 returned 100% blocks executed 83%
       22: 6205:TestResult* UnitTestImpl::current_test_result() {
       22: 6206:  if (current_test_info_ != nullptr) {
       22: 6206-block  0
branch  0 taken 20 (fallthrough)
branch  1 taken 2
       20: 6207:    return &current_test_info_->result_;
       20: 6207-block  0
        -: 6208:  }
        2: 6209:  if (current_test_suite_ != nullptr) {
        2: 6209-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 6210:    return &current_test_suite_->ad_hoc_test_result_;
    %%%%%: 6210-block  0
        -: 6211:  }
        2: 6212:  return &ad_hoc_test_result_;
        2: 6212-block  0
        -: 6213:}
        -: 6214:
        -: 6215:// Shuffles all test suites, and the tests within each test suite,
        -: 6216:// making sure that death tests are still run first.
function _ZN7testing8internal12UnitTestImpl12ShuffleTestsEv called 0 returned 0% blocks executed 0%
    #####: 6217:void UnitTestImpl::ShuffleTests() {
        -: 6218:  // Shuffles the death test suites.
    #####: 6219:  ShuffleRange(random(), 0, last_death_test_suite_ + 1, &test_suite_indices_);
    %%%%%: 6219-block  0
call    0 never executed
call    1 never executed
        -: 6220:
        -: 6221:  // Shuffles the non-death test suites.
    #####: 6222:  ShuffleRange(random(), last_death_test_suite_ + 1,
call    0 never executed
call    1 never executed
    #####: 6223:               static_cast<int>(test_suites_.size()), &test_suite_indices_);
call    0 never executed
        -: 6224:
        -: 6225:  // Shuffles the tests inside each test suite.
    #####: 6226:  for (auto& test_suite : test_suites_) {
call    0 never executed
call    1 never executed
    %%%%%: 6226-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6226-block  1
call    5 never executed
    %%%%%: 6226-block  2
call    6 never executed
    #####: 6227:    test_suite->ShuffleTests(random());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6228:  }
    #####: 6229:}
    %%%%%: 6229-block  0
        -: 6230:
        -: 6231:// Restores the test suites and tests to their order before the first shuffle.
function _ZN7testing8internal12UnitTestImpl14UnshuffleTestsEv called 1 returned 100% blocks executed 100%
        1: 6232:void UnitTestImpl::UnshuffleTests() {
        2: 6233:  for (size_t i = 0; i < test_suites_.size(); i++) {
        1: 6233-block  0
        2: 6233-block  1
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        -: 6234:    // Unshuffles the tests in each test suite.
        1: 6235:    test_suites_[i]->UnshuffleTests();
        1: 6235-block  0
call    0 returned 1
call    1 returned 1
        -: 6236:    // Resets the index of each test suite.
        1: 6237:    test_suite_indices_[i] = static_cast<int>(i);
call    0 returned 1
        -: 6238:  }
        1: 6239:}
        -: 6240:
        -: 6241:// Returns the current OS stack trace as an std::string.
        -: 6242://
        -: 6243:// The maximum number of stack frames to be included is specified by
        -: 6244:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 6245:// specifies the number of top frames to be skipped, which doesn't
        -: 6246:// count against the number of frames to be included.
        -: 6247://
        -: 6248:// For example, if Foo() calls Bar(), which in turn calls
        -: 6249:// GetCurrentOsStackTraceExceptTop(..., 1), Foo() will be included in
        -: 6250:// the trace but Bar() and GetCurrentOsStackTraceExceptTop() won't.
        -: 6251:GTEST_NO_INLINE_ GTEST_NO_TAIL_CALL_ std::string
function _ZN7testing8internal31GetCurrentOsStackTraceExceptTopB5cxx11EPNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 6252:GetCurrentOsStackTraceExceptTop(UnitTest* /*unit_test*/, int skip_count) {
        -: 6253:  // We pass skip_count + 1 to skip this wrapper function in addition
        -: 6254:  // to what the user really wants to skip.
    #####: 6255:  return GetUnitTestImpl()->CurrentOsStackTraceExceptTop(skip_count + 1);
    %%%%%: 6255-block  0
call    0 never executed
call    1 never executed
        -: 6256:}
        -: 6257:
        -: 6258:// Used by the GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_ macro to
        -: 6259:// suppress unreachable code warnings.
        -: 6260:namespace {
        -: 6261:class ClassUniqueToAlwaysTrue {};
        -: 6262:}  // namespace
        -: 6263:
function _ZN7testing8internal6IsTrueEb called 17 returned 100% blocks executed 100%
       17: 6264:bool IsTrue(bool condition) { return condition; }
       17: 6264-block  0
        -: 6265:
function _ZN7testing8internal10AlwaysTrueEv called 6 returned 100% blocks executed 67%
        6: 6266:bool AlwaysTrue() {
        -: 6267:#if GTEST_HAS_EXCEPTIONS
        -: 6268:  // This condition is always false so AlwaysTrue() never actually throws,
        -: 6269:  // but it makes the compiler think that it may throw.
       6*: 6270:  if (IsTrue(false)) throw ClassUniqueToAlwaysTrue();
        6: 6270-block  0
call    0 returned 6
branch  1 taken 0 (fallthrough)
branch  2 taken 6
    %%%%%: 6270-block  1
call    3 never executed
call    4 never executed
        -: 6271:#endif  // GTEST_HAS_EXCEPTIONS
        6: 6272:  return true;
        6: 6272-block  0
        -: 6273:}
        -: 6274:
        -: 6275:// If *pstr starts with the given prefix, modifies *pstr to be right
        -: 6276:// past the prefix and returns true; otherwise leaves *pstr unchanged
        -: 6277:// and returns false.  None of pstr, *pstr, and prefix can be NULL.
function _ZN7testing8internal10SkipPrefixEPKcPS2_ called 0 returned 0% blocks executed 0%
    #####: 6278:bool SkipPrefix(const char* prefix, const char** pstr) {
    #####: 6279:  const size_t prefix_len = strlen(prefix);
    #####: 6280:  if (strncmp(*pstr, prefix, prefix_len) == 0) {
    %%%%%: 6280-block  0
branch  0 never executed
branch  1 never executed
    #####: 6281:    *pstr += prefix_len;
    #####: 6282:    return true;
    %%%%%: 6282-block  0
        -: 6283:  }
    #####: 6284:  return false;
    %%%%%: 6284-block  0
        -: 6285:}
        -: 6286:
        -: 6287:// Parses a string as a command line flag.  The string should have
        -: 6288:// the format "--flag=value".  When def_optional is true, the "=value"
        -: 6289:// part can be omitted.
        -: 6290://
        -: 6291:// Returns the value of the flag, or NULL if the parsing failed.
function _ZN7testing8internalL14ParseFlagValueEPKcS2_b called 0 returned 0% blocks executed 0%
    #####: 6292:static const char* ParseFlagValue(const char* str, const char* flag_name,
        -: 6293:                                  bool def_optional) {
        -: 6294:  // str and flag must not be NULL.
    #####: 6295:  if (str == nullptr || flag_name == nullptr) return nullptr;
    %%%%%: 6295-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6295-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 6295-block  2
        -: 6296:
        -: 6297:  // The flag must start with "--" followed by GTEST_FLAG_PREFIX_.
        -: 6298:  const std::string flag_str =
    #####: 6299:      std::string("--") + GTEST_FLAG_PREFIX_ + flag_name;
    %%%%%: 6299-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6299-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6299-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
    %%%%%: 6299-block  3
call   12 never executed
    $$$$$: 6299-block  4
    $$$$$: 6299-block  5
    $$$$$: 6299-block  6
    #####: 6300:  const size_t flag_len = flag_str.length();
call    0 never executed
    #####: 6301:  if (strncmp(str, flag_str.c_str(), flag_len) != 0) return nullptr;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6301-block  0
        -: 6302:
        -: 6303:  // Skips the flag name.
    #####: 6304:  const char* flag_end = str + flag_len;
        -: 6305:
        -: 6306:  // When def_optional is true, it's OK to not have a "=value" part.
    #####: 6307:  if (def_optional && (flag_end[0] == '\0')) {
    %%%%%: 6307-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6307-block  1
branch  2 never executed
branch  3 never executed
    #####: 6308:    return flag_end;
    %%%%%: 6308-block  0
        -: 6309:  }
        -: 6310:
        -: 6311:  // If def_optional is true and there are more characters after the
        -: 6312:  // flag name, or if def_optional is false, there must be a '=' after
        -: 6313:  // the flag name.
    #####: 6314:  if (flag_end[0] != '=') return nullptr;
    %%%%%: 6314-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6314-block  1
        -: 6315:
        -: 6316:  // Returns the string after "=".
    #####: 6317:  return flag_end + 1;
    %%%%%: 6317-block  0
        -: 6318:}
        -: 6319:
        -: 6320:// Parses a string for a bool flag, in the form of either
        -: 6321:// "--flag=value" or "--flag".
        -: 6322://
        -: 6323:// In the former case, the value is taken as true as long as it does
        -: 6324:// not start with '0', 'f', or 'F'.
        -: 6325://
        -: 6326:// In the latter case, the value is taken as true.
        -: 6327://
        -: 6328:// On success, stores the value of the flag in *value, and returns
        -: 6329:// true.  On failure, returns false without changing *value.
function _ZN7testing8internalL9ParseFlagEPKcS2_Pb called 0 returned 0% blocks executed 0%
    #####: 6330:static bool ParseFlag(const char* str, const char* flag_name, bool* value) {
        -: 6331:  // Gets the value of the flag as a string.
    #####: 6332:  const char* const value_str = ParseFlagValue(str, flag_name, true);
    %%%%%: 6332-block  0
call    0 never executed
        -: 6333:
        -: 6334:  // Aborts if the parsing failed.
    #####: 6335:  if (value_str == nullptr) return false;
branch  0 never executed
branch  1 never executed
    %%%%%: 6335-block  0
        -: 6336:
        -: 6337:  // Converts the string value to a bool.
    #####: 6338:  *value = !(*value_str == '0' || *value_str == 'f' || *value_str == 'F');
    %%%%%: 6338-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6338-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 6338-block  2
branch  4 never executed
branch  5 never executed
    %%%%%: 6338-block  3
    %%%%%: 6338-block  4
    #####: 6339:  return true;
    %%%%%: 6339-block  0
        -: 6340:}
        -: 6341:
        -: 6342:// Parses a string for an int32_t flag, in the form of "--flag=value".
        -: 6343://
        -: 6344:// On success, stores the value of the flag in *value, and returns
        -: 6345:// true.  On failure, returns false without changing *value.
function _ZN7testing8internal9ParseFlagEPKcS2_Pi called 0 returned 0% blocks executed 0%
    #####: 6346:bool ParseFlag(const char* str, const char* flag_name, int32_t* value) {
        -: 6347:  // Gets the value of the flag as a string.
    #####: 6348:  const char* const value_str = ParseFlagValue(str, flag_name, false);
    %%%%%: 6348-block  0
call    0 never executed
        -: 6349:
        -: 6350:  // Aborts if the parsing failed.
    #####: 6351:  if (value_str == nullptr) return false;
branch  0 never executed
branch  1 never executed
    %%%%%: 6351-block  0
        -: 6352:
        -: 6353:  // Sets *value to the value of the flag.
    #####: 6354:  return ParseInt32(Message() << "The value of flag --" << flag_name, value_str,
    %%%%%: 6354-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6354-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6354-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 6354-block  3
call   10 never executed
    $$$$$: 6354-block  4
call   11 never executed
    #####: 6355:                    value);
    %%%%%: 6355-block  0
        -: 6356:}
        -: 6357:
        -: 6358:// Parses a string for a string flag, in the form of "--flag=value".
        -: 6359://
        -: 6360:// On success, stores the value of the flag in *value, and returns
        -: 6361:// true.  On failure, returns false without changing *value.
        -: 6362:template <typename String>
function _ZN7testing8internalL9ParseFlagINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbPKcS9_PT_ called 0 returned 0% blocks executed 0%
    #####: 6363:static bool ParseFlag(const char* str, const char* flag_name, String* value) {
        -: 6364:  // Gets the value of the flag as a string.
    #####: 6365:  const char* const value_str = ParseFlagValue(str, flag_name, false);
    %%%%%: 6365-block  0
call    0 never executed
        -: 6366:
        -: 6367:  // Aborts if the parsing failed.
    #####: 6368:  if (value_str == nullptr) return false;
branch  0 never executed
branch  1 never executed
    %%%%%: 6368-block  0
        -: 6369:
        -: 6370:  // Sets *value to the value of the flag.
    #####: 6371:  *value = value_str;
    %%%%%: 6371-block  0
call    0 never executed
    #####: 6372:  return true;
        -: 6373:}
        -: 6374:
        -: 6375:// Determines whether a string has a prefix that Google Test uses for its
        -: 6376:// flags, i.e., starts with GTEST_FLAG_PREFIX_ or GTEST_FLAG_PREFIX_DASH_.
        -: 6377:// If Google Test detects that a command line flag has its prefix but is not
        -: 6378:// recognized, it will print its help message. Flags starting with
        -: 6379:// GTEST_INTERNAL_PREFIX_ followed by "internal_" are considered Google Test
        -: 6380:// internal flags and do not trigger the help message.
function _ZN7testing8internalL23HasGoogleTestFlagPrefixEPKc called 0 returned 0% blocks executed 0%
    #####: 6381:static bool HasGoogleTestFlagPrefix(const char* str) {
    #####: 6382:  return (SkipPrefix("--", &str) || SkipPrefix("-", &str) ||
    %%%%%: 6382-block  0
call    0 never executed
    %%%%%: 6382-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6383:          SkipPrefix("/", &str)) &&
    %%%%%: 6383-block  0
call    0 never executed
    #####: 6384:         !SkipPrefix(GTEST_FLAG_PREFIX_ "internal_", &str) &&
branch  0 never executed
branch  1 never executed
    %%%%%: 6384-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6384-block  1
    %%%%%: 6384-block  2
    #####: 6385:         (SkipPrefix(GTEST_FLAG_PREFIX_, &str) ||
    %%%%%: 6385-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6386:          SkipPrefix(GTEST_FLAG_PREFIX_DASH_, &str));
    %%%%%: 6386-block  0
call    0 never executed
    %%%%%: 6386-block  1
        -: 6387:}
        -: 6388:
        -: 6389:// Prints a string containing code-encoded text.  The following escape
        -: 6390:// sequences can be used in the string to control the text color:
        -: 6391://
        -: 6392://   @@    prints a single '@' character.
        -: 6393://   @R    changes the color to red.
        -: 6394://   @G    changes the color to green.
        -: 6395://   @Y    changes the color to yellow.
        -: 6396://   @D    changes to the default terminal text color.
        -: 6397://
function _ZN7testing8internalL17PrintColorEncodedEPKc called 0 returned 0% blocks executed 0%
    #####: 6398:static void PrintColorEncoded(const char* str) {
    #####: 6399:  GTestColor color = GTestColor::kDefault;  // The current color.
    %%%%%: 6399-block  0
        -: 6400:
        -: 6401:  // Conceptually, we split the string into segments divided by escape
        -: 6402:  // sequences.  Then we print one segment at a time.  At the end of
        -: 6403:  // each iteration, the str pointer advances to the beginning of the
        -: 6404:  // next segment.
        -: 6405:  for (;;) {
    #####: 6406:    const char* p = strchr(str, '@');
    #####: 6407:    if (p == nullptr) {
    %%%%%: 6407-block  0
branch  0 never executed
branch  1 never executed
    #####: 6408:      ColoredPrintf(color, "%s", str);
    %%%%%: 6408-block  0
call    0 never executed
    #####: 6409:      return;
    %%%%%: 6409-block  0
        -: 6410:    }
        -: 6411:
    #####: 6412:    ColoredPrintf(color, "%s", std::string(str, p).c_str());
    %%%%%: 6412-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6412-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6412-block  2
call    8 never executed
call    9 never executed
    $$$$$: 6412-block  3
call   10 never executed
    $$$$$: 6412-block  4
    $$$$$: 6412-block  5
call   11 never executed
        -: 6413:
    #####: 6414:    const char ch = p[1];
    #####: 6415:    str = p + 2;
    #####: 6416:    if (ch == '@') {
branch  0 never executed
branch  1 never executed
    #####: 6417:      ColoredPrintf(color, "@");
    %%%%%: 6417-block  0
call    0 never executed
    #####: 6418:    } else if (ch == 'D') {
    %%%%%: 6418-block  0
branch  0 never executed
branch  1 never executed
    #####: 6419:      color = GTestColor::kDefault;
    %%%%%: 6419-block  0
    #####: 6420:    } else if (ch == 'R') {
    %%%%%: 6420-block  0
branch  0 never executed
branch  1 never executed
    #####: 6421:      color = GTestColor::kRed;
    %%%%%: 6421-block  0
    #####: 6422:    } else if (ch == 'G') {
    %%%%%: 6422-block  0
branch  0 never executed
branch  1 never executed
    #####: 6423:      color = GTestColor::kGreen;
    %%%%%: 6423-block  0
    #####: 6424:    } else if (ch == 'Y') {
    %%%%%: 6424-block  0
branch  0 never executed
branch  1 never executed
    #####: 6425:      color = GTestColor::kYellow;
    %%%%%: 6425-block  0
        -: 6426:    } else {
    #####: 6427:      --str;
    %%%%%: 6427-block  0
        -: 6428:    }
    #####: 6429:  }
    %%%%%: 6429-block  0
        -: 6430:}
        -: 6431:
        -: 6432:static const char kColorEncodedHelpMessage[] =
        -: 6433:    "This program contains tests written using " GTEST_NAME_
        -: 6434:    ". You can use the\n"
        -: 6435:    "following command line flags to control its behavior:\n"
        -: 6436:    "\n"
        -: 6437:    "Test Selection:\n"
        -: 6438:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6439:    "list_tests@D\n"
        -: 6440:    "      List the names of all tests instead of running them. The name of\n"
        -: 6441:    "      TEST(Foo, Bar) is \"Foo.Bar\".\n"
        -: 6442:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6443:    "filter=@YPOSITIVE_PATTERNS"
        -: 6444:    "[@G-@YNEGATIVE_PATTERNS]@D\n"
        -: 6445:    "      Run only the tests whose name matches one of the positive patterns "
        -: 6446:    "but\n"
        -: 6447:    "      none of the negative patterns. '?' matches any single character; "
        -: 6448:    "'*'\n"
        -: 6449:    "      matches any substring; ':' separates two patterns.\n"
        -: 6450:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6451:    "also_run_disabled_tests@D\n"
        -: 6452:    "      Run all disabled tests too.\n"
        -: 6453:    "\n"
        -: 6454:    "Test Execution:\n"
        -: 6455:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6456:    "repeat=@Y[COUNT]@D\n"
        -: 6457:    "      Run the tests repeatedly; use a negative count to repeat forever.\n"
        -: 6458:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6459:    "shuffle@D\n"
        -: 6460:    "      Randomize tests' orders on every iteration.\n"
        -: 6461:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6462:    "random_seed=@Y[NUMBER]@D\n"
        -: 6463:    "      Random number seed to use for shuffling test orders (between 1 and\n"
        -: 6464:    "      99999, or 0 to use a seed based on the current time).\n"
        -: 6465:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6466:    "recreate_environments_when_repeating@D\n"
        -: 6467:    "      Sets up and tears down the global test environment on each repeat\n"
        -: 6468:    "      of the test.\n"
        -: 6469:    "\n"
        -: 6470:    "Test Output:\n"
        -: 6471:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6472:    "color=@Y(@Gyes@Y|@Gno@Y|@Gauto@Y)@D\n"
        -: 6473:    "      Enable/disable colored output. The default is @Gauto@D.\n"
        -: 6474:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6475:    "brief=1@D\n"
        -: 6476:    "      Only print test failures.\n"
        -: 6477:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6478:    "print_time=0@D\n"
        -: 6479:    "      Don't print the elapsed time of each test.\n"
        -: 6480:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6481:    "output=@Y(@Gjson@Y|@Gxml@Y)[@G:@YDIRECTORY_PATH@G" GTEST_PATH_SEP_
        -: 6482:    "@Y|@G:@YFILE_PATH]@D\n"
        -: 6483:    "      Generate a JSON or XML report in the given directory or with the "
        -: 6484:    "given\n"
        -: 6485:    "      file name. @YFILE_PATH@D defaults to @Gtest_detail.xml@D.\n"
        -: 6486:#if GTEST_CAN_STREAM_RESULTS_
        -: 6487:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6488:    "stream_result_to=@YHOST@G:@YPORT@D\n"
        -: 6489:    "      Stream test results to the given server.\n"
        -: 6490:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 6491:    "\n"
        -: 6492:    "Assertion Behavior:\n"
        -: 6493:#if GTEST_HAS_DEATH_TEST && !GTEST_OS_WINDOWS
        -: 6494:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6495:    "death_test_style=@Y(@Gfast@Y|@Gthreadsafe@Y)@D\n"
        -: 6496:    "      Set the default death test style.\n"
        -: 6497:#endif  // GTEST_HAS_DEATH_TEST && !GTEST_OS_WINDOWS
        -: 6498:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6499:    "break_on_failure@D\n"
        -: 6500:    "      Turn assertion failures into debugger break-points.\n"
        -: 6501:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6502:    "throw_on_failure@D\n"
        -: 6503:    "      Turn assertion failures into C++ exceptions for use by an external\n"
        -: 6504:    "      test framework.\n"
        -: 6505:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6506:    "catch_exceptions=0@D\n"
        -: 6507:    "      Do not report exceptions as test failures. Instead, allow them\n"
        -: 6508:    "      to crash the program or throw a pop-up (on Windows).\n"
        -: 6509:    "\n"
        -: 6510:    "Except for @G--" GTEST_FLAG_PREFIX_
        -: 6511:    "list_tests@D, you can alternatively set "
        -: 6512:    "the corresponding\n"
        -: 6513:    "environment variable of a flag (all letters in upper-case). For example, "
        -: 6514:    "to\n"
        -: 6515:    "disable colored text output, you can either specify "
        -: 6516:    "@G--" GTEST_FLAG_PREFIX_
        -: 6517:    "color=no@D or set\n"
        -: 6518:    "the @G" GTEST_FLAG_PREFIX_UPPER_
        -: 6519:    "COLOR@D environment variable to @Gno@D.\n"
        -: 6520:    "\n"
        -: 6521:    "For more information, please read the " GTEST_NAME_
        -: 6522:    " documentation at\n"
        -: 6523:    "@G" GTEST_PROJECT_URL_ "@D. If you find a bug in " GTEST_NAME_
        -: 6524:    "\n"
        -: 6525:    "(not one in your own code or tests), please report it to\n"
        -: 6526:    "@G<" GTEST_DEV_EMAIL_ ">@D.\n";
        -: 6527:
function _ZN7testing8internalL19ParseGoogleTestFlagEPKc called 0 returned 0% blocks executed 0%
    #####: 6528:static bool ParseGoogleTestFlag(const char* const arg) {
        -: 6529:#define GTEST_INTERNAL_PARSE_FLAG(flag_name)  \
        -: 6530:  do {                                        \
        -: 6531:    auto value = GTEST_FLAG_GET(flag_name);   \
        -: 6532:    if (ParseFlag(arg, #flag_name, &value)) { \
        -: 6533:      GTEST_FLAG_SET(flag_name, value);       \
        -: 6534:      return true;                            \
        -: 6535:    }                                         \
        -: 6536:  } while (false)
        -: 6537:
    #####: 6538:  GTEST_INTERNAL_PARSE_FLAG(also_run_disabled_tests);
    %%%%%: 6538-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6538-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6538-block  2
    #####: 6539:  GTEST_INTERNAL_PARSE_FLAG(break_on_failure);
    %%%%%: 6539-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6539-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6539-block  2
    #####: 6540:  GTEST_INTERNAL_PARSE_FLAG(catch_exceptions);
    %%%%%: 6540-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6540-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6540-block  2
    #####: 6541:  GTEST_INTERNAL_PARSE_FLAG(color);
    %%%%%: 6541-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6541-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6541-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 6541-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6541-block  4
    $$$$$: 6541-block  5
call   11 never executed
    #####: 6542:  GTEST_INTERNAL_PARSE_FLAG(death_test_style);
    %%%%%: 6542-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6542-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6542-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 6542-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6542-block  4
    $$$$$: 6542-block  5
call   11 never executed
    #####: 6543:  GTEST_INTERNAL_PARSE_FLAG(death_test_use_fork);
    %%%%%: 6543-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6543-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6543-block  2
    #####: 6544:  GTEST_INTERNAL_PARSE_FLAG(fail_fast);
    %%%%%: 6544-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6544-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6544-block  2
    #####: 6545:  GTEST_INTERNAL_PARSE_FLAG(filter);
    %%%%%: 6545-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6545-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6545-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 6545-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6545-block  4
    $$$$$: 6545-block  5
call   11 never executed
    #####: 6546:  GTEST_INTERNAL_PARSE_FLAG(internal_run_death_test);
    %%%%%: 6546-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6546-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6546-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 6546-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6546-block  4
    $$$$$: 6546-block  5
call   11 never executed
    #####: 6547:  GTEST_INTERNAL_PARSE_FLAG(list_tests);
    %%%%%: 6547-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6547-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6547-block  2
    #####: 6548:  GTEST_INTERNAL_PARSE_FLAG(output);
    %%%%%: 6548-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6548-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6548-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 6548-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6548-block  4
    $$$$$: 6548-block  5
call   11 never executed
    #####: 6549:  GTEST_INTERNAL_PARSE_FLAG(brief);
    %%%%%: 6549-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6549-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6549-block  2
    #####: 6550:  GTEST_INTERNAL_PARSE_FLAG(print_time);
    %%%%%: 6550-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6550-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6550-block  2
    #####: 6551:  GTEST_INTERNAL_PARSE_FLAG(print_utf8);
    %%%%%: 6551-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6551-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6551-block  2
    #####: 6552:  GTEST_INTERNAL_PARSE_FLAG(random_seed);
    %%%%%: 6552-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6552-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6552-block  2
    #####: 6553:  GTEST_INTERNAL_PARSE_FLAG(repeat);
    %%%%%: 6553-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6553-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6553-block  2
    #####: 6554:  GTEST_INTERNAL_PARSE_FLAG(recreate_environments_when_repeating);
    %%%%%: 6554-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6554-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6554-block  2
    #####: 6555:  GTEST_INTERNAL_PARSE_FLAG(shuffle);
    %%%%%: 6555-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6555-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6555-block  2
    #####: 6556:  GTEST_INTERNAL_PARSE_FLAG(stack_trace_depth);
    %%%%%: 6556-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6556-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6556-block  2
    #####: 6557:  GTEST_INTERNAL_PARSE_FLAG(stream_result_to);
    %%%%%: 6557-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6557-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6557-block  2
branch  6 never executed
branch  7 never executed
    %%%%%: 6557-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 6557-block  4
    $$$$$: 6557-block  5
call   11 never executed
    #####: 6558:  GTEST_INTERNAL_PARSE_FLAG(throw_on_failure);
    %%%%%: 6558-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6558-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 6558-block  2
    #####: 6559:  return false;
    %%%%%: 6559-block  0
        -: 6560:}
        -: 6561:
        -: 6562:#if GTEST_USE_OWN_FLAGFILE_FLAG_
function _ZN7testing8internalL17LoadFlagsFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 6563:static void LoadFlagsFromFile(const std::string& path) {
    #####: 6564:  FILE* flagfile = posix::FOpen(path.c_str(), "r");
    %%%%%: 6564-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6565:  if (!flagfile) {
    %%%%%: 6565-block  0
branch  0 never executed
branch  1 never executed
    #####: 6566:    GTEST_LOG_(FATAL) << "Unable to open file \"" << GTEST_FLAG_GET(flagfile)
    %%%%%: 6566-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6566-block  1
call    3 never executed
    %%%%%: 6566-block  2
call    4 never executed
    $$$$$: 6566-block  3
call    5 never executed
    $$$$$: 6566-block  4
    #####: 6567:                      << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6567-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6567-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 6568:  }
    #####: 6569:  std::string contents(ReadEntireFile(flagfile));
    %%%%%: 6569-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 6569-block  1
call    4 never executed
    #####: 6570:  posix::FClose(flagfile);
    %%%%%: 6570-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6571:  std::vector<std::string> lines;
    %%%%%: 6571-block  0
call    0 never executed
    %%%%%: 6571-block  1
call    1 never executed
    $$$$$: 6571-block  2
call    2 never executed
    #####: 6572:  SplitString(contents, '\n', &lines);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6573:  for (size_t i = 0; i < lines.size(); ++i) {
    %%%%%: 6573-block  0
    %%%%%: 6573-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6573-block  2
    #####: 6574:    if (lines[i].empty()) continue;
    %%%%%: 6574-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6574-block  1
    #####: 6575:    if (!ParseGoogleTestFlag(lines[i].c_str())) g_help_flag = true;
    %%%%%: 6575-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6575-block  1
branch  5 never executed
branch  6 never executed
    %%%%%: 6575-block  2
        -: 6576:  }
    #####: 6577:}
        -: 6578:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
        -: 6579:
        -: 6580:// Parses the command line for Google Test flags, without initializing
        -: 6581:// other parts of Google Test.  The type parameter CharType can be
        -: 6582:// instantiated to either char or wchar_t.
        -: 6583:template <typename CharType>
       1*: 6584:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
       2*: 6585:  std::string flagfile_value;
       1*: 6586:  for (int i = 1; i < *argc; i++) {
    #####: 6587:    const std::string arg_string = StreamableToString(argv[i]);
    #####: 6588:    const char* const arg = arg_string.c_str();
        -: 6589:
        -: 6590:    using internal::ParseFlag;
        -: 6591:
    #####: 6592:    bool remove_flag = false;
    #####: 6593:    if (ParseGoogleTestFlag(arg)) {
    #####: 6594:      remove_flag = true;
        -: 6595:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6596:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    #####: 6597:      GTEST_FLAG_SET(flagfile, flagfile_value);
    #####: 6598:      LoadFlagsFromFile(flagfile_value);
    #####: 6599:      remove_flag = true;
        -: 6600:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6601:    } else if (arg_string == "--help" || HasGoogleTestFlagPrefix(arg)) {
        -: 6602:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6603:      // internal ones) trigger help display.
    #####: 6604:      g_help_flag = true;
        -: 6605:    }
        -: 6606:
    #####: 6607:    if (remove_flag) {
        -: 6608:      // Shift the remainder of the argv list left by one.  Note
        -: 6609:      // that argv has (*argc + 1) elements, the last one always being
        -: 6610:      // NULL.  The following loop moves the trailing NULL element as
        -: 6611:      // well.
    #####: 6612:      for (int j = i; j != *argc; j++) {
    #####: 6613:        argv[j] = argv[j + 1];
        -: 6614:      }
        -: 6615:
        -: 6616:      // Decrements the argument count.
    #####: 6617:      (*argc)--;
        -: 6618:
        -: 6619:      // We also need to decrement the iterator as we just removed
        -: 6620:      // an element.
    #####: 6621:      i--;
        -: 6622:    }
        -: 6623:  }
        -: 6624:
       1*: 6625:  if (g_help_flag) {
        -: 6626:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6627:    // latter may not be called at all if the user is using Google
        -: 6628:    // Test with another testing framework.
    #####: 6629:    PrintColorEncoded(kColorEncodedHelpMessage);
        -: 6630:  }
       1*: 6631:}
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_:
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 6584:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
    #####: 6585:  std::string flagfile_value;
    %%%%%: 6585-block  0
call    0 never executed
    %%%%%: 6585-block  1
call    1 never executed
    $$$$$: 6585-block  2
call    2 never executed
    #####: 6586:  for (int i = 1; i < *argc; i++) {
    %%%%%: 6586-block  0
branch  0 never executed
branch  1 never executed
    #####: 6587:    const std::string arg_string = StreamableToString(argv[i]);
    %%%%%: 6587-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6587-block  1
call    3 never executed
    $$$$$: 6587-block  2
call    4 never executed
    #####: 6588:    const char* const arg = arg_string.c_str();
    %%%%%: 6588-block  0
call    0 never executed
        -: 6589:
        -: 6590:    using internal::ParseFlag;
        -: 6591:
    #####: 6592:    bool remove_flag = false;
    #####: 6593:    if (ParseGoogleTestFlag(arg)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6593-block  0
branch  3 never executed
branch  4 never executed
    #####: 6594:      remove_flag = true;
    %%%%%: 6594-block  0
        -: 6595:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6596:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    %%%%%: 6596-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6596-block  1
branch  3 never executed
branch  4 never executed
    #####: 6597:      GTEST_FLAG_SET(flagfile, flagfile_value);
    %%%%%: 6597-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6598:      LoadFlagsFromFile(flagfile_value);
    %%%%%: 6598-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6599:      remove_flag = true;
    %%%%%: 6599-block  0
        -: 6600:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6601:    } else if (arg_string == "--help" || HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 6601-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6601-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6601-block  2
    %%%%%: 6601-block  3
    %%%%%: 6601-block  4
branch  6 never executed
branch  7 never executed
        -: 6602:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6603:      // internal ones) trigger help display.
    #####: 6604:      g_help_flag = true;
    %%%%%: 6604-block  0
        -: 6605:    }
        -: 6606:
    #####: 6607:    if (remove_flag) {
    %%%%%: 6607-block  0
branch  0 never executed
branch  1 never executed
        -: 6608:      // Shift the remainder of the argv list left by one.  Note
        -: 6609:      // that argv has (*argc + 1) elements, the last one always being
        -: 6610:      // NULL.  The following loop moves the trailing NULL element as
        -: 6611:      // well.
    #####: 6612:      for (int j = i; j != *argc; j++) {
    %%%%%: 6612-block  0
    %%%%%: 6612-block  1
branch  0 never executed
branch  1 never executed
    #####: 6613:        argv[j] = argv[j + 1];
    %%%%%: 6613-block  0
        -: 6614:      }
        -: 6615:
        -: 6616:      // Decrements the argument count.
    #####: 6617:      (*argc)--;
        -: 6618:
        -: 6619:      // We also need to decrement the iterator as we just removed
        -: 6620:      // an element.
    #####: 6621:      i--;
    %%%%%: 6621-block  0
        -: 6622:    }
        -: 6623:  }
        -: 6624:
    #####: 6625:  if (g_help_flag) {
    %%%%%: 6625-block  0
branch  0 never executed
branch  1 never executed
        -: 6626:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6627:    // latter may not be called at all if the user is using Google
        -: 6628:    // Test with another testing framework.
    #####: 6629:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 6629-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6630:  }
    #####: 6631:}
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_:
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_ called 1 returned 100% blocks executed 18%
        1: 6584:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
        2: 6585:  std::string flagfile_value;
        1: 6585-block  0
call    0 returned 1
        1: 6585-block  1
call    1 returned 1
    $$$$$: 6585-block  2
call    2 never executed
       1*: 6586:  for (int i = 1; i < *argc; i++) {
        1: 6586-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 6587:    const std::string arg_string = StreamableToString(argv[i]);
    %%%%%: 6587-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6587-block  1
call    3 never executed
    $$$$$: 6587-block  2
call    4 never executed
    #####: 6588:    const char* const arg = arg_string.c_str();
    %%%%%: 6588-block  0
call    0 never executed
        -: 6589:
        -: 6590:    using internal::ParseFlag;
        -: 6591:
    #####: 6592:    bool remove_flag = false;
    #####: 6593:    if (ParseGoogleTestFlag(arg)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6593-block  0
branch  3 never executed
branch  4 never executed
    #####: 6594:      remove_flag = true;
    %%%%%: 6594-block  0
        -: 6595:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6596:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    %%%%%: 6596-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6596-block  1
branch  3 never executed
branch  4 never executed
    #####: 6597:      GTEST_FLAG_SET(flagfile, flagfile_value);
    %%%%%: 6597-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6598:      LoadFlagsFromFile(flagfile_value);
    %%%%%: 6598-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6599:      remove_flag = true;
    %%%%%: 6599-block  0
        -: 6600:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6601:    } else if (arg_string == "--help" || HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 6601-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6601-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6601-block  2
    %%%%%: 6601-block  3
    %%%%%: 6601-block  4
branch  6 never executed
branch  7 never executed
        -: 6602:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6603:      // internal ones) trigger help display.
    #####: 6604:      g_help_flag = true;
    %%%%%: 6604-block  0
        -: 6605:    }
        -: 6606:
    #####: 6607:    if (remove_flag) {
    %%%%%: 6607-block  0
branch  0 never executed
branch  1 never executed
        -: 6608:      // Shift the remainder of the argv list left by one.  Note
        -: 6609:      // that argv has (*argc + 1) elements, the last one always being
        -: 6610:      // NULL.  The following loop moves the trailing NULL element as
        -: 6611:      // well.
    #####: 6612:      for (int j = i; j != *argc; j++) {
    %%%%%: 6612-block  0
    %%%%%: 6612-block  1
branch  0 never executed
branch  1 never executed
    #####: 6613:        argv[j] = argv[j + 1];
    %%%%%: 6613-block  0
        -: 6614:      }
        -: 6615:
        -: 6616:      // Decrements the argument count.
    #####: 6617:      (*argc)--;
        -: 6618:
        -: 6619:      // We also need to decrement the iterator as we just removed
        -: 6620:      // an element.
    #####: 6621:      i--;
    %%%%%: 6621-block  0
        -: 6622:    }
        -: 6623:  }
        -: 6624:
        1: 6625:  if (g_help_flag) {
        1: 6625-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 6626:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6627:    // latter may not be called at all if the user is using Google
        -: 6628:    // Test with another testing framework.
    #####: 6629:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 6629-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6630:  }
        1: 6631:}
------------------
        -: 6632:
        -: 6633:// Parses the command line for Google Test flags, without initializing
        -: 6634:// other parts of Google Test.
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPc called 1 returned 100% blocks executed 100%
        1: 6635:void ParseGoogleTestFlagsOnly(int* argc, char** argv) {
        -: 6636:#if GTEST_HAS_ABSL
        -: 6637:  if (*argc > 0) {
        -: 6638:    // absl::ParseCommandLine() requires *argc > 0.
        -: 6639:    auto positional_args = absl::flags_internal::ParseCommandLineImpl(
        -: 6640:        *argc, argv, absl::flags_internal::ArgvListAction::kRemoveParsedArgs,
        -: 6641:        absl::flags_internal::UsageFlagsAction::kHandleUsage,
        -: 6642:        absl::flags_internal::OnUndefinedFlag::kReportUndefined);
        -: 6643:    // Any command-line positional arguments not part of any command-line flag
        -: 6644:    // (or arguments to a flag) are copied back out to argv, with the program
        -: 6645:    // invocation name at position 0, and argc is resized. This includes
        -: 6646:    // positional arguments after the flag-terminating delimiter '--'.
        -: 6647:    // See https://abseil.io/docs/cpp/guides/flags.
        -: 6648:    std::copy(positional_args.begin(), positional_args.end(), argv);
        -: 6649:    if (static_cast<int>(positional_args.size()) < *argc) {
        -: 6650:      argv[positional_args.size()] = nullptr;
        -: 6651:      *argc = static_cast<int>(positional_args.size());
        -: 6652:    }
        -: 6653:  }
        -: 6654:#else
        1: 6655:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
        1: 6655-block  0
call    0 returned 1
        -: 6656:#endif
        -: 6657:
        -: 6658:  // Fix the value of *_NSGetArgc() on macOS, but if and only if
        -: 6659:  // *_NSGetArgv() == argv
        -: 6660:  // Only applicable to char** version of argv
        -: 6661:#if GTEST_OS_MAC
        -: 6662:#ifndef GTEST_OS_IOS
        -: 6663:  if (*_NSGetArgv() == argv) {
        -: 6664:    *_NSGetArgc() = *argc;
        -: 6665:  }
        -: 6666:#endif
        -: 6667:#endif
        1: 6668:}
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPw called 0 returned 0% blocks executed 0%
    #####: 6669:void ParseGoogleTestFlagsOnly(int* argc, wchar_t** argv) {
    #####: 6670:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
    %%%%%: 6670-block  0
call    0 never executed
    #####: 6671:}
        -: 6672:
        -: 6673:// The internal implementation of InitGoogleTest().
        -: 6674://
        -: 6675:// The type parameter CharType can be instantiated to either char or
        -: 6676:// wchar_t.
        -: 6677:template <typename CharType>
       1*: 6678:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6679:  // We don't want to run the initialization code twice.
       1*: 6680:  if (GTestIsInitialized()) return;
        -: 6681:
       1*: 6682:  if (*argc <= 0) return;
        -: 6683:
       1*: 6684:  g_argvs.clear();
       2*: 6685:  for (int i = 0; i != *argc; i++) {
       1*: 6686:    g_argvs.push_back(StreamableToString(argv[i]));
        -: 6687:  }
        -: 6688:
        -: 6689:#if GTEST_HAS_ABSL
        -: 6690:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6691:
        -: 6692:  // When using the Abseil Flags library, set the program usage message to the
        -: 6693:  // help message, but remove the color-encoding from the message first.
        -: 6694:  absl::SetProgramUsageMessage(absl::StrReplaceAll(
        -: 6695:      kColorEncodedHelpMessage,
        -: 6696:      {{"@D", ""}, {"@R", ""}, {"@G", ""}, {"@Y", ""}, {"@@", "@"}}));
        -: 6697:#endif  // GTEST_HAS_ABSL
        -: 6698:
       1*: 6699:  ParseGoogleTestFlagsOnly(argc, argv);
       1*: 6700:  GetUnitTestImpl()->PostFlagParsingInit();
        -: 6701:}
------------------
_ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_:
function _ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 6678:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6679:  // We don't want to run the initialization code twice.
    #####: 6680:  if (GTestIsInitialized()) return;
    %%%%%: 6680-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6680-block  1
        -: 6681:
    #####: 6682:  if (*argc <= 0) return;
    %%%%%: 6682-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6682-block  1
        -: 6683:
    #####: 6684:  g_argvs.clear();
    %%%%%: 6684-block  0
call    0 never executed
    #####: 6685:  for (int i = 0; i != *argc; i++) {
    %%%%%: 6685-block  0
branch  0 never executed
branch  1 never executed
    #####: 6686:    g_argvs.push_back(StreamableToString(argv[i]));
    %%%%%: 6686-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6686-block  1
call    4 never executed
    $$$$$: 6686-block  2
call    5 never executed
        -: 6687:  }
        -: 6688:
        -: 6689:#if GTEST_HAS_ABSL
        -: 6690:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6691:
        -: 6692:  // When using the Abseil Flags library, set the program usage message to the
        -: 6693:  // help message, but remove the color-encoding from the message first.
        -: 6694:  absl::SetProgramUsageMessage(absl::StrReplaceAll(
        -: 6695:      kColorEncodedHelpMessage,
        -: 6696:      {{"@D", ""}, {"@R", ""}, {"@G", ""}, {"@Y", ""}, {"@@", "@"}}));
        -: 6697:#endif  // GTEST_HAS_ABSL
        -: 6698:
    #####: 6699:  ParseGoogleTestFlagsOnly(argc, argv);
    %%%%%: 6699-block  0
call    0 never executed
    #####: 6700:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 never executed
call    1 never executed
        -: 6701:}
------------------
_ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_:
function _ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_ called 1 returned 100% blocks executed 79%
        1: 6678:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6679:  // We don't want to run the initialization code twice.
       1*: 6680:  if (GTestIsInitialized()) return;
        1: 6680-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 6680-block  1
        -: 6681:
       1*: 6682:  if (*argc <= 0) return;
        1: 6682-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6682-block  1
        -: 6683:
        1: 6684:  g_argvs.clear();
        1: 6684-block  0
call    0 returned 1
        2: 6685:  for (int i = 0; i != *argc; i++) {
        2: 6685-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 6686:    g_argvs.push_back(StreamableToString(argv[i]));
        1: 6686-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 6686-block  1
call    4 returned 1
    $$$$$: 6686-block  2
call    5 never executed
        -: 6687:  }
        -: 6688:
        -: 6689:#if GTEST_HAS_ABSL
        -: 6690:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6691:
        -: 6692:  // When using the Abseil Flags library, set the program usage message to the
        -: 6693:  // help message, but remove the color-encoding from the message first.
        -: 6694:  absl::SetProgramUsageMessage(absl::StrReplaceAll(
        -: 6695:      kColorEncodedHelpMessage,
        -: 6696:      {{"@D", ""}, {"@R", ""}, {"@G", ""}, {"@Y", ""}, {"@@", "@"}}));
        -: 6697:#endif  // GTEST_HAS_ABSL
        -: 6698:
        1: 6699:  ParseGoogleTestFlagsOnly(argc, argv);
        1: 6699-block  0
call    0 returned 1
        1: 6700:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 returned 1
call    1 returned 1
        -: 6701:}
------------------
        -: 6702:
        -: 6703:}  // namespace internal
        -: 6704:
        -: 6705:// Initializes Google Test.  This must be called before calling
        -: 6706:// RUN_ALL_TESTS().  In particular, it parses a command line for the
        -: 6707:// flags that Google Test recognizes.  Whenever a Google Test flag is
        -: 6708:// seen, it is removed from argv, and *argc is decremented.
        -: 6709://
        -: 6710:// No value is returned.  Instead, the Google Test flag variables are
        -: 6711:// updated.
        -: 6712://
        -: 6713:// Calling the function for the second time has no user-visible effect.
function _ZN7testing14InitGoogleTestEPiPPc called 1 returned 100% blocks executed 100%
        1: 6714:void InitGoogleTest(int* argc, char** argv) {
        -: 6715:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6716:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 6717:#else   // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        1: 6718:  internal::InitGoogleTestImpl(argc, argv);
        1: 6718-block  0
call    0 returned 1
        -: 6719:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        1: 6720:}
        -: 6721:
        -: 6722:// This overloaded version can be used in Windows programs compiled in
        -: 6723:// UNICODE mode.
function _ZN7testing14InitGoogleTestEPiPPw called 0 returned 0% blocks executed 0%
    #####: 6724:void InitGoogleTest(int* argc, wchar_t** argv) {
        -: 6725:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6726:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 6727:#else   // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6728:  internal::InitGoogleTestImpl(argc, argv);
    %%%%%: 6728-block  0
call    0 never executed
        -: 6729:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6730:}
        -: 6731:
        -: 6732:// This overloaded version can be used on Arduino/embedded platforms where
        -: 6733:// there is no argc/argv.
function _ZN7testing14InitGoogleTestEv called 0 returned 0% blocks executed 0%
    #####: 6734:void InitGoogleTest() {
        -: 6735:  // Since Arduino doesn't have a command line, fake out the argc/argv arguments
    #####: 6736:  int argc = 1;
    #####: 6737:  const auto arg0 = "dummy";
    #####: 6738:  char* argv0 = const_cast<char*>(arg0);
    #####: 6739:  char** argv = &argv0;
        -: 6740:
        -: 6741:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6742:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(&argc, argv);
        -: 6743:#else   // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6744:  internal::InitGoogleTestImpl(&argc, argv);
    %%%%%: 6744-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6745:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6746:}
    %%%%%: 6746-block  0
        -: 6747:
function _ZN7testing7TempDirB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 6748:std::string TempDir() {
        -: 6749:#if defined(GTEST_CUSTOM_TEMPDIR_FUNCTION_)
        -: 6750:  return GTEST_CUSTOM_TEMPDIR_FUNCTION_();
        -: 6751:#elif GTEST_OS_WINDOWS_MOBILE
        -: 6752:  return "\\temp\\";
        -: 6753:#elif GTEST_OS_WINDOWS
        -: 6754:  const char* temp_dir = internal::posix::GetEnv("TEMP");
        -: 6755:  if (temp_dir == nullptr || temp_dir[0] == '\0') {
        -: 6756:    return "\\temp\\";
        -: 6757:  } else if (temp_dir[strlen(temp_dir) - 1] == '\\') {
        -: 6758:    return temp_dir;
        -: 6759:  } else {
        -: 6760:    return std::string(temp_dir) + "\\";
        -: 6761:  }
        -: 6762:#elif GTEST_OS_LINUX_ANDROID
        -: 6763:  const char* temp_dir = internal::posix::GetEnv("TEST_TMPDIR");
        -: 6764:  if (temp_dir == nullptr || temp_dir[0] == '\0') {
        -: 6765:    return "/data/local/tmp/";
        -: 6766:  } else {
        -: 6767:    return temp_dir;
        -: 6768:  }
        -: 6769:#elif GTEST_OS_LINUX
    #####: 6770:  const char* temp_dir = internal::posix::GetEnv("TEST_TMPDIR");
    %%%%%: 6770-block  0
call    0 never executed
    #####: 6771:  if (temp_dir == nullptr || temp_dir[0] == '\0') {
branch  0 never executed
branch  1 never executed
    %%%%%: 6771-block  0
branch  2 never executed
branch  3 never executed
    #####: 6772:    return "/tmp/";
    %%%%%: 6772-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6772-block  1
call    4 never executed
    $$$$$: 6772-block  2
call    5 never executed
    $$$$$: 6772-block  3
        -: 6773:  } else {
    #####: 6774:    return temp_dir;
    %%%%%: 6774-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6774-block  1
call    4 never executed
    $$$$$: 6774-block  2
call    5 never executed
    $$$$$: 6774-block  3
        -: 6775:  }
        -: 6776:#else
        -: 6777:  return "/tmp/";
        -: 6778:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 6779:}
        -: 6780:
        -: 6781:// Class ScopedTrace
        -: 6782:
        -: 6783:// Pushes the given source file location and message onto a per-thread
        -: 6784:// trace stack maintained by Google Test.
function _ZN7testing11ScopedTrace9PushTraceEPKciNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 6785:void ScopedTrace::PushTrace(const char* file, int line, std::string message) {
    #####: 6786:  internal::TraceInfo trace;
    %%%%%: 6786-block  0
call    0 never executed
    %%%%%: 6786-block  1
call    1 never executed
    $$$$$: 6786-block  2
call    2 never executed
    #####: 6787:  trace.file = file;
    #####: 6788:  trace.line = line;
    #####: 6789:  trace.message.swap(message);
call    0 never executed
        -: 6790:
    #####: 6791:  UnitTest::GetInstance()->PushGTestTrace(trace);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6791-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6792:}
        -: 6793:
        -: 6794:// Pops the info pushed by the c'tor.
function _ZN7testing11ScopedTraceD2Ev called 0 returned 0% blocks executed 0%
    #####: 6795:ScopedTrace::~ScopedTrace() GTEST_LOCK_EXCLUDED_(&UnitTest::mutex_) {
    #####: 6796:  UnitTest::GetInstance()->PopGTestTrace();
    %%%%%: 6796-block  0
call    0 never executed
call    1 never executed
    #####: 6797:}
        -: 6798:
        -: 6799:}  // namespace testing
